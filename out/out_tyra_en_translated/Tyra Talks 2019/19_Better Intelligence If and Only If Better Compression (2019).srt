1
00:00:00,000 --> 00:00:10,000
The most direct benefit of this design is that,

2
00:00:10,000 --> 00:00:18,000
on average, each symbol's value,

3
00:00:18,000 --> 00:00:25,000
its frequency, and the frequency we represent.

4
00:00:25,000 --> 00:00:29,000
With this design, we can immediately see that

5
00:00:29,000 --> 00:00:37,000
by doing this, we can compress the data to theoretically the lowest length,

6
00:00:37,000 --> 00:00:39,000
which is Shannon Entropy.

7
00:00:39,000 --> 00:00:42,000
This is a pretty classic result.

8
00:00:42,000 --> 00:00:44,000
I guess a lot of people already know about it.

9
00:00:44,000 --> 00:00:49,000
But the discussion here is more like

10
00:00:49,000 --> 00:00:54,000
assuming that we already know the probability of X and Y.

11
00:00:54,000 --> 00:00:57,000
But in actual application,

12
00:00:57,000 --> 00:01:00,000
we usually don't know about it.

13
00:01:00,000 --> 00:01:02,000
We have to learn about it.

14
00:01:02,000 --> 00:01:09,000
Next, we will mainly discuss how to learn PX and PY.

15
00:01:09,000 --> 00:01:16,000
Next, we will relax the assumption a bit.

16
00:01:16,000 --> 00:01:20,000
Let's assume that we don't know PX and PY anymore.

17
00:01:20,000 --> 00:01:25,000
But we know that this input, 0001, 001,

18
00:01:25,000 --> 00:01:29,000
represents a person's routine.

19
00:01:29,000 --> 00:01:32,000
This person's routine is basically only

20
00:01:32,000 --> 00:01:36,000
sleeping, eating, and running.

21
00:01:36,000 --> 00:01:40,000
Let's assume that we know this,

22
00:01:40,000 --> 00:01:44,000
and we know that 00 means sleeping,

23
00:01:44,000 --> 00:01:46,000
and 01 means running.

24
00:01:47,000 --> 00:01:52,000
It's easy to predict what the next one will be.

25
00:01:52,000 --> 00:01:56,000
Because we know that this person is sleeping.

26
00:01:56,000 --> 00:02:00,000
The next thing he will do is probably running.

27
00:02:00,000 --> 00:02:05,000
So the next two symbols will probably be 01.

28
00:02:05,000 --> 00:02:09,000
Let's assume that we know

29
00:02:10,000 --> 00:02:17,000
that the source of this signal is a Markov chain.

30
00:02:17,000 --> 00:02:20,000
Then we can use the method of counting to know

31
00:02:20,000 --> 00:02:23,000
what the next step will be.

32
00:02:23,000 --> 00:02:26,000
For example, if we count to 10 times,

33
00:02:26,000 --> 00:02:28,000
6 times is running,

34
00:02:28,000 --> 00:02:30,000
2 times is eating,

35
00:02:30,000 --> 00:02:36,000
then we know that PY is probably equal to 0.6.

36
00:02:36,000 --> 00:02:42,000
But this is still not the same as what we actually encounter.

37
00:02:42,000 --> 00:02:46,000
Because we don't actually know if this 001, 001, 001

38
00:02:46,000 --> 00:02:49,000
represents a person's routine,

39
00:02:49,000 --> 00:02:53,000
or DNA, or a picture.

40
00:02:53,000 --> 00:02:56,000
So what do we do at this point?

41
00:02:56,000 --> 00:03:02,000
Later on, Leopold Zip came up with the idea that

42
00:03:02,000 --> 00:03:08,000
we assume that it is a Markov chain.

43
00:03:08,000 --> 00:03:13,000
We keep cutting the inputs.

44
00:03:13,000 --> 00:03:19,000
If we encounter a new chunk that we have never seen before,

45
00:03:19,000 --> 00:03:22,000
we treat it as a new chunk.

46
00:03:22,000 --> 00:03:28,000
For example, if the original data is A, B, R, A, C, A, D, A, B, R, A,

47
00:03:28,000 --> 00:03:31,000
Leopold Zip said, OK, we see A,

48
00:03:31,000 --> 00:03:35,000
so A is a chunk that we have never seen before.

49
00:03:35,000 --> 00:03:38,000
B is also a chunk that we have never seen before.

50
00:03:38,000 --> 00:03:40,000
R is also a chunk that we have never seen before.

51
00:03:40,000 --> 00:03:44,000
When it comes to A, we find that A has actually been seen before.

52
00:03:44,000 --> 00:03:48,000
So we can add E to A,

53
00:03:48,000 --> 00:03:50,000
the frequency of its appearance.

54
00:03:50,000 --> 00:03:54,000
So after R, the frequency of A's appearance is E.

55
00:03:54,000 --> 00:03:57,000
Next, we look at A, C.

56
00:03:57,000 --> 00:04:00,000
A, C is a chunk that we have never seen before,

57
00:04:00,000 --> 00:04:03,000
so it is a unit of its own.

58
00:04:03,000 --> 00:04:06,000
A has also been seen before, but A, D has not.

59
00:04:06,000 --> 00:04:08,000
And so on.

60
00:04:08,000 --> 00:04:10,000
After we chunk it up,

61
00:04:10,000 --> 00:04:16,000
we can treat it as a separate unit,

62
00:04:16,000 --> 00:04:20,000
and then count the frequency of A after B,

63
00:04:20,000 --> 00:04:23,000
and the frequency of R after A, C.

64
00:04:23,000 --> 00:04:25,000
In this way,

65
00:04:25,000 --> 00:04:27,000
we will be able to know

66
00:04:27,000 --> 00:04:31,000
the probability of each symbol.

67
00:04:33,000 --> 00:04:38,000
This is basically what we do on the computer.

68
00:04:38,000 --> 00:04:41,000
For those of you who are writing programs,

69
00:04:41,000 --> 00:04:45,000
we might use GZip or WinZip

70
00:04:45,000 --> 00:04:48,000
to compress these programs.

71
00:04:48,000 --> 00:04:52,000
When these WinZip and GZip programs are compressed,

72
00:04:52,000 --> 00:04:55,000
they are actually doing this thing

73
00:04:55,000 --> 00:05:01,000
to predict the probability of the next byte.

74
00:05:01,000 --> 00:05:06,000
And then do the arithmetic coding based on that.

75
00:05:06,000 --> 00:05:10,000
But there are a few drawbacks to doing this.

76
00:05:10,000 --> 00:05:13,000
There are two main drawbacks.

77
00:05:13,000 --> 00:05:17,000
The first drawback is

78
00:05:17,000 --> 00:05:20,000
that it does not use all the information

79
00:05:20,000 --> 00:05:24,000
in this whole string of words, A, B, R, A, C, A.

80
00:05:24,000 --> 00:05:27,000
For example, if we want to answer this question,

81
00:05:27,000 --> 00:05:33,000
what is the probability of seeing A after B, R?

82
00:05:33,000 --> 00:05:37,000
At this point, we haven't chunked B, R,

83
00:05:37,000 --> 00:05:41,000
so it might just use the number of times A appears.

84
00:05:41,000 --> 00:05:46,000
But we see that at least in this segment,

85
00:05:46,000 --> 00:05:49,000
after B, R appears, A always appears.

86
00:05:49,000 --> 00:05:52,000
So we know that the probability of A is very high.

87
00:05:52,000 --> 00:05:55,000
But if we use Lampell's Zip to chunk,

88
00:05:55,000 --> 00:05:59,000
we don't actually get this information.

89
00:05:59,000 --> 00:06:01,000
This is the first question.

90
00:06:01,000 --> 00:06:04,000
The second question is,

91
00:06:04,000 --> 00:06:07,000
let's say we want to know

92
00:06:07,000 --> 00:06:12,000
what B is after R, A, A.

93
00:06:13,000 --> 00:06:19,000
Because R, A, A is not in our chunk,

94
00:06:19,000 --> 00:06:23,000
so we just take the number of times B appears.

95
00:06:23,000 --> 00:06:28,000
But here, we already have

96
00:06:28,000 --> 00:06:32,000
the number of times A appears after B.

97
00:06:32,000 --> 00:06:35,000
We already have this information.

98
00:06:35,000 --> 00:06:40,000
Or if we have a lot of different prefixes

99
00:06:40,000 --> 00:06:42,000
that we can use,

100
00:06:42,000 --> 00:06:45,000
Lampell's Zip will only use one logic.

101
00:06:45,000 --> 00:06:50,000
If we have A, C,

102
00:06:50,000 --> 00:06:53,000
it will choose one randomly.

103
00:06:53,000 --> 00:06:59,000
At this point, it might not choose the right one.

104
00:06:59,000 --> 00:07:04,000
These are the two main shortcomings of Lampell's Zip.

105
00:07:04,000 --> 00:07:12,000
So how do we solve the shortcomings of Lampell's Zip?

106
00:07:12,000 --> 00:07:16,000
These shortcomings will be solved

107
00:07:16,000 --> 00:07:21,000
in the context-free weighting algorithm.

108
00:07:21,000 --> 00:07:25,000
The first shortcoming of Lampell's Zip is

109
00:07:25,000 --> 00:07:28,000
that some prefixes,

110
00:07:28,000 --> 00:07:30,000
although it sees them,

111
00:07:30,000 --> 00:07:32,000
it doesn't parse them.

112
00:07:32,000 --> 00:07:34,000
To solve this problem,

113
00:07:34,000 --> 00:07:36,000
it's very simple.

114
00:07:36,000 --> 00:07:40,000
We don't skip the symbol.

115
00:07:40,000 --> 00:07:43,000
Every time, we use one symbol

116
00:07:43,000 --> 00:07:47,000
to see how many prefixes are in front of it.

117
00:07:47,000 --> 00:07:51,000
This way, we can get all the prefixes.

118
00:07:51,000 --> 00:07:53,000
For example,

119
00:07:53,000 --> 00:07:59,000
let's say our data is 0100110.

120
00:07:59,000 --> 00:08:03,000
Let's record what happens

121
00:08:03,000 --> 00:08:07,000
after each prefix.

122
00:08:07,000 --> 00:08:11,000
We can see that after 110,

123
00:08:11,000 --> 00:08:13,000
there's a 0.

124
00:08:13,000 --> 00:08:15,000
So we can see that

125
00:08:15,000 --> 00:08:17,000
after 110,

126
00:08:17,000 --> 00:08:19,000
we can see that

127
00:08:19,000 --> 00:08:21,000
after 011,

128
00:08:21,000 --> 00:08:23,000
there's a 0.

129
00:08:23,000 --> 00:08:25,000
So we can record that

130
00:08:25,000 --> 00:08:27,000
after 011,

131
00:08:27,000 --> 00:08:29,000
there's a 0.

132
00:08:29,000 --> 00:08:31,000
And after 001,

133
00:08:31,000 --> 00:08:33,000
there's a 1.

134
00:08:33,000 --> 00:08:35,000
So after 001,

135
00:08:35,000 --> 00:08:37,000
there's a 1.

136
00:08:37,000 --> 00:08:39,000
If we do this slowly,

137
00:08:39,000 --> 00:08:41,000
we'll get a more comprehensive

138
00:08:41,000 --> 00:08:43,000
summary than Lampell's Zip.

139
00:08:43,000 --> 00:08:45,000
So this solves

140
00:08:45,000 --> 00:08:47,000
its first problem.

141
00:08:47,000 --> 00:08:49,000
Lampell's Zip has a second problem.

142
00:08:49,000 --> 00:08:51,000
Let's say

143
00:08:51,000 --> 00:08:53,000
a lot of prefixes

144
00:08:53,000 --> 00:08:55,000
don't satisfy

145
00:08:55,000 --> 00:08:57,000
the query we want.

146
00:08:57,000 --> 00:08:59,000
Which one should we choose?

147
00:08:59,000 --> 00:09:01,000
Specifically,

148
00:09:01,000 --> 00:09:03,000
let's say

149
00:09:03,000 --> 00:09:05,000
we already know

150
00:09:05,000 --> 00:09:07,000
the data is like this,

151
00:09:07,000 --> 00:09:09,000
and we want to know

152
00:09:09,000 --> 00:09:11,000
the probability of the 8th symbol

153
00:09:11,000 --> 00:09:13,000
being 0.

154
00:09:13,000 --> 00:09:15,000
We can frame this problem

155
00:09:15,000 --> 00:09:17,000
into

156
00:09:17,000 --> 00:09:19,000
the probability of 0

157
00:09:19,000 --> 00:09:21,000
after we see 0.

158
00:09:21,000 --> 00:09:23,000
At this point,

159
00:09:23,000 --> 00:09:25,000
let's say

160
00:09:25,000 --> 00:09:27,000
the first symbol is 0,

161
00:09:27,000 --> 00:09:29,000
and the second symbol

162
00:09:29,000 --> 00:09:31,000
is a 1.

163
00:09:31,000 --> 00:09:33,000
So the first symbol is 0,

164
00:09:33,000 --> 00:09:35,000
and the second symbol is 0.

165
00:09:35,000 --> 00:09:37,000
So the first symbol is 0,

166
00:09:37,000 --> 00:09:39,000
and the second symbol is 0.

167
00:09:39,000 --> 00:09:41,000
So the first symbol is 0,

168
00:09:41,000 --> 00:09:43,000
and the second symbol is 1.

169
00:09:43,000 --> 00:09:45,000
We'll have the same result.

170
00:09:45,000 --> 00:09:47,000
The probability of 0

171
00:09:47,000 --> 00:09:49,000
after 0 is 0.5.

172
00:09:49,000 --> 00:09:51,000
But we can also answer

173
00:09:51,000 --> 00:09:53,000
the 8th question

174
00:09:53,000 --> 00:09:55,000
from the perspective

175
00:09:55,000 --> 00:09:57,000
that the first symbol is 0, 1.

176
00:09:57,000 --> 00:09:59,000
If we look at it

177
00:09:59,000 --> 00:10:01,000
from this perspective,

178
00:10:01,000 --> 00:10:03,000
we'll find that

179
00:10:03,000 --> 00:10:05,000
if the first symbol is 0, 1,

180
00:10:05,000 --> 00:10:07,000
there will be a 0 after that.

181
00:10:07,000 --> 00:10:09,000
If the first symbol is 0, 1,

182
00:10:09,000 --> 00:10:11,000
there will be a 0 after that.

183
00:10:11,000 --> 00:10:13,000
So if we see 0, 1,

184
00:10:13,000 --> 00:10:15,000
the probability of 0

185
00:10:15,000 --> 00:10:17,000
is 100%.

186
00:10:17,000 --> 00:10:19,000
So we should

187
00:10:19,000 --> 00:10:21,000
choose

188
00:10:21,000 --> 00:10:23,000
which pattern

189
00:10:23,000 --> 00:10:25,000
to represent

190
00:10:25,000 --> 00:10:27,000
our probability.

191
00:10:27,000 --> 00:10:29,000
To solve this problem,

192
00:10:29,000 --> 00:10:31,000
we can

193
00:10:31,000 --> 00:10:33,000
use

194
00:10:33,000 --> 00:10:35,000
some

195
00:10:35,000 --> 00:10:37,000
principles

196
00:10:37,000 --> 00:10:39,000
of natural

197
00:10:39,000 --> 00:10:41,000
philosophy.

198
00:10:41,000 --> 00:10:43,000
One of the principles

199
00:10:43,000 --> 00:10:45,000
is that

200
00:10:45,000 --> 00:10:47,000
this is a philosophy,

201
00:10:47,000 --> 00:10:49,000
but we'll see

202
00:10:49,000 --> 00:10:51,000
how to define

203
00:10:51,000 --> 00:10:53,000
this philosophy

204
00:10:53,000 --> 00:10:55,000
to define it.

205
00:10:55,000 --> 00:10:57,000
In this philosophy,

206
00:10:57,000 --> 00:10:59,000
if there are many different

207
00:10:59,000 --> 00:11:01,000
theories that can

208
00:11:01,000 --> 00:11:03,000
explain a phenomenon,

209
00:11:03,000 --> 00:11:05,000
we have no choice

210
00:11:05,000 --> 00:11:07,000
but to keep all the theories.

211
00:11:07,000 --> 00:11:09,000
We can't say

212
00:11:09,000 --> 00:11:11,000
which theory is better.

213
00:11:11,000 --> 00:11:13,000
As long as the evidence

214
00:11:13,000 --> 00:11:15,000
is consistent,

215
00:11:15,000 --> 00:11:17,000
we'll see

216
00:11:17,000 --> 00:11:19,000
how to

217
00:11:19,000 --> 00:11:21,000
define it.

218
00:11:21,000 --> 00:11:23,000
Here,

219
00:11:23,000 --> 00:11:25,000
we can

220
00:11:25,000 --> 00:11:27,000
think of the problem

221
00:11:27,000 --> 00:11:29,000
as

222
00:11:29,000 --> 00:11:31,000
we already have the data.

223
00:11:31,000 --> 00:11:33,000
Which model

224
00:11:33,000 --> 00:11:35,000
should we use

225
00:11:35,000 --> 00:11:37,000
to explain the data?

226
00:11:37,000 --> 00:11:39,000
There are many different models.

227
00:11:39,000 --> 00:11:41,000
The first model is

228
00:11:41,000 --> 00:11:43,000
that we don't care about

229
00:11:43,000 --> 00:11:45,000
the probability of

230
00:11:45,000 --> 00:11:47,000
the next 0 or 1.

231
00:11:47,000 --> 00:11:49,000
This model

232
00:11:49,000 --> 00:11:51,000
is more

233
00:11:51,000 --> 00:11:53,000
complicated.

234
00:11:53,000 --> 00:11:55,000
It may use some

235
00:11:55,000 --> 00:11:57,000
prefixes.

236
00:11:57,000 --> 00:11:59,000
This model is more complicated.

237
00:11:59,000 --> 00:12:01,000
Which model

238
00:12:01,000 --> 00:12:03,000
should we use?

239
00:12:07,000 --> 00:12:09,000
If we accept

240
00:12:09,000 --> 00:12:11,000
this principle,

241
00:12:11,000 --> 00:12:13,000
it means

242
00:12:13,000 --> 00:12:15,000
we have to give

243
00:12:15,000 --> 00:12:17,000
each model

244
00:12:17,000 --> 00:12:19,000
a weight.

245
00:12:19,000 --> 00:12:21,000
How do we give

246
00:12:21,000 --> 00:12:23,000
each model a weight?

247
00:12:23,000 --> 00:12:25,000
This is what we

248
00:12:25,000 --> 00:12:27,000
are going to discuss.

249
00:12:27,000 --> 00:12:29,000
Here,

250
00:12:29,000 --> 00:12:31,000
we mainly want to

251
00:12:31,000 --> 00:12:33,000
use this model

252
00:12:33,000 --> 00:12:35,000
to

253
00:12:35,000 --> 00:12:37,000
visualize

254
00:12:37,000 --> 00:12:39,000
the weight.

255
00:12:39,000 --> 00:12:41,000
If we want to

256
00:12:41,000 --> 00:12:43,000
see the next 0 or 1,

257
00:12:43,000 --> 00:12:45,000
we can

258
00:12:45,000 --> 00:12:47,000
think of it as

259
00:12:47,000 --> 00:12:49,000
the weight of this model

260
00:12:49,000 --> 00:12:51,000
and this model.

261
00:12:51,000 --> 00:12:53,000
For this model,

262
00:12:53,000 --> 00:12:55,000
it is the weight of

263
00:12:55,000 --> 00:12:57,000
this model and this model.

264
00:12:57,000 --> 00:12:59,000
For this model,

265
00:12:59,000 --> 00:13:01,000
it is the weight of

266
00:13:01,000 --> 00:13:03,000
these five models.

267
00:13:03,000 --> 00:13:05,000
From the image,

268
00:13:05,000 --> 00:13:07,000
we can see

269
00:13:07,000 --> 00:13:09,000
two small models.

270
00:13:09,000 --> 00:13:11,000
Is there a way

271
00:13:11,000 --> 00:13:13,000
to know

272
00:13:13,000 --> 00:13:15,000
the weight of

273
00:13:15,000 --> 00:13:17,000
this large model?

274
00:13:17,000 --> 00:13:19,000
Let's assume we know

275
00:13:19,000 --> 00:13:21,000
the weight of the small model.

276
00:13:21,000 --> 00:13:23,000
Here, we have

277
00:13:23,000 --> 00:13:25,000
five parameters,

278
00:13:25,000 --> 00:13:27,000
w1', w2', w3'.

279
00:13:27,000 --> 00:13:29,000
In the

280
00:13:29,000 --> 00:13:31,000
wide field,

281
00:13:31,000 --> 00:13:33,000
this number

282
00:13:33,000 --> 00:13:35,000
may have

283
00:13:35,000 --> 00:13:37,000
an exponential value

284
00:13:37,000 --> 00:13:39,000
of 2.

285
00:13:39,000 --> 00:13:41,000
We need to

286
00:13:41,000 --> 00:13:43,000
calculate this number.

287
00:13:43,000 --> 00:13:45,000
Can we not

288
00:13:45,000 --> 00:13:47,000
calculate

289
00:13:47,000 --> 00:13:49,000
such a large number

290
00:13:49,000 --> 00:13:51,000
of numbers?

291
00:13:51,000 --> 00:13:53,000
Can we not

292
00:13:53,000 --> 00:13:55,000
use such a small number

293
00:13:55,000 --> 00:13:57,000
to calculate the weight?

294
00:13:57,000 --> 00:13:59,000
This is a problem

295
00:13:59,000 --> 00:14:01,000
we encounter in practice.

296
00:14:01,000 --> 00:14:03,000
To put it

297
00:14:03,000 --> 00:14:05,000
simply,

298
00:14:05,000 --> 00:14:07,000
the main

299
00:14:07,000 --> 00:14:09,000
insight here

300
00:14:09,000 --> 00:14:11,000
is that

301
00:14:11,000 --> 00:14:13,000
we can

302
00:14:13,000 --> 00:14:15,000
use the concept of

303
00:14:15,000 --> 00:14:17,000
multiplication

304
00:14:17,000 --> 00:14:19,000
to do

305
00:14:19,000 --> 00:14:21,000
recursive

306
00:14:21,000 --> 00:14:23,000
calculation.

307
00:14:23,000 --> 00:14:25,000
The main concept is that

308
00:14:25,000 --> 00:14:27,000
if

309
00:14:27,000 --> 00:14:29,000
p is equal to

310
00:14:29,000 --> 00:14:31,000
this,

311
00:14:31,000 --> 00:14:33,000
these two

312
00:14:33,000 --> 00:14:35,000
equations

313
00:14:35,000 --> 00:14:37,000
are like

314
00:14:37,000 --> 00:14:39,000
a cross-product

315
00:14:39,000 --> 00:14:41,000
of these four

316
00:14:41,000 --> 00:14:43,000
models.

317
00:14:43,000 --> 00:14:45,000
These four equations

318
00:14:45,000 --> 00:14:47,000
seem to

319
00:14:47,000 --> 00:14:49,000
describe

320
00:14:49,000 --> 00:14:51,000
these four equations.

321
00:14:51,000 --> 00:14:53,000
In the wide field,

322
00:14:53,000 --> 00:14:55,000
let's say

323
00:14:55,000 --> 00:14:57,000
we define

324
00:14:57,000 --> 00:14:59,000
a larger

325
00:14:59,000 --> 00:15:01,000
model.

326
00:15:01,000 --> 00:15:03,000
If we simply look at

327
00:15:03,000 --> 00:15:05,000
0, 1, 0, 1,

328
00:15:05,000 --> 00:15:07,000
and then add

329
00:15:07,000 --> 00:15:09,000
the numbers below

330
00:15:09,000 --> 00:15:11,000
to make

331
00:15:11,000 --> 00:15:13,000
a cross-product,

332
00:15:13,000 --> 00:15:15,000
we will get

333
00:15:15,000 --> 00:15:17,000
an N-square.

334
00:15:17,000 --> 00:15:19,000
If we define

335
00:15:19,000 --> 00:15:21,000
this weight,

336
00:15:21,000 --> 00:15:23,000
this seems to be

337
00:15:23,000 --> 00:15:25,000
an intuitive approach.

338
00:15:25,000 --> 00:15:27,000
In fact,

339
00:15:27,000 --> 00:15:29,000
this approach is correct.

340
00:15:29,000 --> 00:15:31,000
There are a few reasons

341
00:15:31,000 --> 00:15:33,000
why it is correct.

342
00:15:33,000 --> 00:15:35,000
One of the reasons

343
00:15:35,000 --> 00:15:37,000
is that

344
00:15:37,000 --> 00:15:39,000
when we define

345
00:15:39,000 --> 00:15:41,000
these weights,

346
00:15:41,000 --> 00:15:43,000
w1', w2', w3', w4',

347
00:15:43,000 --> 00:15:45,000
and we use

348
00:15:45,000 --> 00:15:47,000
recursive

349
00:15:47,000 --> 00:15:49,000
to define them,

350
00:15:49,000 --> 00:15:51,000
we will find that

351
00:15:51,000 --> 00:15:53,000
these w1', w2', w3', w4',

352
00:15:53,000 --> 00:15:55,000
and w5'

353
00:15:55,000 --> 00:15:57,000
are intuitive.

354
00:15:57,000 --> 00:15:59,000
For example,

355
00:15:59,000 --> 00:16:01,000
if we know that

356
00:16:01,000 --> 00:16:03,000
the number below is equal to 1,

357
00:16:03,000 --> 00:16:05,000
then the number above

358
00:16:05,000 --> 00:16:07,000
must be equal to 1.

359
00:16:07,000 --> 00:16:09,000
This is the first good quality.

360
00:16:09,000 --> 00:16:11,000
OK.

361
00:16:11,000 --> 00:16:13,000
There is

362
00:16:13,000 --> 00:16:15,000
a second

363
00:16:15,000 --> 00:16:17,000
intuitive

364
00:16:17,000 --> 00:16:19,000
recursive

365
00:16:19,000 --> 00:16:21,000
model

366
00:16:21,000 --> 00:16:23,000
to prove

367
00:16:23,000 --> 00:16:25,000
that it is a good model.

368
00:16:25,000 --> 00:16:27,000
The second

369
00:16:27,000 --> 00:16:29,000
good intuitive

370
00:16:29,000 --> 00:16:31,000
argument is that

371
00:16:31,000 --> 00:16:33,000
if we do this,

372
00:16:33,000 --> 00:16:35,000
we actually

373
00:16:35,000 --> 00:16:37,000
multiply

374
00:16:37,000 --> 00:16:39,000
the tree

375
00:16:39,000 --> 00:16:41,000
of the

376
00:16:41,000 --> 00:16:43,000
two-dimensional

377
00:16:43,000 --> 00:16:45,000
number

378
00:16:45,000 --> 00:16:47,000
by its weight,

379
00:16:47,000 --> 00:16:49,000
which becomes

380
00:16:49,000 --> 00:16:51,000
the sum of

381
00:16:51,000 --> 00:16:53,000
the two dimensions.

382
00:16:53,000 --> 00:16:55,000
For example,

383
00:16:55,000 --> 00:16:57,000
there are many trees here.

384
00:16:57,000 --> 00:16:59,000
How much weight

385
00:16:59,000 --> 00:17:01,000
should we give to this tree?

386
00:17:01,000 --> 00:17:03,000
Basically,

387
00:17:03,000 --> 00:17:05,000
1 minus the position

388
00:17:05,000 --> 00:17:07,000
here,

389
00:17:07,000 --> 00:17:09,000
multiplied by 1 minus the position here,

390
00:17:09,000 --> 00:17:11,000
multiplied by the position here,

391
00:17:11,000 --> 00:17:13,000
multiplied by the position here.

392
00:17:13,000 --> 00:17:15,000
If it is not lift,

393
00:17:15,000 --> 00:17:17,000
it is 1 minus w.

394
00:17:17,000 --> 00:17:19,000
If it is lift,

395
00:17:19,000 --> 00:17:21,000
it is 1 minus w.

396
00:17:21,000 --> 00:17:23,000
So basically,

397
00:17:23,000 --> 00:17:25,000
what we are doing is

398
00:17:25,000 --> 00:17:27,000
giving these trees

399
00:17:27,000 --> 00:17:29,000
a weight,

400
00:17:29,000 --> 00:17:31,000
which is the sum of

401
00:17:31,000 --> 00:17:33,000
the two dimensions.

402
00:17:33,000 --> 00:17:35,000
Let's say

403
00:17:35,000 --> 00:17:37,000
there are

404
00:17:37,000 --> 00:17:39,000
some practical examples.

405
00:17:39,000 --> 00:17:41,000
Let's say

406
00:17:41,000 --> 00:17:43,000
there are

407
00:17:43,000 --> 00:17:45,000
these trees

408
00:17:45,000 --> 00:17:47,000
of the

409
00:17:47,000 --> 00:17:49,000
two dimensions.

410
00:17:49,000 --> 00:17:51,000
We will find that

411
00:17:51,000 --> 00:17:53,000
these w

412
00:17:53,000 --> 00:17:55,000
meet this formula.

413
00:17:55,000 --> 00:17:57,000
For example,

414
00:17:57,000 --> 00:17:59,000
if the top is 1,

415
00:17:59,000 --> 00:18:01,000
the next

416
00:18:01,000 --> 00:18:03,000
is 5.

417
00:18:03,000 --> 00:18:05,000
If this side is 1,

418
00:18:05,000 --> 00:18:07,000
the top is 5.

419
00:18:07,000 --> 00:18:09,000
If we do this,

420
00:18:09,000 --> 00:18:11,000
we will find that

421
00:18:11,000 --> 00:18:13,000
if we want to

422
00:18:13,000 --> 00:18:15,000
specify a tree,

423
00:18:15,000 --> 00:18:17,000
we need so many information,

424
00:18:17,000 --> 00:18:19,000
so many bits.

425
00:18:19,000 --> 00:18:21,000
Because we have

426
00:18:21,000 --> 00:18:23,000
different things

427
00:18:23,000 --> 00:18:25,000
to describe the

428
00:18:25,000 --> 00:18:27,000
two-dimensional

429
00:18:27,000 --> 00:18:29,000
tree,

430
00:18:29,000 --> 00:18:31,000
so we need

431
00:18:31,000 --> 00:18:33,000
two-dimensional bits

432
00:18:33,000 --> 00:18:35,000
to describe it.

433
00:18:35,000 --> 00:18:37,000
This is a big tree.

434
00:18:37,000 --> 00:18:39,000
Can we choose

435
00:18:39,000 --> 00:18:41,000
these w

436
00:18:41,000 --> 00:18:43,000
roots,

437
00:18:43,000 --> 00:18:45,000
so that

438
00:18:45,000 --> 00:18:47,000
we can use

439
00:18:47,000 --> 00:18:49,000
a shorter

440
00:18:49,000 --> 00:18:51,000
symbol to

441
00:18:51,000 --> 00:18:53,000
describe it?

442
00:18:53,000 --> 00:18:55,000
In fact,

443
00:18:55,000 --> 00:18:57,000
there is.

444
00:18:57,000 --> 00:18:59,000
This way is to

445
00:18:59,000 --> 00:19:01,000
turn these w into

446
00:19:01,000 --> 00:19:03,000
one-half.

447
00:19:03,000 --> 00:19:05,000
When we describe

448
00:19:05,000 --> 00:19:07,000
a tree,

449
00:19:07,000 --> 00:19:09,000
we use

450
00:19:09,000 --> 00:19:11,000
its

451
00:19:11,000 --> 00:19:13,000
prefix code

452
00:19:13,000 --> 00:19:15,000
to describe it.

453
00:19:15,000 --> 00:19:17,000
For example,

454
00:19:17,000 --> 00:19:19,000
this shape

455
00:19:19,000 --> 00:19:21,000
is 11000.

456
00:19:21,000 --> 00:19:23,000
Its length

457
00:19:23,000 --> 00:19:25,000
is 5.

458
00:19:25,000 --> 00:19:27,000
We don't need

459
00:19:27,000 --> 00:19:29,000
so many

460
00:19:29,000 --> 00:19:31,000
bits

461
00:19:31,000 --> 00:19:33,000
to describe it.

462
00:19:33,000 --> 00:19:35,000
So,

463
00:19:35,000 --> 00:19:37,000
when we put these things

464
00:19:37,000 --> 00:19:39,000
together,

465
00:19:39,000 --> 00:19:41,000
pw

466
00:19:41,000 --> 00:19:43,000
is about

467
00:19:43,000 --> 00:19:45,000
this formula.

468
00:19:45,000 --> 00:19:47,000
This formula can

469
00:19:47,000 --> 00:19:49,000
describe so many

470
00:19:49,000 --> 00:19:51,000
trees in a classic way

471
00:19:51,000 --> 00:19:53,000
to give it a reasonable weight.

472
00:19:53,000 --> 00:19:55,000
If we look at

473
00:19:55,000 --> 00:19:57,000
this formula again,

474
00:19:57,000 --> 00:19:59,000
we will find that

475
00:19:59,000 --> 00:20:01,000
after we do this,

476
00:20:01,000 --> 00:20:03,000
the weight of

477
00:20:03,000 --> 00:20:05,000
these different models

478
00:20:05,000 --> 00:20:07,000
is actually

479
00:20:07,000 --> 00:20:09,000
the same.

480
00:20:09,000 --> 00:20:11,000
For example,

481
00:20:11,000 --> 00:20:13,000
the bigger the tree,

482
00:20:13,000 --> 00:20:15,000
the smaller the weight.

483
00:20:15,000 --> 00:20:17,000
In short,

484
00:20:17,000 --> 00:20:19,000
we are using

485
00:20:19,000 --> 00:20:21,000
a common

486
00:20:21,000 --> 00:20:23,000
physical or

487
00:20:23,000 --> 00:20:25,000
scientific principle,

488
00:20:25,000 --> 00:20:27,000
Occam's razor.

489
00:20:27,000 --> 00:20:29,000
The simpler the

490
00:20:29,000 --> 00:20:31,000
explanation,

491
00:20:31,000 --> 00:20:33,000
the more likely

492
00:20:33,000 --> 00:20:35,000
it is.

493
00:20:35,000 --> 00:20:37,000
After doing this,

494
00:20:37,000 --> 00:20:39,000
we put

495
00:20:39,000 --> 00:20:41,000
all the things together

496
00:20:41,000 --> 00:20:43,000
to do a

497
00:20:43,000 --> 00:20:45,000
theoretical discussion

498
00:20:45,000 --> 00:20:47,000
to summarize

499
00:20:47,000 --> 00:20:49,000
pwz

500
00:20:49,000 --> 00:20:51,000
is a good

501
00:20:51,000 --> 00:20:53,000
compression.

502
00:20:53,000 --> 00:20:55,000
If n is large,

503
00:20:55,000 --> 00:20:57,000
it basically means

504
00:20:57,000 --> 00:20:59,000
that we already know

505
00:20:59,000 --> 00:21:01,000
whether it is a

506
00:21:01,000 --> 00:21:03,000
human shape,

507
00:21:03,000 --> 00:21:05,000
walking,

508
00:21:05,000 --> 00:21:07,000
or eating.

509
00:21:07,000 --> 00:21:09,000
For example,

510
00:21:09,000 --> 00:21:11,000
if n is large enough,

511
00:21:11,000 --> 00:21:13,000
we can always

512
00:21:13,000 --> 00:21:15,000
chunk it to the

513
00:21:15,000 --> 00:21:17,000
original chunk.

514
00:21:17,000 --> 00:21:19,000
There is a detail

515
00:21:19,000 --> 00:21:21,000
here.

516
00:21:21,000 --> 00:21:23,000
Many textbooks

517
00:21:23,000 --> 00:21:25,000
say that

518
00:21:25,000 --> 00:21:27,000
pwz

519
00:21:27,000 --> 00:21:29,000
is an optimal

520
00:21:29,000 --> 00:21:31,000
compression.

521
00:21:31,000 --> 00:21:33,000
The compression length

522
00:21:33,000 --> 00:21:35,000
minus the length

523
00:21:35,000 --> 00:21:37,000
divided by n

524
00:21:37,000 --> 00:21:39,000
is equal to

525
00:21:39,000 --> 00:21:41,000
1 divided by log n.

526
00:21:41,000 --> 00:21:43,000
They say

527
00:21:43,000 --> 00:21:45,000
every symbol

528
00:21:45,000 --> 00:21:47,000
has an error of 0.

529
00:21:47,000 --> 00:21:49,000
However,

530
00:21:49,000 --> 00:21:51,000
pwz is not optimal.

531
00:21:51,000 --> 00:21:53,000
Strictly speaking,

532
00:21:53,000 --> 00:21:55,000
it is not optimal

533
00:21:55,000 --> 00:21:57,000
because the error

534
00:21:57,000 --> 00:21:59,000
is not the fastest.

535
00:21:59,000 --> 00:22:01,000
pwz

536
00:22:01,000 --> 00:22:03,000
jumps over

537
00:22:03,000 --> 00:22:05,000
a lot of things.

538
00:22:05,000 --> 00:22:07,000
For example,

539
00:22:07,000 --> 00:22:09,000
when there are many explanations,

540
00:22:09,000 --> 00:22:11,000
pwz only jumps over

541
00:22:11,000 --> 00:22:13,000
an explanation

542
00:22:13,000 --> 00:22:15,000
that is not

543
00:22:15,000 --> 00:22:17,000
easy to understand.

544
00:22:17,000 --> 00:22:19,000
However,

545
00:22:19,000 --> 00:22:21,000
if we do this,

546
00:22:21,000 --> 00:22:23,000
we will find that

547
00:22:23,000 --> 00:22:25,000
pwz has an error of

548
00:22:25,000 --> 00:22:27,000
log n divided by n.

549
00:22:27,000 --> 00:22:29,000
However,

550
00:22:29,000 --> 00:22:31,000
pwz is faster

551
00:22:31,000 --> 00:22:33,000
than pwz.

552
00:22:33,000 --> 00:22:35,000
Here is

553
00:22:35,000 --> 00:22:37,000
an example of

554
00:22:37,000 --> 00:22:39,000
what the original

555
00:22:39,000 --> 00:22:41,000
source tree is.

556
00:22:41,000 --> 00:22:43,000
pwz

557
00:22:43,000 --> 00:22:45,000
is optimal,

558
00:22:45,000 --> 00:22:47,000
but strictly speaking,

559
00:22:47,000 --> 00:22:49,000
it is not optimal

560
00:22:49,000 --> 00:22:51,000
because the speed of

561
00:22:51,000 --> 00:22:53,000
pwz is not fast enough.

562
00:22:53,000 --> 00:22:55,000
In conclusion,

563
00:22:55,000 --> 00:22:57,000
we can discuss

564
00:22:57,000 --> 00:22:59,000
from a theoretical perspective

565
00:22:59,000 --> 00:23:01,000
that the speed of

566
00:23:01,000 --> 00:23:03,000
pwz has

567
00:23:03,000 --> 00:23:05,000
a limit.

568
00:23:05,000 --> 00:23:07,000
This limit is given

569
00:23:07,000 --> 00:23:09,000
by Riesenbaum.

570
00:23:09,000 --> 00:23:11,000
Riesenbaum said

571
00:23:11,000 --> 00:23:13,000
the compressed length

572
00:23:13,000 --> 00:23:15,000
minus the real length

573
00:23:15,000 --> 00:23:17,000
is always greater than

574
00:23:17,000 --> 00:23:19,000
k log n.

575
00:23:19,000 --> 00:23:21,000
So,

576
00:23:21,000 --> 00:23:23,000
let's go back

577
00:23:23,000 --> 00:23:25,000
to the

578
00:23:25,000 --> 00:23:27,000
asymptotic rate of

579
00:23:27,000 --> 00:23:29,000
ctw.

580
00:23:29,000 --> 00:23:31,000
In fact, ctw is

581
00:23:31,000 --> 00:23:33,000
the fastest speed in

582
00:23:33,000 --> 00:23:35,000
theory,

583
00:23:35,000 --> 00:23:37,000
which is log n divided by

584
00:23:37,000 --> 00:23:39,000
n.

585
00:23:39,000 --> 00:23:41,000
Suppose

586
00:23:41,000 --> 00:23:43,000
k is

587
00:23:43,000 --> 00:23:45,000
the freedom

588
00:23:45,000 --> 00:23:47,000
of the original

589
00:23:47,000 --> 00:23:49,000
signal source.

590
00:23:49,000 --> 00:23:51,000
The more complex

591
00:23:51,000 --> 00:23:53,000
the model is,

592
00:23:53,000 --> 00:23:55,000
the greater the error

593
00:23:55,000 --> 00:23:57,000
will be.

594
00:23:57,000 --> 00:23:59,000
Even if we use

595
00:23:59,000 --> 00:24:01,000
the strongest learning algorithm,

596
00:24:01,000 --> 00:24:03,000
the more complex

597
00:24:03,000 --> 00:24:05,000
the model is,

598
00:24:05,000 --> 00:24:07,000
the greater the error

599
00:24:07,000 --> 00:24:09,000
will be.

600
00:24:09,000 --> 00:24:11,000
So,

601
00:24:11,000 --> 00:24:13,000
in general,

602
00:24:13,000 --> 00:24:15,000
how to compress

603
00:24:15,000 --> 00:24:17,000
from better

604
00:24:17,000 --> 00:24:19,000
intelligence to better?

605
00:24:19,000 --> 00:24:21,000
This is the complexity itself.

606
00:24:21,000 --> 00:24:23,000
We know that

607
00:24:23,000 --> 00:24:25,000
traditionally,

608
00:24:25,000 --> 00:24:27,000
it is solved by

609
00:24:27,000 --> 00:24:29,000
arithmetic coding.

610
00:24:29,000 --> 00:24:31,000
In fact,

611
00:24:31,000 --> 00:24:33,000
there is a bigger problem.

612
00:24:33,000 --> 00:24:35,000
This is

613
00:24:35,000 --> 00:24:37,000
the price of learning.

614
00:24:37,000 --> 00:24:39,000
This is

615
00:24:39,000 --> 00:24:41,000
actually the biggest problem

616
00:24:41,000 --> 00:24:43,000
in practice.

617
00:24:43,000 --> 00:24:45,000
Because this problem is

618
00:24:45,000 --> 00:24:47,000
proportional to the length of the data.

619
00:24:47,000 --> 00:24:49,000
We can only compress it to the length of log n.

620
00:24:49,000 --> 00:24:51,000
And it is not only

621
00:24:51,000 --> 00:24:53,000
proportional to log n,

622
00:24:53,000 --> 00:24:55,000
but also directly

623
00:24:55,000 --> 00:24:57,000
proportional to the

624
00:24:57,000 --> 00:24:59,000
freedom of the problem itself.

625
00:24:59,000 --> 00:25:01,000
The more complex the problem is,

626
00:25:01,000 --> 00:25:03,000
the higher the price

627
00:25:03,000 --> 00:25:05,000
of learning the problem.

628
00:25:05,000 --> 00:25:07,000
The rest is

629
00:25:07,000 --> 00:25:09,000
what our

630
00:25:09,000 --> 00:25:11,000
researchers

631
00:25:11,000 --> 00:25:13,000
want to reduce to zero.

632
00:25:13,000 --> 00:25:15,000
We want to come up with

633
00:25:15,000 --> 00:25:17,000
a good algorithm

634
00:25:17,000 --> 00:25:19,000
to use

635
00:25:19,000 --> 00:25:21,000
a bad

636
00:25:21,000 --> 00:25:23,000
estimator.

637
00:25:23,000 --> 00:25:25,000
For example,

638
00:25:25,000 --> 00:25:27,000
we use a bad estimator

639
00:25:27,000 --> 00:25:29,000
to compare with

640
00:25:29,000 --> 00:25:31,000
the most efficient estimator.

641
00:25:31,000 --> 00:25:33,000
We should

642
00:25:33,000 --> 00:25:35,000
find a way to use this to zero.

643
00:25:35,000 --> 00:25:37,000
In summary,

644
00:25:37,000 --> 00:25:39,000
compressing is

645
00:25:39,000 --> 00:25:41,000
about three-thirds.

646
00:25:41,000 --> 00:25:43,000
We want to turn the last part

647
00:25:43,000 --> 00:25:45,000
to zero.

648
00:25:45,000 --> 00:25:47,000
We can see from the above

649
00:25:47,000 --> 00:25:49,000
that CT context tree weighting

650
00:25:49,000 --> 00:25:51,000
is close to

651
00:25:51,000 --> 00:25:53,000
the fastest speed

652
00:25:53,000 --> 00:25:55,000
in theory.

653
00:25:55,000 --> 00:25:57,000
It is a very efficient

654
00:25:57,000 --> 00:25:59,000
estimator.

655
00:25:59,000 --> 00:26:01,000
This is

656
00:26:01,000 --> 00:26:03,000
the part of the theory.

657
00:26:03,000 --> 00:26:05,000
The theory sounds

658
00:26:05,000 --> 00:26:07,000
perfect and amazing.

659
00:26:07,000 --> 00:26:09,000
Does this theory work?

660
00:26:09,000 --> 00:26:11,000
Here is

661
00:26:11,000 --> 00:26:13,000
an example.

662
00:26:13,000 --> 00:26:15,000
We want to compress

663
00:26:15,000 --> 00:26:17,000
this article.

664
00:26:17,000 --> 00:26:19,000
This article is

665
00:26:19,000 --> 00:26:21,000
Lincoln's

666
00:26:21,000 --> 00:26:23,000
Gettysburg Address,

667
00:26:23,000 --> 00:26:25,000
in English,

668
00:26:25,000 --> 00:26:27,000
7 years ago.

669
00:26:27,000 --> 00:26:29,000
This article

670
00:26:29,000 --> 00:26:31,000
has a capacity

671
00:26:31,000 --> 00:26:33,000
of about 1K.

672
00:26:33,000 --> 00:26:35,000
If we compress it

673
00:26:35,000 --> 00:26:37,000
with common

674
00:26:37,000 --> 00:26:39,000
compression methods,

675
00:26:39,000 --> 00:26:41,000
it can be compressed

676
00:26:41,000 --> 00:26:43,000
to this size.

677
00:26:43,000 --> 00:26:45,000
However, if we use CTW,

678
00:26:45,000 --> 00:26:47,000
it is more efficient in theory.

679
00:26:47,000 --> 00:26:49,000
If we use a better

680
00:26:49,000 --> 00:26:51,000
learning algorithm,

681
00:26:51,000 --> 00:26:53,000
we will find that

682
00:26:53,000 --> 00:26:55,000
it compresses less.

683
00:26:55,000 --> 00:26:57,000
This means that

684
00:26:57,000 --> 00:26:59,000
the better our

685
00:26:59,000 --> 00:27:01,000
prediction ability is,

686
00:27:01,000 --> 00:27:03,000
the less we can compress

687
00:27:03,000 --> 00:27:05,000
in total.

688
00:27:05,000 --> 00:27:07,000
This theory

689
00:27:07,000 --> 00:27:09,000
is correct.

690
00:27:09,000 --> 00:27:11,000
We have

691
00:27:11,000 --> 00:27:13,000
proved that

692
00:27:13,000 --> 00:27:15,000
we can get better

693
00:27:15,000 --> 00:27:17,000
compression from

694
00:27:17,000 --> 00:27:19,000
a better learning algorithm.

695
00:27:19,000 --> 00:27:21,000
What is more

696
00:27:21,000 --> 00:27:23,000
interesting

697
00:27:23,000 --> 00:27:25,000
is how to

698
00:27:25,000 --> 00:27:27,000
get better

699
00:27:27,000 --> 00:27:29,000
compression.

700
00:27:29,000 --> 00:27:31,000
Let's say

701
00:27:31,000 --> 00:27:33,000
every computer has

702
00:27:33,000 --> 00:27:35,000
WinZip.

703
00:27:35,000 --> 00:27:37,000
We can use WinZip.exe

704
00:27:37,000 --> 00:27:39,000
to do machine learning.

705
00:27:39,000 --> 00:27:41,000
Or we have a better

706
00:27:41,000 --> 00:27:43,000
compression method,

707
00:27:43,000 --> 00:27:45,000
TZ.

708
00:27:45,000 --> 00:27:47,000
We can use TZ

709
00:27:47,000 --> 00:27:49,000
to do better machine learning.

710
00:27:49,000 --> 00:27:51,000
I want to prove

711
00:27:51,000 --> 00:27:53,000
this thing

712
00:27:53,000 --> 00:27:55,000
from the point of view

713
00:27:55,000 --> 00:27:57,000
that

714
00:27:57,000 --> 00:27:59,000
we just said

715
00:27:59,000 --> 00:28:01,000
that wisdom is unpredictable.

716
00:28:01,000 --> 00:28:03,000
If we change the definition of

717
00:28:03,000 --> 00:28:05,000
wisdom to

718
00:28:05,000 --> 00:28:07,000
pattern,

719
00:28:07,000 --> 00:28:09,000
or to be more specific,

720
00:28:09,000 --> 00:28:11,000
if we treat wisdom

721
00:28:11,000 --> 00:28:13,000
as a non-supervised

722
00:28:13,000 --> 00:28:15,000
learning,

723
00:28:15,000 --> 00:28:17,000
unsupervised learning,

724
00:28:17,000 --> 00:28:19,000
can we prove

725
00:28:19,000 --> 00:28:21,000
that a better compression

726
00:28:21,000 --> 00:28:23,000
can do better

727
00:28:23,000 --> 00:28:25,000
unsupervised learning?

728
00:28:25,000 --> 00:28:27,000
I guess

729
00:28:27,000 --> 00:28:29,000
if we can do

730
00:28:29,000 --> 00:28:31,000
unsupervised learning,

731
00:28:31,000 --> 00:28:33,000
we can do a lot of

732
00:28:33,000 --> 00:28:35,000
smart things,

733
00:28:35,000 --> 00:28:37,000
like condensed

734
00:28:37,000 --> 00:28:39,000
method research,

735
00:28:39,000 --> 00:28:41,000
astronomy research,

736
00:28:41,000 --> 00:28:43,000
or more.

737
00:28:43,000 --> 00:28:45,000
To be more specific,

738
00:28:45,000 --> 00:28:47,000
when we do unsupervised learning,

739
00:28:47,000 --> 00:28:49,000
we want to answer

740
00:28:49,000 --> 00:28:51,000
if there are

741
00:28:51,000 --> 00:28:53,000
A, B, C,

742
00:28:53,000 --> 00:28:55,000
is A closer to B?

743
00:28:55,000 --> 00:28:57,000
Or is A closer to C?

744
00:28:57,000 --> 00:28:59,000
Or is B closer to C?

745
00:28:59,000 --> 00:29:01,000
So,

746
00:29:01,000 --> 00:29:03,000
unsupervised learning

747
00:29:03,000 --> 00:29:05,000
is about

748
00:29:05,000 --> 00:29:07,000
measuring

749
00:29:07,000 --> 00:29:09,000
how close

750
00:29:09,000 --> 00:29:11,000
or how different

751
00:29:11,000 --> 00:29:13,000
two things are.

752
00:29:13,000 --> 00:29:15,000
This is a

753
00:29:15,000 --> 00:29:17,000
simple

754
00:29:17,000 --> 00:29:19,000
structure to

755
00:29:19,000 --> 00:29:21,000
calculate

756
00:29:21,000 --> 00:29:23,000
the distance

757
00:29:23,000 --> 00:29:25,000
of two random things

758
00:29:25,000 --> 00:29:27,000
using

759
00:29:27,000 --> 00:29:29,000
this

760
00:29:29,000 --> 00:29:31,000
unsupervised learning

761
00:29:31,000 --> 00:29:33,000
algorithm.

762
00:29:33,000 --> 00:29:35,000
Let's say

763
00:29:35,000 --> 00:29:37,000
anything can

764
00:29:37,000 --> 00:29:39,000
become 010101.

765
00:29:39,000 --> 00:29:41,000
Let's say

766
00:29:41,000 --> 00:29:43,000
x is a

767
00:29:43,000 --> 00:29:45,000
0101 string,

768
00:29:45,000 --> 00:29:47,000
and kx is

769
00:29:47,000 --> 00:29:49,000
the length

770
00:29:49,000 --> 00:29:51,000
after the compression.

771
00:29:51,000 --> 00:29:53,000
Let's say

772
00:29:53,000 --> 00:29:55,000
we put x and y

773
00:29:55,000 --> 00:29:57,000
together

774
00:29:57,000 --> 00:29:59,000
to get this length.

775
00:29:59,000 --> 00:30:01,000
We know that

776
00:30:01,000 --> 00:30:03,000
when the compression

777
00:30:03,000 --> 00:30:05,000
is good,

778
00:30:05,000 --> 00:30:07,000
kxy is

779
00:30:07,000 --> 00:30:09,000
roughly equal to kyx.

780
00:30:09,000 --> 00:30:11,000
This is

781
00:30:11,000 --> 00:30:13,000
the notation

782
00:30:13,000 --> 00:30:15,000
for conditional probability.

783
00:30:15,000 --> 00:30:17,000
Let's say we have

784
00:30:17,000 --> 00:30:19,000
given x,

785
00:30:19,000 --> 00:30:21,000
how much

786
00:30:21,000 --> 00:30:23,000
extra length

787
00:30:23,000 --> 00:30:25,000
do we need to

788
00:30:25,000 --> 00:30:27,000
reconstruct y?

789
00:30:27,000 --> 00:30:29,000
The definition

790
00:30:29,000 --> 00:30:31,000
is kxy-kx.

791
00:30:31,000 --> 00:30:33,000
In other words,

792
00:30:33,000 --> 00:30:35,000
ky given x

793
00:30:35,000 --> 00:30:37,000
is the

794
00:30:37,000 --> 00:30:39,000
information

795
00:30:39,000 --> 00:30:41,000
in y but not in x.

796
00:30:41,000 --> 00:30:43,000
With this

797
00:30:43,000 --> 00:30:45,000
conditional definition,

798
00:30:45,000 --> 00:30:47,000
we know that

799
00:30:47,000 --> 00:30:49,000
for a good

800
00:30:49,000 --> 00:30:51,000
compression,

801
00:30:51,000 --> 00:30:53,000
we only need

802
00:30:53,000 --> 00:30:55,000
0 length to

803
00:30:55,000 --> 00:30:57,000
compress x.

804
00:30:57,000 --> 00:30:59,000
This

805
00:30:59,000 --> 00:31:01,000
ky given x

806
00:31:01,000 --> 00:31:03,000
is the total length.

807
00:31:03,000 --> 00:31:05,000
If we want to ask

808
00:31:05,000 --> 00:31:07,000
per unit symbol

809
00:31:07,000 --> 00:31:09,000
or per bit

810
00:31:09,000 --> 00:31:11,000
information in y

811
00:31:11,000 --> 00:31:13,000
but not in x,

812
00:31:13,000 --> 00:31:15,000
we can just

813
00:31:15,000 --> 00:31:17,000
multiply ky given x

814
00:31:17,000 --> 00:31:19,000
by y.

815
00:31:19,000 --> 00:31:21,000
This is

816
00:31:21,000 --> 00:31:23,000
like

817
00:31:23,000 --> 00:31:25,000
using a smart

818
00:31:25,000 --> 00:31:27,000
program to

819
00:31:27,000 --> 00:31:29,000
measure

820
00:31:29,000 --> 00:31:31,000
the information in y

821
00:31:31,000 --> 00:31:33,000
but not in x.

822
00:31:33,000 --> 00:31:35,000
The information

823
00:31:35,000 --> 00:31:37,000
in x

824
00:31:37,000 --> 00:31:39,000
can be calculated

825
00:31:39,000 --> 00:31:41,000
as how different

826
00:31:41,000 --> 00:31:43,000
the distance between

827
00:31:43,000 --> 00:31:45,000
y and x is.

828
00:31:45,000 --> 00:31:47,000
This is like

829
00:31:47,000 --> 00:31:49,000
the general purpose

830
00:31:49,000 --> 00:31:51,000
of unsupervised learning.

831
00:31:51,000 --> 00:31:53,000
Or the distance

832
00:31:53,000 --> 00:31:55,000
between two things.

833
00:31:55,000 --> 00:31:57,000
But this

834
00:31:57,000 --> 00:31:59,000
has reached

835
00:31:59,000 --> 00:32:01,000
our intuition.

836
00:32:01,000 --> 00:32:03,000
But there are some drawbacks.

837
00:32:03,000 --> 00:32:05,000
It's not symmetric.

838
00:32:05,000 --> 00:32:07,000
If we

839
00:32:07,000 --> 00:32:09,000
make some

840
00:32:09,000 --> 00:32:11,000
changes

841
00:32:11,000 --> 00:32:13,000
to max and max,

842
00:32:13,000 --> 00:32:15,000
we'll find that

843
00:32:15,000 --> 00:32:17,000
it's symmetric.

844
00:32:17,000 --> 00:32:19,000
And when

845
00:32:19,000 --> 00:32:21,000
y is greater than x,

846
00:32:21,000 --> 00:32:23,000
it will come here.

847
00:32:23,000 --> 00:32:25,000
Or if x is greater than y,

848
00:32:25,000 --> 00:32:27,000
it will come here.

849
00:32:27,000 --> 00:32:29,000
So if we define

850
00:32:29,000 --> 00:32:31,000
this as

851
00:32:31,000 --> 00:32:33,000
the distance between

852
00:32:33,000 --> 00:32:35,000
two things,

853
00:32:35,000 --> 00:32:37,000
it's symmetric.

854
00:32:37,000 --> 00:32:39,000
If we define it like this,

855
00:32:39,000 --> 00:32:41,000
we'll find that

856
00:32:41,000 --> 00:32:43,000
the length is too

857
00:32:43,000 --> 00:32:45,000
short.

858
00:32:45,000 --> 00:32:47,000
So this is like

859
00:32:47,000 --> 00:32:49,000
giving a compressed

860
00:32:49,000 --> 00:32:51,000
program, winzip.inxe,

861
00:32:51,000 --> 00:32:53,000
to calculate the distance

862
00:32:53,000 --> 00:32:55,000
between two things.

863
00:32:55,000 --> 00:32:57,000
So after we

864
00:32:57,000 --> 00:32:59,000
push it like this,

865
00:32:59,000 --> 00:33:01,000
we'll find that

866
00:33:01,000 --> 00:33:03,000
this method can give us

867
00:33:03,000 --> 00:33:05,000
a compressed program.

868
00:33:05,000 --> 00:33:07,000
We don't know what it does.

869
00:33:07,000 --> 00:33:09,000
But if it's good enough,

870
00:33:09,000 --> 00:33:11,000
it can help us

871
00:33:11,000 --> 00:33:13,000
figure out the distance

872
00:33:13,000 --> 00:33:15,000
between two things.

873
00:33:15,000 --> 00:33:17,000
So this idea

874
00:33:17,000 --> 00:33:19,000
is good in theory,

875
00:33:19,000 --> 00:33:21,000
but in practice,

876
00:33:21,000 --> 00:33:23,000
is it useful?

877
00:33:23,000 --> 00:33:25,000
Today, I'll give you

878
00:33:25,000 --> 00:33:27,000
two examples

879
00:33:27,000 --> 00:33:29,000
to show that

880
00:33:29,000 --> 00:33:31,000
it can be useful.

881
00:33:31,000 --> 00:33:33,000
In the first example,

882
00:33:33,000 --> 00:33:35,000
we want to solve

883
00:33:35,000 --> 00:33:37,000
biological problems.

884
00:33:37,000 --> 00:33:39,000
To be precise,

885
00:33:39,000 --> 00:33:41,000
we want to solve

886
00:33:41,000 --> 00:33:43,000
a problem

887
00:33:43,000 --> 00:33:45,000
among mammals.

888
00:33:45,000 --> 00:33:47,000
It's a problem

889
00:33:47,000 --> 00:33:49,000
they care about.

890
00:33:49,000 --> 00:33:51,000
This debate

891
00:33:51,000 --> 00:33:53,000
is a common

892
00:33:53,000 --> 00:33:55,000
debate in

893
00:33:55,000 --> 00:33:57,000
biology

894
00:33:57,000 --> 00:33:59,000
in the early 2000s.

895
00:33:59,000 --> 00:34:01,000
They debate

896
00:34:01,000 --> 00:34:03,000
whether humans

897
00:34:03,000 --> 00:34:05,000
are closer to pigs

898
00:34:05,000 --> 00:34:07,000
or mice.

899
00:34:07,000 --> 00:34:09,000
Some people

900
00:34:09,000 --> 00:34:11,000
say that

901
00:34:11,000 --> 00:34:13,000
humans are

902
00:34:13,000 --> 00:34:15,000
closer to

903
00:34:15,000 --> 00:34:17,000
pigs or mice.

904
00:34:17,000 --> 00:34:19,000
But if we

905
00:34:19,000 --> 00:34:21,000
look at other data,

906
00:34:21,000 --> 00:34:23,000
we'll find that

907
00:34:23,000 --> 00:34:25,000
humans are closer

908
00:34:25,000 --> 00:34:27,000
to mice.

909
00:34:27,000 --> 00:34:29,000
Can we use

910
00:34:29,000 --> 00:34:31,000
a compressed program to

911
00:34:31,000 --> 00:34:33,000
answer this question?

912
00:34:33,000 --> 00:34:35,000
To put it simply,

913
00:34:35,000 --> 00:34:37,000
if a monkey

914
00:34:37,000 --> 00:34:39,000
has this DNA,

915
00:34:39,000 --> 00:34:41,000
GTTAT,

916
00:34:41,000 --> 00:34:43,000
and a pig

917
00:34:43,000 --> 00:34:45,000
has this DNA,

918
00:34:45,000 --> 00:34:47,000
and we run

919
00:34:47,000 --> 00:34:49,000
a compressed program

920
00:34:49,000 --> 00:34:51,000
to calculate

921
00:34:51,000 --> 00:34:53,000
the information

922
00:34:53,000 --> 00:34:55,000
between these two

923
00:34:55,000 --> 00:34:57,000
DNAs,

924
00:34:57,000 --> 00:34:59,000
can we answer

925
00:34:59,000 --> 00:35:01,000
this question?

926
00:35:01,000 --> 00:35:03,000
We do this

927
00:35:03,000 --> 00:35:05,000
because it's

928
00:35:05,000 --> 00:35:07,000
quite different from

929
00:35:07,000 --> 00:35:09,000
traditional biology.

930
00:35:09,000 --> 00:35:11,000
Traditional biology

931
00:35:11,000 --> 00:35:13,000
uses a lot of

932
00:35:13,000 --> 00:35:15,000
biological information.

933
00:35:15,000 --> 00:35:17,000
For example,

934
00:35:17,000 --> 00:35:19,000
traditionally,

935
00:35:19,000 --> 00:35:21,000
we would

936
00:35:21,000 --> 00:35:23,000
do an alignment

937
00:35:23,000 --> 00:35:25,000
to these primitive data.

938
00:35:25,000 --> 00:35:27,000
This part

939
00:35:27,000 --> 00:35:29,000
should be compared

940
00:35:29,000 --> 00:35:31,000
with GTTAT.

941
00:35:31,000 --> 00:35:33,000
For example,

942
00:35:33,000 --> 00:35:35,000
three RNAs

943
00:35:35,000 --> 00:35:37,000
can form

944
00:35:37,000 --> 00:35:39,000
a condom.

945
00:35:39,000 --> 00:35:41,000
The third one

946
00:35:41,000 --> 00:35:43,000
in the condom

947
00:35:43,000 --> 00:35:45,000
is more likely to

948
00:35:45,000 --> 00:35:47,000
mutate,

949
00:35:47,000 --> 00:35:49,000
so we ignore it.

950
00:35:49,000 --> 00:35:51,000
It's like doing

951
00:35:51,000 --> 00:35:53,000
what we call

952
00:35:53,000 --> 00:35:55,000
feature engineering

953
00:35:55,000 --> 00:35:57,000
to get a result.

954
00:35:57,000 --> 00:35:59,000
Can we

955
00:35:59,000 --> 00:36:01,000
do feature engineering

956
00:36:01,000 --> 00:36:03,000
to compress

957
00:36:03,000 --> 00:36:05,000
raw data

958
00:36:05,000 --> 00:36:07,000
and get

959
00:36:07,000 --> 00:36:09,000
a pretty

960
00:36:09,000 --> 00:36:11,000
correct result?

961
00:36:11,000 --> 00:36:13,000
It looks like

962
00:36:13,000 --> 00:36:15,000
we can.

963
00:36:15,000 --> 00:36:17,000
The picture on the left

964
00:36:17,000 --> 00:36:19,000
is a winzip

965
00:36:19,000 --> 00:36:21,000
or gzip program.

966
00:36:21,000 --> 00:36:23,000
We get

967
00:36:23,000 --> 00:36:25,000
the classification of

968
00:36:25,000 --> 00:36:27,000
animal blood

969
00:36:27,000 --> 00:36:29,000
and DNA.

970
00:36:29,000 --> 00:36:31,000
We can see

971
00:36:31,000 --> 00:36:33,000
that it's

972
00:36:33,000 --> 00:36:35,000
pretty good.

973
00:36:35,000 --> 00:36:37,000
Horses and donkeys

974
00:36:37,000 --> 00:36:39,000
are pretty similar.

975
00:36:39,000 --> 00:36:41,000
Mice are the same.

976
00:36:41,000 --> 00:36:43,000
Humans and stars are the same.

977
00:36:43,000 --> 00:36:45,000
But it still has

978
00:36:45,000 --> 00:36:47,000
some problems.

979
00:36:47,000 --> 00:36:49,000
For example,

980
00:36:49,000 --> 00:36:51,000
this flying monkey is

981
00:36:51,000 --> 00:36:53,000
a monkey,

982
00:36:53,000 --> 00:36:55,000
so the monkey should be here.

983
00:36:55,000 --> 00:36:57,000
It also says

984
00:36:57,000 --> 00:36:59,000
that humans

985
00:36:59,000 --> 00:37:01,000
are closer to

986
00:37:01,000 --> 00:37:03,000
pigs and

987
00:37:03,000 --> 00:37:05,000
mice.

988
00:37:05,000 --> 00:37:07,000
This is gzip.

989
00:37:07,000 --> 00:37:09,000
We know

990
00:37:09,000 --> 00:37:11,000
that gzip is

991
00:37:11,000 --> 00:37:13,000
doing Lampel's Zip.

992
00:37:13,000 --> 00:37:15,000
When it predicts

993
00:37:15,000 --> 00:37:17,000
the next bit,

994
00:37:17,000 --> 00:37:19,000
the accuracy is not as high as

995
00:37:19,000 --> 00:37:21,000
CTW.

996
00:37:21,000 --> 00:37:23,000
If we use a better

997
00:37:23,000 --> 00:37:25,000
prediction of the future,

998
00:37:25,000 --> 00:37:27,000
we will find

999
00:37:27,000 --> 00:37:29,000
that the results

1000
00:37:29,000 --> 00:37:31,000
are better.

1001
00:37:31,000 --> 00:37:33,000
It has

1002
00:37:33,000 --> 00:37:35,000
categorized the animals

1003
00:37:35,000 --> 00:37:37,000
and said that humans are

1004
00:37:37,000 --> 00:37:39,000
closer to pigs.

1005
00:37:39,000 --> 00:37:41,000
This result

1006
00:37:41,000 --> 00:37:43,000
matches

1007
00:37:43,000 --> 00:37:45,000
traditional biology.

1008
00:37:45,000 --> 00:37:47,000
The results are

1009
00:37:47,000 --> 00:37:49,000
pretty consistent.

1010
00:37:49,000 --> 00:37:51,000
This is

1011
00:37:51,000 --> 00:37:53,000
the first example.

1012
00:37:53,000 --> 00:37:55,000
We can use

1013
00:37:55,000 --> 00:37:57,000
simple compression

1014
00:37:57,000 --> 00:37:59,000
to get results

1015
00:37:59,000 --> 00:38:01,000
that are more

1016
00:38:01,000 --> 00:38:03,000
like traditional biology.

1017
00:38:03,000 --> 00:38:05,000
It makes sense.

1018
00:38:05,000 --> 00:38:07,000
We can also

1019
00:38:07,000 --> 00:38:09,000
do

1020
00:38:09,000 --> 00:38:11,000
different types of classification.

1021
00:38:11,000 --> 00:38:13,000
We can also

1022
00:38:13,000 --> 00:38:15,000
do some research

1023
00:38:15,000 --> 00:38:17,000
on SARS

1024
00:38:17,000 --> 00:38:19,000
virus DNA.

1025
00:38:19,000 --> 00:38:21,000
Many people

1026
00:38:21,000 --> 00:38:23,000
know that

1027
00:38:23,000 --> 00:38:25,000
SARS virus

1028
00:38:25,000 --> 00:38:27,000
was a big disease

1029
00:38:27,000 --> 00:38:29,000
10 years ago.

1030
00:38:29,000 --> 00:38:31,000
The mortality rate

1031
00:38:31,000 --> 00:38:33,000
is very high.

1032
00:38:33,000 --> 00:38:35,000
We still

1033
00:38:35,000 --> 00:38:37,000
don't have a vaccine

1034
00:38:37,000 --> 00:38:39,000
in 2019.

1035
00:38:39,000 --> 00:38:41,000
Why do we

1036
00:38:41,000 --> 00:38:43,000
have such a high mortality rate

1037
00:38:43,000 --> 00:38:45,000
and no vaccine?

1038
00:38:45,000 --> 00:38:47,000
Can we try to

1039
00:38:47,000 --> 00:38:49,000
answer this question?

1040
00:38:49,000 --> 00:38:51,000
We use

1041
00:38:51,000 --> 00:38:53,000
compression to answer this question.

1042
00:38:53,000 --> 00:38:55,000
The main concept is

1043
00:38:55,000 --> 00:38:57,000
to compare it with

1044
00:38:57,000 --> 00:38:59,000
other

1045
00:38:59,000 --> 00:39:01,000
family viruses

1046
00:39:01,000 --> 00:39:03,000
and do a classification study.

1047
00:39:03,000 --> 00:39:05,000
We use it

1048
00:39:05,000 --> 00:39:07,000
to do a study

1049
00:39:07,000 --> 00:39:09,000
on the virus of

1050
00:39:09,000 --> 00:39:11,000
colds, pigs, and mice.

1051
00:39:11,000 --> 00:39:13,000
Our study

1052
00:39:13,000 --> 00:39:15,000
has no

1053
00:39:15,000 --> 00:39:17,000
feature engineering

1054
00:39:17,000 --> 00:39:19,000
or

1055
00:39:19,000 --> 00:39:21,000
heuristic.

1056
00:39:21,000 --> 00:39:23,000
We use

1057
00:39:23,000 --> 00:39:25,000
compression.

1058
00:39:25,000 --> 00:39:27,000
Traditionally,

1059
00:39:27,000 --> 00:39:29,000
biologists do

1060
00:39:29,000 --> 00:39:31,000
a lot of

1061
00:39:31,000 --> 00:39:33,000
heuristics.

1062
00:39:33,000 --> 00:39:35,000
For example,

1063
00:39:35,000 --> 00:39:37,000
biologists

1064
00:39:37,000 --> 00:39:39,000
do DNA research.

1065
00:39:39,000 --> 00:39:41,000
They use a database

1066
00:39:41,000 --> 00:39:43,000
to calculate

1067
00:39:43,000 --> 00:39:45,000
the probability of

1068
00:39:45,000 --> 00:39:47,000
A mutating to D amino acid.

1069
00:39:47,000 --> 00:39:49,000
They use

1070
00:39:49,000 --> 00:39:51,000
a table

1071
00:39:51,000 --> 00:39:53,000
to find

1072
00:39:53,000 --> 00:39:55,000
the probability

1073
00:39:55,000 --> 00:39:57,000
of A mutating to D amino acid.

1074
00:39:57,000 --> 00:39:59,000
They use

1075
00:39:59,000 --> 00:40:01,000
the probability of

1076
00:40:01,000 --> 00:40:03,000
A mutating to D amino acid.

1077
00:40:03,000 --> 00:40:05,000
If we

1078
00:40:05,000 --> 00:40:07,000
use

1079
00:40:07,000 --> 00:40:09,000
the compression

1080
00:40:09,000 --> 00:40:11,000
and do the

1081
00:40:11,000 --> 00:40:13,000
heuristic,

1082
00:40:13,000 --> 00:40:15,000
we can see

1083
00:40:15,000 --> 00:40:17,000
that

1084
00:40:17,000 --> 00:40:19,000
phylogeny

1085
00:40:19,000 --> 00:40:21,000
looks like this.

1086
00:40:21,000 --> 00:40:23,000
We can see that

1087
00:40:23,000 --> 00:40:25,000
SARS is

1088
00:40:25,000 --> 00:40:27,000
very different

1089
00:40:27,000 --> 00:40:29,000
from other

1090
00:40:29,000 --> 00:40:31,000
known coronaviruses.

1091
00:40:31,000 --> 00:40:33,000
It is a family.

1092
00:40:33,000 --> 00:40:35,000
Moreover,

1093
00:40:35,000 --> 00:40:37,000
coronaviruses

1094
00:40:37,000 --> 00:40:39,000
have a family

1095
00:40:39,000 --> 00:40:41,000
of mice and cows.

1096
00:40:41,000 --> 00:40:43,000
Group 2 is

1097
00:40:43,000 --> 00:40:45,000
a family of mice and cows.

1098
00:40:45,000 --> 00:40:47,000
Cats and dogs

1099
00:40:47,000 --> 00:40:49,000
are in the same family.

1100
00:40:49,000 --> 00:40:51,000
This is the result

1101
00:40:51,000 --> 00:40:53,000
we get

1102
00:40:53,000 --> 00:40:55,000
from a wide

1103
00:40:55,000 --> 00:40:57,000
compression.

1104
00:40:57,000 --> 00:40:59,000
This result

1105
00:40:59,000 --> 00:41:01,000
matches

1106
00:41:01,000 --> 00:41:03,000
the science

1107
00:41:03,000 --> 00:41:05,000
in this paper.

1108
00:41:05,000 --> 00:41:07,000
The research

1109
00:41:07,000 --> 00:41:09,000
shows that

1110
00:41:09,000 --> 00:41:11,000
coronaviruses

1111
00:41:11,000 --> 00:41:13,000
are divided into

1112
00:41:13,000 --> 00:41:15,000
these groups.

1113
00:41:15,000 --> 00:41:17,000
SARS is

1114
00:41:17,000 --> 00:41:19,000
very unique.

1115
00:41:19,000 --> 00:41:21,000
This explains

1116
00:41:21,000 --> 00:41:23,000
why SARS has

1117
00:41:23,000 --> 00:41:25,000
such a high mortality rate

1118
00:41:25,000 --> 00:41:27,000
and has no vaccine.

1119
00:41:27,000 --> 00:41:29,000
It is very different

1120
00:41:29,000 --> 00:41:31,000
from other viruses.

1121
00:41:31,000 --> 00:41:33,000
To sum up,

1122
00:41:33,000 --> 00:41:35,000
we have

1123
00:41:35,000 --> 00:41:37,000
not only

1124
00:41:37,000 --> 00:41:39,000
compression,

1125
00:41:39,000 --> 00:41:41,000
but also better compression

1126
00:41:41,000 --> 00:41:43,000
to get better intelligence.

1127
00:41:43,000 --> 00:41:45,000
Many people

1128
00:41:45,000 --> 00:41:47,000
have

1129
00:41:47,000 --> 00:41:49,000
applied

1130
00:41:49,000 --> 00:41:51,000
compression

1131
00:41:51,000 --> 00:41:53,000
to

1132
00:41:53,000 --> 00:41:55,000
measure IQ

1133
00:41:55,000 --> 00:41:57,000
and intelligence.

1134
00:41:57,000 --> 00:41:59,000
We can use

1135
00:41:59,000 --> 00:42:01,000
compression to measure IQ.

1136
00:42:01,000 --> 00:42:03,000
If IQ is better,

1137
00:42:03,000 --> 00:42:05,000
intelligence will be better.

1138
00:42:05,000 --> 00:42:07,000
This is like

1139
00:42:07,000 --> 00:42:09,000
a more scientific way

1140
00:42:09,000 --> 00:42:11,000
to measure intelligence

1141
00:42:11,000 --> 00:42:13,000
than the traditional

1142
00:42:13,000 --> 00:42:15,000
IQ test.

1143
00:42:15,000 --> 00:42:17,000
To be more specific,

1144
00:42:17,000 --> 00:42:19,000
we know that

1145
00:42:19,000 --> 00:42:21,000
human brain

1146
00:42:21,000 --> 00:42:23,000
compresses English

1147
00:42:23,000 --> 00:42:25,000
one bit per character.

1148
00:42:25,000 --> 00:42:27,000
This is like

1149
00:42:27,000 --> 00:42:29,000
the goal of artificial intelligence.

1150
00:42:29,000 --> 00:42:31,000
Next,

1151
00:42:31,000 --> 00:42:33,000
the second important message

1152
00:42:33,000 --> 00:42:35,000
is that

1153
00:42:35,000 --> 00:42:37,000
the most basic principle

1154
00:42:37,000 --> 00:42:39,000
in science

1155
00:42:39,000 --> 00:42:41,000
is

1156
00:42:41,000 --> 00:42:43,000
the simpler the explanation,

1157
00:42:43,000 --> 00:42:45,000
the more we should pay attention to it.

1158
00:42:45,000 --> 00:42:47,000
This is a very

1159
00:42:47,000 --> 00:42:49,000
correct philosophy.

1160
00:42:49,000 --> 00:42:51,000
It can be transformed

1161
00:42:51,000 --> 00:42:53,000
into a very quantitative way

1162
00:42:53,000 --> 00:42:55,000
to measure

1163
00:42:55,000 --> 00:42:57,000
these different assumptions.

1164
00:42:57,000 --> 00:42:59,000
It is not only

1165
00:42:59,000 --> 00:43:01,000
helpful to

1166
00:43:01,000 --> 00:43:03,000
natural scientists,

1167
00:43:03,000 --> 00:43:05,000
but also very useful

1168
00:43:05,000 --> 00:43:07,000
in artificial intelligence.

1169
00:43:07,000 --> 00:43:09,000
This is

1170
00:43:09,000 --> 00:43:11,000
the end of

1171
00:43:11,000 --> 00:43:13,000
today's lecture.

1172
00:43:13,000 --> 00:43:15,000
In the end,

1173
00:43:15,000 --> 00:43:17,000
I think

1174
00:43:17,000 --> 00:43:19,000
lecture

1175
00:43:19,000 --> 00:43:21,000
or class

1176
00:43:21,000 --> 00:43:23,000
should be interactive.

1177
00:43:23,000 --> 00:43:25,000
This is a

1178
00:43:25,000 --> 00:43:27,000
very simple quiz.

1179
00:43:27,000 --> 00:43:29,000
For example,

1180
00:43:29,000 --> 00:43:31,000
if we look at

1181
00:43:31,000 --> 00:43:33,000
this compressed format,

1182
00:43:33,000 --> 00:43:35,000
the developer

1183
00:43:35,000 --> 00:43:37,000
is not a

1184
00:43:37,000 --> 00:43:39,000
random person.

1185
00:43:39,000 --> 00:43:41,000
He is a serious person.

1186
00:43:41,000 --> 00:43:43,000
This compressed format

1187
00:43:43,000 --> 00:43:45,000
eventually

1188
00:43:45,000 --> 00:43:47,000
compresses

1189
00:43:47,000 --> 00:43:49,000
the information

1190
00:43:49,000 --> 00:43:51,000
to zero.

1191
00:43:51,000 --> 00:43:53,000
Is this right?

1192
00:43:53,000 --> 00:43:55,000
Is this possible?

1193
00:43:55,000 --> 00:43:57,000
This is a small quiz.

1194
00:43:57,000 --> 00:43:59,000
If you are interested, you can go back and think about it.

1195
00:43:59,000 --> 00:44:01,000
That's it.

1196
00:44:01,000 --> 00:44:03,000
Thank you.

1197
00:44:17,000 --> 00:44:19,000
Thank you,

1198
00:44:19,000 --> 00:44:21,000
Fu Ming.

1199
00:44:21,000 --> 00:44:23,000
Do the

1200
00:44:23,000 --> 00:44:25,000
audience

1201
00:44:25,000 --> 00:44:27,000
have any questions?

1202
00:44:29,000 --> 00:44:31,000
Hello.

1203
00:44:31,000 --> 00:44:33,000
Hello.

1204
00:44:33,000 --> 00:44:35,000
I have two

1205
00:44:35,000 --> 00:44:37,000
questions.

1206
00:44:37,000 --> 00:44:39,000
The first one is

1207
00:44:39,000 --> 00:44:41,000
about

1208
00:44:41,000 --> 00:44:43,000
the experiment

1209
00:44:43,000 --> 00:44:45,000
on supervised

1210
00:44:45,000 --> 00:44:47,000
learning.

1211
00:44:47,000 --> 00:44:49,000
Do you have

1212
00:44:49,000 --> 00:44:51,000
other

1213
00:44:51,000 --> 00:44:53,000
research on

1214
00:44:53,000 --> 00:44:55,000
computational

1215
00:44:55,000 --> 00:44:57,000
biology?

1216
00:44:57,000 --> 00:44:59,000
I'm not familiar

1217
00:44:59,000 --> 00:45:01,000
with computational biology,

1218
00:45:01,000 --> 00:45:03,000
so I'm curious.

1219
00:45:03,000 --> 00:45:05,000
The second question

1220
00:45:05,000 --> 00:45:07,000
is

1221
00:45:07,000 --> 00:45:09,000
about

1222
00:45:09,000 --> 00:45:11,000
unsupervised learning.

1223
00:45:11,000 --> 00:45:13,000
Are there

1224
00:45:13,000 --> 00:45:15,000
other

1225
00:45:15,000 --> 00:45:17,000
applications

1226
00:45:17,000 --> 00:45:19,000
like

1227
00:45:19,000 --> 00:45:21,000
this?

1228
00:45:21,000 --> 00:45:23,000
It's similar to

1229
00:45:23,000 --> 00:45:25,000
the classification of DNA.

1230
00:45:25,000 --> 00:45:27,000
In the past,

1231
00:45:27,000 --> 00:45:29,000
people collected

1232
00:45:29,000 --> 00:45:31,000
a lot of documents

1233
00:45:31,000 --> 00:45:33,000
to do unsupervised learning.

1234
00:45:33,000 --> 00:45:35,000
For example,

1235
00:45:35,000 --> 00:45:37,000
all novels

1236
00:45:37,000 --> 00:45:39,000
written in English

1237
00:45:39,000 --> 00:45:41,000
can be collected

1238
00:45:41,000 --> 00:45:43,000
to do unsupervised learning.

1239
00:45:43,000 --> 00:45:45,000
But

1240
00:45:45,000 --> 00:45:47,000
when doing

1241
00:45:47,000 --> 00:45:49,000
literature learning,

1242
00:45:49,000 --> 00:45:51,000
the authors

1243
00:45:51,000 --> 00:45:53,000
usually have

1244
00:45:53,000 --> 00:45:55,000
a literature background.

1245
00:45:55,000 --> 00:45:57,000
So, to achieve

1246
00:45:57,000 --> 00:45:59,000
a certain goal,

1247
00:45:59,000 --> 00:46:01,000
they need to

1248
00:46:01,000 --> 00:46:03,000
process the documents

1249
00:46:03,000 --> 00:46:05,000
like biologists.

1250
00:46:05,000 --> 00:46:07,000
For example,

1251
00:46:07,000 --> 00:46:09,000
if I want to classify

1252
00:46:09,000 --> 00:46:11,000
a group of

1253
00:46:11,000 --> 00:46:13,000
literary works

1254
00:46:13,000 --> 00:46:15,000
to do unsupervised learning,

1255
00:46:15,000 --> 00:46:17,000
I may not get

1256
00:46:17,000 --> 00:46:19,000
a good result

1257
00:46:19,000 --> 00:46:21,000
with raw data.

1258
00:46:21,000 --> 00:46:23,000
Because each author

1259
00:46:23,000 --> 00:46:25,000
has his own habits,

1260
00:46:25,000 --> 00:46:27,000
and each author

1261
00:46:27,000 --> 00:46:29,000
will become a group.

1262
00:46:29,000 --> 00:46:31,000
So, they need

1263
00:46:31,000 --> 00:46:33,000
some methods

1264
00:46:33,000 --> 00:46:35,000
to do unsupervised learning.

1265
00:46:35,000 --> 00:46:37,000
For example,

1266
00:46:37,000 --> 00:46:39,000
cutting out outliers

1267
00:46:39,000 --> 00:46:41,000
with high or low frequency.

1268
00:46:41,000 --> 00:46:43,000
I heard

1269
00:46:43,000 --> 00:46:45,000
that there is no research on this.

1270
00:46:45,000 --> 00:46:47,000
I'm curious

1271
00:46:47,000 --> 00:46:49,000
about the result

1272
00:46:49,000 --> 00:46:51,000
of compressive approach.

1273
00:46:51,000 --> 00:46:53,000
This is my second question.

1274
00:46:55,000 --> 00:46:57,000
Yes,

1275
00:46:57,000 --> 00:46:59,000
this is a very good question.

1276
00:46:59,000 --> 00:47:01,000
Sorry,

1277
00:47:01,000 --> 00:47:03,000
I talked too fast

1278
00:47:03,000 --> 00:47:05,000
about the details of the experiment.

1279
00:47:05,000 --> 00:47:07,000
We compare

1280
00:47:07,000 --> 00:47:09,000
traditional literature

1281
00:47:09,000 --> 00:47:11,000
with

1282
00:47:11,000 --> 00:47:13,000
classical literature.

1283
00:47:13,000 --> 00:47:15,000
In traditional literature,

1284
00:47:15,000 --> 00:47:17,000
there is a way to measure

1285
00:47:17,000 --> 00:47:19,000
which method is better.

1286
00:47:19,000 --> 00:47:21,000
The main problem is

1287
00:47:21,000 --> 00:47:23,000
that we can't

1288
00:47:23,000 --> 00:47:25,000
calculate

1289
00:47:25,000 --> 00:47:27,000
the distance

1290
00:47:27,000 --> 00:47:29,000
between two things

1291
00:47:29,000 --> 00:47:31,000
in the same way

1292
00:47:31,000 --> 00:47:33,000
as in classical literature.

1293
00:47:33,000 --> 00:47:35,000
So,

1294
00:47:35,000 --> 00:47:37,000
the main way

1295
00:47:37,000 --> 00:47:39,000
to measure

1296
00:47:39,000 --> 00:47:41,000
the distance

1297
00:47:41,000 --> 00:47:43,000
between two things

1298
00:47:43,000 --> 00:47:45,000
is to use

1299
00:47:45,000 --> 00:47:47,000
phylogeny

1300
00:47:47,000 --> 00:47:49,000
to compare

1301
00:47:49,000 --> 00:47:51,000
the distance

1302
00:47:51,000 --> 00:47:53,000
between two things.

1303
00:47:53,000 --> 00:47:55,000
To be more specific,

1304
00:47:55,000 --> 00:47:57,000
when we

1305
00:47:57,000 --> 00:47:59,000
study

1306
00:47:59,000 --> 00:48:01,000
the evolution of

1307
00:48:01,000 --> 00:48:03,000
proteins,

1308
00:48:03,000 --> 00:48:05,000
we use

1309
00:48:05,000 --> 00:48:07,000
mitochondrial genes.

1310
00:48:07,000 --> 00:48:09,000
For example,

1311
00:48:09,000 --> 00:48:11,000
in your second question,

1312
00:48:11,000 --> 00:48:13,000
there are many different methods.

1313
00:48:13,000 --> 00:48:15,000
In addition to

1314
00:48:15,000 --> 00:48:17,000
mitochondrial genes,

1315
00:48:17,000 --> 00:48:19,000
we use them

1316
00:48:19,000 --> 00:48:21,000
because

1317
00:48:21,000 --> 00:48:23,000
they were

1318
00:48:23,000 --> 00:48:25,000
completely decoded

1319
00:48:25,000 --> 00:48:27,000
earlier.

1320
00:48:27,000 --> 00:48:29,000
Therefore,

1321
00:48:29,000 --> 00:48:31,000
there are more documents.

1322
00:48:31,000 --> 00:48:33,000
Later,

1323
00:48:33,000 --> 00:48:35,000
when people's technology

1324
00:48:35,000 --> 00:48:37,000
develops,

1325
00:48:37,000 --> 00:48:39,000
they will use

1326
00:48:39,000 --> 00:48:41,000
different kinds of genes

1327
00:48:41,000 --> 00:48:43,000
or a series of

1328
00:48:43,000 --> 00:48:45,000
transmitted amino acids

1329
00:48:45,000 --> 00:48:47,000
to classify.

1330
00:48:47,000 --> 00:48:49,000
Here,

1331
00:48:49,000 --> 00:48:51,000
we mainly use

1332
00:48:51,000 --> 00:48:53,000
the most traditional

1333
00:48:53,000 --> 00:48:55,000
mitochondrial genes

1334
00:48:55,000 --> 00:48:57,000
to classify

1335
00:48:57,000 --> 00:48:59,000
and compare

1336
00:48:59,000 --> 00:49:01,000
with the research

1337
00:49:01,000 --> 00:49:03,000
on literature.

1338
00:49:03,000 --> 00:49:05,000
For example,

1339
00:49:05,000 --> 00:49:07,000
in the study

1340
00:49:07,000 --> 00:49:09,000
on mammals,

1341
00:49:09,000 --> 00:49:11,000
the later research

1342
00:49:11,000 --> 00:49:13,000
may be different

1343
00:49:13,000 --> 00:49:15,000
from the earlier research.

1344
00:49:15,000 --> 00:49:17,000
However,

1345
00:49:17,000 --> 00:49:19,000
here,

1346
00:49:19,000 --> 00:49:21,000
we use

1347
00:49:21,000 --> 00:49:23,000
mitochondrial DNA

1348
00:49:23,000 --> 00:49:25,000
to classify

1349
00:49:25,000 --> 00:49:27,000
and the results are

1350
00:49:27,000 --> 00:49:29,000
quite similar.

1351
00:49:29,000 --> 00:49:31,000
In fact,

1352
00:49:31,000 --> 00:49:33,000
SARS-CoV-2

1353
00:49:33,000 --> 00:49:35,000
has several stages.

1354
00:49:35,000 --> 00:49:37,000
Here,

1355
00:49:37,000 --> 00:49:39,000
we mainly use

1356
00:49:39,000 --> 00:49:41,000
the S-protein stage

1357
00:49:41,000 --> 00:49:43,000
to compare.

1358
00:49:43,000 --> 00:49:45,000
S-protein is

1359
00:49:45,000 --> 00:49:47,000
the shell of SARS or

1360
00:49:47,000 --> 00:49:49,000
coronavirus.

1361
00:49:49,000 --> 00:49:51,000
We know that

1362
00:49:51,000 --> 00:49:53,000
the virus shell

1363
00:49:53,000 --> 00:49:55,000
contains a lot of

1364
00:49:55,000 --> 00:49:57,000
kind of needle signals.

1365
00:49:57,000 --> 00:49:59,000
So,

1366
00:49:59,000 --> 00:50:01,000
SARS-CoV-2

1367
00:50:01,000 --> 00:50:03,000
will mutate

1368
00:50:03,000 --> 00:50:05,000
its shell

1369
00:50:05,000 --> 00:50:07,000
to pass through

1370
00:50:07,000 --> 00:50:09,000
the membrane of

1371
00:50:09,000 --> 00:50:11,000
another cell.

1372
00:50:11,000 --> 00:50:13,000
The reason why

1373
00:50:13,000 --> 00:50:15,000
we choose S-virus

1374
00:50:15,000 --> 00:50:17,000
is because

1375
00:50:17,000 --> 00:50:19,000
we can use

1376
00:50:19,000 --> 00:50:21,000
the same data

1377
00:50:21,000 --> 00:50:23,000
to compare

1378
00:50:23,000 --> 00:50:25,000
with the

1379
00:50:25,000 --> 00:50:27,000
literature on SARS.

1380
00:50:27,000 --> 00:50:29,000
In fact,

1381
00:50:29,000 --> 00:50:31,000
the S-protein

1382
00:50:31,000 --> 00:50:33,000
is not the only

1383
00:50:33,000 --> 00:50:35,000
variant of SARS.

1384
00:50:35,000 --> 00:50:37,000
There are many

1385
00:50:37,000 --> 00:50:39,000
other variants of SARS.

1386
00:50:39,000 --> 00:50:41,000
I guess

1387
00:50:41,000 --> 00:50:43,000
we can also use

1388
00:50:43,000 --> 00:50:45,000
the S-protein.

1389
00:50:45,000 --> 00:50:47,000
So,

1390
00:50:47,000 --> 00:50:49,000
the first question

1391
00:50:49,000 --> 00:50:51,000
is how to compare

1392
00:50:51,000 --> 00:50:53,000
SARS-CoV-2

1393
00:50:53,000 --> 00:50:55,000
with SARS-CoV-2.

1394
00:50:55,000 --> 00:50:57,000
The second question is

1395
00:50:57,000 --> 00:50:59,000
what is the difference

1396
00:50:59,000 --> 00:51:01,000
between SARS-CoV-2

1397
00:51:01,000 --> 00:51:03,000
and SARS-CoV-2

1398
00:51:03,000 --> 00:51:05,000
in other fields?

1399
00:51:05,000 --> 00:51:07,000
I know that

1400
00:51:07,000 --> 00:51:09,000
there are many

1401
00:51:09,000 --> 00:51:11,000
applications of

1402
00:51:11,000 --> 00:51:13,000
SARS-CoV-2

1403
00:51:13,000 --> 00:51:15,000
in other fields.

1404
00:51:15,000 --> 00:51:17,000
For example,

1405
00:51:17,000 --> 00:51:19,000
I know that

1406
00:51:19,000 --> 00:51:21,000
some people

1407
00:51:21,000 --> 00:51:23,000
apply the SARS-CoV-2

1408
00:51:23,000 --> 00:51:25,000
and

1409
00:51:25,000 --> 00:51:27,000
some people

1410
00:51:27,000 --> 00:51:29,000
apply the SARS-CoV-2.

1411
00:51:29,000 --> 00:51:31,000
Can we

1412
00:51:31,000 --> 00:51:33,000
describe

1413
00:51:33,000 --> 00:51:35,000
the similarities

1414
00:51:35,000 --> 00:51:37,000
in the literature

1415
00:51:37,000 --> 00:51:39,000
by saying

1416
00:51:39,000 --> 00:51:41,000
this group is

1417
00:51:41,000 --> 00:51:43,000
SARS-CoV-2

1418
00:51:43,000 --> 00:51:45,000
and this group is

1419
00:51:45,000 --> 00:51:47,000
SARS-CoV-2?

1420
00:51:47,000 --> 00:51:49,000
I know that

1421
00:51:49,000 --> 00:51:51,000
we can use

1422
00:51:51,000 --> 00:51:53,000
punctuation

1423
00:51:53,000 --> 00:51:55,000
to unify them.

1424
00:51:55,000 --> 00:51:57,000
Or we can

1425
00:51:57,000 --> 00:51:59,000
remove the blanks.

1426
00:51:59,000 --> 00:52:01,000
When we don't do these things at all,

1427
00:52:01,000 --> 00:52:03,000
we can classify the literature

1428
00:52:03,000 --> 00:52:05,000
in a good way.

1429
00:52:05,000 --> 00:52:07,000
In addition to the literature,

1430
00:52:07,000 --> 00:52:09,000
I guess

1431
00:52:09,000 --> 00:52:11,000
anything can be

1432
00:52:11,000 --> 00:52:13,000
generalized.

1433
00:52:13,000 --> 00:52:15,000
As long as it becomes 0101,

1434
00:52:15,000 --> 00:52:17,000
it can be compressed.

1435
00:52:17,000 --> 00:52:19,000
For example,

1436
00:52:19,000 --> 00:52:21,000
we have these

1437
00:52:21,000 --> 00:52:23,000
MIDI files.

1438
00:52:23,000 --> 00:52:25,000
When we classify them,

1439
00:52:25,000 --> 00:52:27,000
we will find that

1440
00:52:27,000 --> 00:52:29,000
this group of MIDI files

1441
00:52:29,000 --> 00:52:31,000
seems to be in the style of Bach.

1442
00:52:31,000 --> 00:52:33,000
This group of MIDI files

1443
00:52:33,000 --> 00:52:35,000
is in the style of Beethoven.

1444
00:52:35,000 --> 00:52:37,000
We can classify them.

1445
00:52:37,000 --> 00:52:39,000
I know that

1446
00:52:39,000 --> 00:52:41,000
in science,

1447
00:52:41,000 --> 00:52:43,000
for example,

1448
00:52:43,000 --> 00:52:45,000
in astronomy,

1449
00:52:45,000 --> 00:52:47,000
we classify

1450
00:52:47,000 --> 00:52:49,000
this group of light

1451
00:52:49,000 --> 00:52:51,000
with the change of time.

1452
00:52:51,000 --> 00:52:53,000
It probably has this change.

1453
00:52:53,000 --> 00:52:55,000
It probably has this change.

1454
00:52:55,000 --> 00:52:57,000
It may be a cycle

1455
00:52:57,000 --> 00:52:59,000
or it is a change

1456
00:52:59,000 --> 00:53:01,000
that goes up slowly.

1457
00:53:01,000 --> 00:53:03,000
And this group of astronomical objects

1458
00:53:03,000 --> 00:53:05,000
may be this picture.

1459
00:53:05,000 --> 00:53:07,000
Its light curve looks like this.

1460
00:53:07,000 --> 00:53:09,000
When we classify these series,

1461
00:53:09,000 --> 00:53:11,000
we will find that

1462
00:53:11,000 --> 00:53:13,000
this group of astronomical objects

1463
00:53:13,000 --> 00:53:15,000
are all supernovae.

1464
00:53:15,000 --> 00:53:17,000
They probably look like this.

1465
00:53:17,000 --> 00:53:19,000
This group of objects

1466
00:53:19,000 --> 00:53:21,000
is a supernova.

1467
00:53:21,000 --> 00:53:23,000
So I know that

1468
00:53:23,000 --> 00:53:25,000
it can be applied

1469
00:53:25,000 --> 00:53:27,000
in other fields.

1470
00:53:27,000 --> 00:53:29,000
Yes.

1471
00:53:29,000 --> 00:53:31,000
Thank you.

1472
00:53:31,000 --> 00:53:33,000
Thank you.

1473
00:53:43,000 --> 00:53:45,000
Are there any questions

1474
00:53:45,000 --> 00:53:47,000
from the audience?

1475
00:53:51,000 --> 00:53:53,000
I have a question.

1476
00:53:53,000 --> 00:53:55,000
Yes.

1477
00:53:55,000 --> 00:53:57,000
I want to ask

1478
00:53:57,000 --> 00:53:59,000
about the CTW

1479
00:53:59,000 --> 00:54:01,000
compression method.

1480
00:54:01,000 --> 00:54:03,000
It is successful in many areas.

1481
00:54:03,000 --> 00:54:05,000
Is there any situation

1482
00:54:05,000 --> 00:54:07,000
where it doesn't perform so well?

1483
00:54:07,000 --> 00:54:09,000
Do you know why?

1484
00:54:11,000 --> 00:54:13,000
Yes.

1485
00:54:13,000 --> 00:54:15,000
CTW

1486
00:54:15,000 --> 00:54:17,000
has a problem.

1487
00:54:19,000 --> 00:54:21,000
The algorithm

1488
00:54:21,000 --> 00:54:23,000
must know in advance

1489
00:54:23,000 --> 00:54:25,000
how long

1490
00:54:25,000 --> 00:54:27,000
the tree is.

1491
00:54:27,000 --> 00:54:29,000
For example,

1492
00:54:29,000 --> 00:54:31,000
our example is 3.

1493
00:54:31,000 --> 00:54:33,000
Theoretically,

1494
00:54:33,000 --> 00:54:35,000
if we

1495
00:54:35,000 --> 00:54:37,000
only count

1496
00:54:37,000 --> 00:54:39,000
the prefix to 3,

1497
00:54:39,000 --> 00:54:41,000
the pattern

1498
00:54:41,000 --> 00:54:43,000
of this data

1499
00:54:43,000 --> 00:54:45,000
must be

1500
00:54:45,000 --> 00:54:47,000
4

1501
00:54:47,000 --> 00:54:49,000
or 5 symbols

1502
00:54:49,000 --> 00:54:51,000
before.

1503
00:54:51,000 --> 00:54:53,000
If we only limit it to 3,

1504
00:54:53,000 --> 00:54:55,000
logically,

1505
00:54:55,000 --> 00:54:57,000
the algorithm will learn

1506
00:54:57,000 --> 00:54:59,000
the pattern.

1507
00:54:59,000 --> 00:55:01,000
This problem

1508
00:55:01,000 --> 00:55:03,000
has a specific

1509
00:55:03,000 --> 00:55:05,000
representation

1510
00:55:05,000 --> 00:55:07,000
in the data of the image.

1511
00:55:07,000 --> 00:55:09,000
We know that

1512
00:55:09,000 --> 00:55:11,000
the pixels on my left

1513
00:55:11,000 --> 00:55:13,000
should be

1514
00:55:13,000 --> 00:55:15,000
the same color.

1515
00:55:15,000 --> 00:55:17,000
Not only on my left,

1516
00:55:17,000 --> 00:55:19,000
but also on my top and bottom

1517
00:55:19,000 --> 00:55:21,000
should be the same color.

1518
00:55:21,000 --> 00:55:23,000
But if we change

1519
00:55:23,000 --> 00:55:25,000
the pattern

1520
00:55:25,000 --> 00:55:27,000
row by row,

1521
00:55:27,000 --> 00:55:29,000
we will find that

1522
00:55:29,000 --> 00:55:31,000
the upper and lower pixels

1523
00:55:31,000 --> 00:55:33,000
should be the same color.

1524
00:55:33,000 --> 00:55:35,000
The pattern

1525
00:55:35,000 --> 00:55:37,000
depends on

1526
00:55:37,000 --> 00:55:39,000
the width,

1527
00:55:39,000 --> 00:55:41,000
for example,

1528
00:55:41,000 --> 00:55:43,000
600x400.

1529
00:55:43,000 --> 00:55:45,000
It depends on 400 pixels

1530
00:55:45,000 --> 00:55:47,000
and 400 symbols

1531
00:55:47,000 --> 00:55:49,000
to learn the pattern.

1532
00:55:49,000 --> 00:55:51,000
I guess

1533
00:55:51,000 --> 00:55:53,000
this is the main reason.

1534
00:55:53,000 --> 00:55:55,000
The reason

1535
00:55:55,000 --> 00:55:57,000
we can't

1536
00:55:57,000 --> 00:55:59,000
extend

1537
00:55:59,000 --> 00:56:01,000
the depth of the tree

1538
00:56:01,000 --> 00:56:03,000
is because

1539
00:56:03,000 --> 00:56:05,000
to build a tree,

1540
00:56:05,000 --> 00:56:07,000
the memory

1541
00:56:07,000 --> 00:56:09,000
needs

1542
00:56:09,000 --> 00:56:11,000
the growth of the

1543
00:56:11,000 --> 00:56:13,000
pixel type.

1544
00:56:13,000 --> 00:56:15,000
The growth of the pixel type

1545
00:56:15,000 --> 00:56:17,000
is hard to

1546
00:56:17,000 --> 00:56:19,000
calculate

1547
00:56:19,000 --> 00:56:21,000
because the

1548
00:56:21,000 --> 00:56:23,000
number of pixels

1549
00:56:23,000 --> 00:56:25,000
is small.

1550
00:56:25,000 --> 00:56:27,000
I guess this is

1551
00:56:27,000 --> 00:56:29,000
the biggest problem.

1552
00:56:29,000 --> 00:56:31,000
I see.

1553
00:56:31,000 --> 00:56:33,000
Hello,

1554
00:56:33,000 --> 00:56:35,000
Fumi.

1555
00:56:35,000 --> 00:56:37,000
Hello,

1556
00:56:37,000 --> 00:56:39,000
A-Pad.

1557
00:56:39,000 --> 00:56:41,000
I want to ask

1558
00:56:41,000 --> 00:56:43,000
a question

1559
00:56:43,000 --> 00:56:45,000
that is not

1560
00:56:45,000 --> 00:56:47,000
related to

1561
00:56:47,000 --> 00:56:49,000
randomness.

1562
00:56:49,000 --> 00:56:51,000
For example,

1563
00:56:51,000 --> 00:56:53,000
if we put a

1564
00:56:53,000 --> 00:56:55,000
bunch of data

1565
00:56:55,000 --> 00:56:57,000
into the tree,

1566
00:56:57,000 --> 00:56:59,000
will it

1567
00:56:59,000 --> 00:57:01,000
get any result?

1568
00:57:01,000 --> 00:57:03,000
For randomness,

1569
00:57:03,000 --> 00:57:05,000
we will find

1570
00:57:05,000 --> 00:57:07,000
that

1571
00:57:07,000 --> 00:57:09,000
if we

1572
00:57:09,000 --> 00:57:11,000
follow

1573
00:57:11,000 --> 00:57:13,000
the formula,

1574
00:57:13,000 --> 00:57:15,000
we will find

1575
00:57:15,000 --> 00:57:17,000
that the kx

1576
00:57:17,000 --> 00:57:19,000
is equal to

1577
00:57:19,000 --> 00:57:21,000
itself.

1578
00:57:21,000 --> 00:57:23,000
We are trying to

1579
00:57:23,000 --> 00:57:25,000
find the probability.

1580
00:57:25,000 --> 00:57:27,000
If we

1581
00:57:27,000 --> 00:57:29,000
follow the formula,

1582
00:57:29,000 --> 00:57:31,000
it will be equal to itself.

1583
00:57:31,000 --> 00:57:33,000
The data

1584
00:57:33,000 --> 00:57:35,000
is the only

1585
00:57:35,000 --> 00:57:37,000
data in the world.

1586
00:57:37,000 --> 00:57:39,000
I guess

1587
00:57:39,000 --> 00:57:41,000
the result is

1588
00:57:41,000 --> 00:57:43,000
something special.

1589
00:57:45,000 --> 00:57:47,000
I see.

1590
00:57:47,000 --> 00:57:49,000
Yes, intuitively.

1591
00:57:59,000 --> 00:58:01,000
Does anyone

1592
00:58:01,000 --> 00:58:03,000
have other questions?

1593
00:58:03,000 --> 00:58:05,000
Can I ask

1594
00:58:05,000 --> 00:58:07,000
one more question?

1595
00:58:07,000 --> 00:58:09,000
Sure.

1596
00:58:09,000 --> 00:58:11,000
You mentioned

1597
00:58:11,000 --> 00:58:13,000
that CTW cannot

1598
00:58:13,000 --> 00:58:15,000
be compressed.

1599
00:58:15,000 --> 00:58:17,000
In fact,

1600
00:58:17,000 --> 00:58:19,000
there are a lot of

1601
00:58:19,000 --> 00:58:21,000
compressed files.

1602
00:58:21,000 --> 00:58:23,000
Compressed files

1603
00:58:23,000 --> 00:58:25,000
are designed to

1604
00:58:25,000 --> 00:58:27,000
look up and down.

1605
00:58:31,000 --> 00:58:33,000
Can CTW

1606
00:58:33,000 --> 00:58:35,000
be designed to

1607
00:58:35,000 --> 00:58:37,000
look up and left?

1608
00:58:37,000 --> 00:58:39,000
Something like that.

1609
00:58:39,000 --> 00:58:41,000
And then build the tree.

1610
00:58:41,000 --> 00:58:43,000
That's it.

1611
00:58:45,000 --> 00:58:47,000
I guess

1612
00:58:47,000 --> 00:58:49,000
it is possible.

1613
00:58:49,000 --> 00:58:51,000
For example,

1614
00:58:51,000 --> 00:58:53,000
if the tree

1615
00:58:53,000 --> 00:58:55,000
has only two branches,

1616
00:58:55,000 --> 00:58:57,000
I guess

1617
00:58:57,000 --> 00:58:59,000
the tree can have

1618
00:58:59,000 --> 00:59:01,000
more branches.

1619
00:59:11,000 --> 00:59:13,000
I know

1620
00:59:13,000 --> 00:59:15,000
a lot of papers

1621
00:59:15,000 --> 00:59:17,000
are working on

1622
00:59:17,000 --> 00:59:19,000
this kind of improvement.

1623
00:59:19,000 --> 00:59:21,000
I guess

1624
00:59:21,000 --> 00:59:23,000
some people's improvement is

1625
00:59:23,000 --> 00:59:25,000
that CTW

1626
00:59:25,000 --> 00:59:27,000
is designed to

1627
00:59:27,000 --> 00:59:29,000
look up and down.

1628
00:59:29,000 --> 00:59:31,000
Some papers

1629
00:59:31,000 --> 00:59:33,000
are

1630
00:59:33,000 --> 00:59:35,000
designed to

1631
00:59:35,000 --> 00:59:37,000
skip some syntax.

1632
00:59:37,000 --> 00:59:40,000
Skip some syntax.

1633
01:00:07,000 --> 01:00:09,000
Hello?

1634
01:00:29,000 --> 01:00:31,000
Hello?

1635
01:00:31,000 --> 01:00:33,000
Hello?

1636
01:00:33,000 --> 01:00:35,000
Hello?

1637
01:00:35,000 --> 01:00:37,000
I wasn't talking just now.

1638
01:00:37,000 --> 01:00:39,000
I'm afraid my internet is broken.

1639
01:00:39,000 --> 01:00:41,000
Okay.

1640
01:00:41,000 --> 01:00:43,000
I'd like to ask

1641
01:00:43,000 --> 01:00:45,000
if there are any other questions.

1642
01:00:49,000 --> 01:00:51,000
Okay.

1643
01:00:51,000 --> 01:00:53,000
If you haven't joined

1644
01:00:53,000 --> 01:00:55,000
TaiwaR,

1645
01:00:55,000 --> 01:00:57,000
please use the link in the chat.

1646
01:00:57,000 --> 01:00:59,000
Thank you again for

1647
01:00:59,000 --> 01:01:01,000
the wonderful speech.

1648
01:01:01,000 --> 01:01:03,000
Thank you.

1649
01:01:05,000 --> 01:01:07,000
If you have any questions,

1650
01:01:07,000 --> 01:01:09,000
you can discuss in private.

1651
01:01:09,000 --> 01:01:11,000
You can also

1652
01:01:11,000 --> 01:01:13,000
use the link in the chat.

1653
01:01:13,000 --> 01:01:15,000
Thank you.

1654
01:01:15,000 --> 01:01:17,000
See you next time.

1655
01:01:17,000 --> 01:01:19,000
Bye.

