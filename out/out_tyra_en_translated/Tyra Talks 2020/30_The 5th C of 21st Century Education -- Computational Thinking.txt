Welcome everyone to today's presentation.
Today's speaker is Joey Huang.
We are very honored to invite him to give this presentation.
Let me briefly introduce today's speaker.
Joey Huang is currently a postdoc in the School of Information and Computer Sciences at the University of California, Irvine.
She received her Ph.D. in Learning and Developmental Sciences from Indiana University, Bloomington.
Coming from a background of educational psychology and computing, her research focuses on computational thinking, collaboration, and STEM learning.
As a learning scientist by training, she aims to create more interesting and inspiring learning environments to promote equity and collaboration.
Today's topic is the 5th C of 21st Century Education, Computational Thinking.
Without further ado, I will hand over to Joey Huang.
If you have any questions, please leave a comment in the chat area.
I will forward the questions to him.
Now I will ask him to start his presentation.
Thank you for your introduction, Haoran.
Has everyone seen my screen?
Yes.
Thank you.
If you have any questions, please leave a comment in the chat area.
I can't see most of you right now.
Most of you didn't turn on the video.
It's okay.
As long as you can see me.
If you have any questions, please leave a comment in the chat area.
If you have any questions, please leave a comment in the chat area.
As I mentioned, I am a PhD student at UCI.
I have three main purposes for this presentation.
I hope you can take this with you when you listen to it.
First, this presentation will provide you with a basic idea of computational thinking.
What is computational thinking?
Why do we need to care about it?
Second, I hope you can take this with you when you listen to this presentation.
You will experience the process of computational thinking.
You will interact with each other.
Not interacting with each other.
I will give you a little experience.
Lastly, I hope you can take it easy.
Whether it's morning, afternoon, or evening.
No matter where you are.
Thank you for coming today.
I am happy to share this topic with you.
This is my first time presenting my research in Chinese.
It's a new experience for me.
I don't think there are many people studying education or learning sciences in this group.
I hope you can take this with you when you listen to this presentation.
You can also interact with each other.
First, I will talk about computational thinking.
It's called computational thinking in English.
This is the 25th century education's 5th C.
What is the 5th C?
It means that there are 4 Cs in front of me.
The 4 Cs in front of me come from a partnership for 21st century learning.
It's a P21, a non-profit organization in the US.
It's a collaborative research organization with a research team.
There are 4 Cs in front of me.
Can you guess what the other 4 Cs are?
Communication, Collaboration, Critical Thinking, and Creativity.
Why is computational thinking the 5th C?
Next slide.
Let's talk about why we talk about computational thinking.
The so-called question is often used in our research.
People will say that it sounds good.
So what?
So why do we talk about it?
Let's talk about AI first.
Artificial Intelligence.
I don't know if you have seen the Westworld documentary.
It's a documentary about how humans interact with AI.
Hello, I can see the chat.
If you don't have any questions, just type them in the chat.
I can see them.
On the left, you can see a robot's hand.
On the right, you can see a human's hand.
This documentary is a bit exaggerated.
If you look at it realistically,
you may have heard that
some jobs will be replaced in the next few years.
Or some jobs will no longer exist.
The professor is being discussed.
My opinion is that
it's hard to replace the professor.
He has a meaning.
But teaching is dangerous.
So in the future,
there may be robots in classrooms
from K-12 to kindergarten.
There may be robots in classrooms from 4 to 18.
They will assist teachers and students.
This development is not only a global trend.
I will use the United States as an example.
This is a comment from the Wall Street Journal.
This is a report from NSF this year.
In August this year,
NSF was the first round of AI institutes.
There are more than 20 million institutes.
In the next five years,
they will use this fund to develop different AI projects.
Some of these projects are related to the future of work.
Some of them are related to education.
Most of them are discussing
how to make AI more advanced.
On the other hand,
it's a bit like a turning point in education.
How do we better prepare our next generation
to face this world?
If you are interested,
I will share all the resources at the end of the slide.
Now I have answered the question about digitalization.
After all,
I want to talk about
the relationship between AI and technology.
When I was young,
I may have revealed my age.
When I was young,
the first day of computer class,
the teacher taught me how to turn on and off.
Nowadays,
every child has an iPad.
In class,
everyone uses an iPad with a computer,
or the iPad is directly integrated into the class.
This is very common.
In fact,
we have never experienced
such a technology-heavy age.
In fact,
this turning point,
knowledge loss,
and experience
are all important in education.
So it's not just about the development of AI.
What is computational thinking?
If we all agree that
computational thinking is an important concept,
let's talk about the history of computational thinking.
The history of computation
can be traced back to the 19th century.
In the 20th century,
in 1962,
Alan Perlis, a computer scientist,
said that
programming is not just a skill.
It can be seen as a theory of computation.
This skill can be applied to other subjects
through a way of practicing and thinking.
So he started programming
beyond just a keyboard search.
It connects to the thinking of human beings.
It's a breakthrough.
But he didn't talk about it later.
Then it continued to develop
until Pepper and Harrell in 1991,
which is about 20 centuries later.
Their first term,
this researcher,
if you are in education,
you are familiar with it.
There is a theory called constructionism.
It's Simon Pepper.
Based on MIT Media Lab,
they invented a program
called Logo Computation
for children to learn.
It's a language for learning programming.
Looking back,
you might think
it's a very low-resolution,
and it's just a turtle
that teaches you how to draw shapes.
But in 1991,
it was a breakthrough.
So Simon Pepper
was the pioneer of constructionism.
He emphasized learning from doing,
gaining knowledge from doing.
So he was the first to
combine the terms
computation and thinking.
He published this article.
As for computational thinking,
in his research in 1991,
he didn't discuss it in depth.
He just mentioned
this is computational thinking.
Computational thinking
became very popular
in 2006.
A woman named Jeanette Wing,
a computer scientist.
She published a...
Here's a screenshot.
If you're interested,
you can read it.
This is what she said.
She said computational thinking involves
solving problems,
defining systems,
and understanding human behavior
by drawing on the concepts
of fundamental to computer science.
So she emphasized
what computational thinking is.
She started to define it.
She said it involves
defining systems,
understanding human behavior,
and using computational thinking
as a foundation
in computer science
to look at the world.
This research
now has over 6,000 citations.
Almost 7,000.
From 2006 to now,
she was the first
to promote computational thinking
beyond just computation.
It became a way of thinking
to look at the world.
She also said
this skill becomes
the foundation
of reading,
computing, and writing.
In the 21st century,
we're still pushing this concept.
What is computational thinking
and how do we implement it?
In general,
computational thinking
can be divided into
logic,
inference,
calculation,
and pattern recognition.
I don't know if you've
ever done that kind of
intelligence test.
It usually has no words.
It has a series of
logic for you to
infer what the answer is.
This is just
one part of computational thinking.
At the same time,
you need to know how to
break down the problem
into different parts.
How to solve the problem,
guess, and then re-do it.
Abstraction is a more abstract concept.
It's also called abstract.
It's a more abstract concept.
It's about how to think
in a higher level.
Before you solve the problem,
you need to think
in a higher level.
It's a bit like
if I want to design
a system today,
what do I suppose it will
encounter?
What do I need to solve?
These are all important concepts
in computational thinking.
Currently,
there are a few steps
in computational thinking.
These are all actions.
You can see it from
tinkering,
or designing something,
or solving a problem,
or cooperating with others.
These are all
the ways you can see
how computational thinking
occurs.
When you are doing these
things,
you may apply these
actions in computational thinking.
Today, I will use my research
as an example.
My research focuses on
collaborating.
I will talk more
about this later.
To sum up,
computational thinking
includes a series of
problem-solving processes,
such as recognizing patterns,
systematically breaking down
the problem,
or composing an algorithmic
solution.
These are all part of
computational thinking.
You can see that
this definition is very broad.
It's like,
do I know how to program?
Do I know how to do computational thinking?
For example,
I go to the supermarket
and list my food list.
Which side is which session?
If I can do this
grocery shopping
in the fastest way,
do I know how to do
computational thinking?
For example,
if I need to buy all these
in 10 minutes,
do I know how to do
computational thinking
in the shortest way?
These are all part of
computational thinking.
It's been 14 years
since 2006.
This field is not
well defined yet.
This is our Bible.
Computational thinking
is still being discussed
and challenged.
So, if you know
what computational thinking is,
and analyze it with your expertise,
I think it will be very helpful
in this field.
Now, I will talk about
some organizations
with high credibility
and start
to define computational thinking.
There are three of them.
One is
CSTA,
which stands for
Center for Teaching Education
in the United States.
Another one is
ISTE,
which stands for
International Society for
Technology in Education.
It's a big organization
that not only deals with
computational thinking,
but also all the applications
of technology in education.
This framework is relatively new
compared to the other two.
But these three organizations
have their own standards
and applications
for computational thinking.
The curriculum and skills
they need
are already solid
and are being
implemented in education.
I will talk more about
how I study
computational thinking
in a moment.
The framework I use
is from Brandon and Resnick.
Brandon is a professor
at Harvard Education.
Resnick is a professor
at MIT Media Lab.
My advisor and my lab
have cooperated with them.
This framework is
highly credible
and is a group of people
who study and explain
computational thinking.
You are welcome to discuss
this framework.
If you have other
credible frameworks,
you are welcome to talk about it.
Let me talk about
the definition of computational thinking.
I will give you
a clearer picture.
If you look at the left side of the picture,
you will see the definition of
the wide field.
The right side is the definition of the narrow field.
You can divide
computational thinking into
a group of people who believe
humans and computers
can be computational agents.
This means they believe
computational thinking
can exist outside of programming.
For example,
the example of grocery shopping.
If you are in this group,
you will think this is true.
The example below is a weaving example.
I don't know if you like
weaving or knitting.
Whether it is a sweater,
a sock, or a basket.
There is a group of people
who are studying
the process of weaving.
I have a lot of logical thinking to look at.
If you look at
some of the original works,
you can see that their patterns
are very complicated.
If you want to make these patterns by hand,
there is a lot of complicated thinking
involved.
There is a group of people
who believe that computational thinking
can be found in these places
and can be applied.
They will do this series of research.
The middle group of people
believe that computers
are computational agents.
They did not completely exclude humans,
but they did not completely agree.
They basically believe
that computational systems
can be applied
outside of
programming and CS.
It can also be benefited
by other subjects.
They are more neutral.
On the far right is a more narrow definition.
They believe that humans
are not computational agents.
More importantly,
below this,
we can't
do it.
Computational thinking is completely CS.
If I am not a CS person,
I will not be benefited
by this.
We can say that they are conservative.
Not everyone needs it.
Most people are discussing
these three groups.
You can choose which group you are
or which one you think is right.
There is no right or wrong.
It depends on your field
and your training and background
to train your method.
My research is more
towards the middle and left
wide definition.
I will talk more about
my research in the future.
Before I talk about my research,
I want to provide you
a summary of
K-12 education
from kindergarten to
high school,
from 4 to 18 years old.
If you are in Taiwan,
you are welcome to tell me
what CS education is like
in Taiwan.
I have done some research.
I want to know
if you are in Taiwan
or you have friends in Taiwan
who are doing this.
In the US,
this report is very new.
It was just released
this month.
It is from Coda.org,
CSTA, ECEP,
Alliance.
I will not go into details.
It is a report with credibility.
It is related to CS education
every year.
This report was just released this month.
You can see on the upper left,
CS standards
from 2017 to 2020,
from 6 states to
37 states,
all have K-12 CS standards.
If we have standards,
we need a teacher.
Teachers need to have the ability
to teach students.
You may find that
in the classroom,
teachers become
a weak point of knowledge.
Students use technology
too fast.
They already know these things.
Teachers can't keep up
with students.
This is like another topic.
We can discuss the relationship
between teachers and students.
If we go back to
the main topic,
CS teacher certification
has been implemented
in 40 states.
It means that
if you graduate from a university,
or get another degree,
you can get the certification.
Then you can start teaching
CS in K-12.
The last chart
shows the percentage
of students
who start teaching CS
in public schools.
Each state is different.
This chart shows
47 states.
This is all public schools,
not all high schools.
All public schools teach computer science.
Let's go back to the chart.
You can see that
more than 50%
of students
are still in development.
Haoran introduced me
to Indiana.
I'm in California now.
In addition to Indiana,
California also has
more than 50% of students.
You can see
where you are.
This information
explains
that
less than half of
public schools
teach computer science
in the U.S.
In addition,
less than 50%
of students
are from
rural areas,
low social status,
and underrepresented groups.
These people
are less likely
to take CS classes.
CS underrepresented groups
are not Asian.
Asians and whites
are in CS dominant groups.
CS underrepresented groups
are not Asian
and white.
How can we
keep this community
more diverse?
This is a very important
topic in CS education.
Many educators
support this.
For example,
if we want to define
gender as a traditional term,
women are also
an underrepresented group.
How can we attract
these underrepresented groups?
This is a very important
topic in CS education in the U.S.
How do we
start to use
these tools?
K-12
has
thousands of
tools.
I will share
some of them with you.
Later,
I will share
some of them with you.
If you have
kids at home,
teachers,
or researchers,
you can download
these tools
and play with them.
They are all free.
The first category
is block-based programming.
It is
a low-floor,
high-ceiling tool.
Low-floor, high-ceiling
means
this tool
is easy to use.
There is no
prior knowledge restriction.
If I don't have
programming experience,
I can also
use it.
It is easy to use.
It is for kids.
No.
High-ceiling means
it can be very complicated.
How to design
this tool?
It depends on
researchers' skills.
I listed a few
that are
related to
my research.
Lego is expensive.
I will talk about Lego later.
I am talking about free
block-based programming.
Blocky is
Google-designed.
Tinker is
a combination of
blocks.
You can
use colors
and squares
to make a simple
program.
Later...
Thank you, David.
Later, I will
talk about Scratch.
Scratch is a tool
designed by MIT Media Lab
in 2007.
I will talk about Scratch later.
Taiwan has
a lot of
elementary education using Scratch.
CodeCombat
is more like a game.
You can use block-based
programming to
set your character's skills.
You can...
I haven't played it, but
I saw the video.
You can set your character's skills.
And you can...
You need to use coding
to build things in the world.
It's like an indirect way
to build a world.
Robotics...
Robotics is another big direction.
You can build
robots
and introduce robots
to children.
Some people said
Lego is expensive.
These three
blocks are free.
But these are
commercial products.
It's not
very expensive.
These two are
more than $100.
I forgot about Lego.
But
it's not very expensive.
You can see
it's in Lego.
It's like a flowchart.
You can play.
It has motion sensor
and color sensor.
After you build the robot,
you can
use wheels
to recognize different colors
and get different commands.
Sephiroth is
block-based.
It's like a ball.
After you program it,
it can spin on the ground.
Tinkering,
hand-made,
and coding
are good
to introduce
to children.
Why does it move?
You can use it
to introduce
programming concepts.
You can stick
these routes on the ground.
You can program on the iPad.
You can simulate how it runs.
When it's programmed,
it can run.
You can see
how to solve
the problem
and implement
the plan.
Data science and
3D printing
are also
a field.
These two are
commonly used
in research and education.
Thank you for your comments.
I will answer
later for
time.
Please feel free to comment.
I promised
to introduce Scratch in detail.
Scratch
was first
introduced in
MIT Media Lab.
Mitch Resnick
and Karen Brennan
were first
introduced in
2007.
The first beta version
was released.
It's been 13 years.
There are more than
70 languages,
more than 61 million
project shares,
and more than
2 million people registered.
The goal is
as I said,
low-floor, high-ceiling.
You can jump in
if you don't have
a programming background.
You can play
and make different
interactive stories,
games,
animations,
and music.
Some people may
make it a Mother's Day gift.
You can share it
online.
You can share it
with your friends.
There may be
different animations
and music.
For kids,
application is their goal.
They may think it's cool.
I want to know how to do it.
Scratch was designed
in this direction.
It doesn't mean
every kid
is a computer scientist.
On the contrary,
programming is designed
as a design tool.
A piece of paper
is a design tool.
How do I fold it?
You can think of programming
as a tool.
With this tool,
you can do different things.
The core audience
is 8 to 16 years old.
The maximum age is 12.
I've seen many
college students' projects
or complex projects.
You can try it later.
The environment
is at the bottom right.
It's
block-based.
Different colors
represent different functions.
What you need to do
is to drag from here
to this window.
Then you can start to build.
You can see
what you just coded.
You can click the play button
to see what you just programmed.
As I said,
you may be confused
if you don't have
experience with Scratch.
I have an example.
Let's play together
for 2 to 3 minutes.
It doesn't matter if you don't have an account.
I'll post the link
on the chat.
I'll give you
some time
to open it.
I'm working with you now.
If you open it,
it should look like this.
If you've already started,
you can feel free to start.
It's a...
I think it's a theme
related game.
So I chose a game
with a girl as the theme.
I'll start
to play with you now.
If you open the window,
feel free to click the play button.
I don't know if you can hear the music.
But my headphones can hear it.
Sorry.
I really don't know how to play games.
If I die,
don't laugh at me.
Thank you, Yan Yong.
I think you can start playing now.
I'll give you some time.
I think I can't get past 5 minutes.
I'll just keep dying.
Okay, anyway.
If I get past 2 minutes
or 5 minutes later, you can tell me.
Because I really think this game is a bit hard.
Okay, pause for a moment.
Did you? How did you play?
Because I'm really bad at this.
So you know,
calculating doesn't mean you know how to play.
Right?
So...
Okay.
Does anyone want to share their score?
Okay, if you...
If you're almost done,
you can click on this project.
It has a button called See Inside.
This button.
I'm sure you're all in front of the computer.
If you can watch it with me,
you'll have a deeper experience.
So there's a See Inside here.
You can take a look at
what the project looks like.
If you're a programmer,
a programmer,
you may need to spend some time
getting used to the interface.
Because it's different from
most text spaces.
For example,
C++ or Python
or JavaScript.
It's very different.
Because you can see what I just said.
The motion, look, sound,
these events.
I'm going to pick one to introduce to you.
For example,
If I create a new project here,
I drag
an event.
For example, when green flags click.
It's this green flag.
It's very intuitive.
What you see is what it is.
I'm going to help this cat
do a 10-step forward.
At the same time,
I want it to be able to say hello
in two minutes.
It has a feature
that can insert sound.
It has a different meow sound.
You can also record your own voice.
So you've added a lot of
creativity to see what you want to do.
I'm going to use
what it defaults to do.
What happens when I press this?
Do you hear that meow sound?
It will go 10 steps forward.
The so-called 10 is x going 10.
It was just at 0.
It will say hello.
I'll run it again.
It goes another 10 steps forward.
It will say hello in two seconds.
It will make a meow sound.
If you want to repeat
this action,
the very important concept in programming
is called looped.
You can insert a repeat here.
If I just repeat
say hello and play sound,
let's just repeat it twice.
It will
go another 10 steps forward.
You'll see
that after it's done
with these two commands,
it will go back to say hello.
Say hello again.
It just made a meow sound twice.
You can play this at home.
You can also
custom this cat.
You can also
define or download.
If you have some photos,
you can download it.
There are some backgrounds here
that can provide you with choices.
There are different sprites here.
Our code sprite is called this object.
It has different objects.
You can also insert here.
So when I click this
object,
I'm here now.
Sorry, I cut this cat.
You know.
You can do
coding for this sprite.
I was coding under this cat.
Now I'm under Andy.
This extends to
the project I just shared with you.
You might think it's simple.
But if you
take a closer look at
the project I just shared with you,
it's very complicated.
So under each sprite,
I can
command it to do something.
After all, it's a game.
So I need to do a lot of things
at the same time.
For example, under this cat sprite,
I can see this green flag click.
It will start doing the following action.
It will demo it to you.
In other sprites,
I can also see
when green flag click,
there are other variables
running.
So this project
can be extended from
the project I just shared with you.
It can extend to
such a complex game.
This is
a low-floor-high-ceiling
tool I just talked about.
OK.
Do you want to play a little longer?
OK.
Because I can't see you.
I'll wait a minute.
I'll take a sip of water.
OK.
So this tool
is what I'm going to talk about
in my research today.
It's a very important tool.
Children are co-designed
in this context.
They have co-design, game, story,
music, and animation.
How much time
do I have left?
OK.
I'll quickly
introduce my research
and current
computational thinking.
From my perspective,
how is computational thinking studied?
I just mentioned
computational thinking and cooperative learning.
My research
and dissertation is mainly about
how computational thinking
is learned and used in a team.
I've brought some
most of the
literature and what people
say now.
At present, computational thinking is still
identified as a very
individual thinking.
If you take programming as an example,
I'm actually doing things
there myself.
I may not ask others sometimes,
but I'm doing it with others.
Most of the research
direction is actually
an independent individual.
For example, if this student
is exposed to this curriculum
or this tool,
what is my learning process?
What is my ability?
What is my result?
Some researchers have begun to discuss
that if the computational participation
is in a face-to-face environment,
if I'm online,
for example, the place I just scratched
has a lot of opportunities to
collaborate on the Internet.
What will it look like?
How will the child extend this project?
Some researchers have begun to
do computational thinking.
This cooperative computational thinking is not
a digital game.
When I'm playing games,
how can we solve this problem
together?
How do we play
what role together?
Current research
is focused on
first, individual,
second, online community,
or under
desktop and non-programming.
These researches are very few,
especially cooperative computational thinking.
This concept is actually
very limited now.
No one is doing this.
Even though the standard
mentioned that cooperative learning
is very important,
the current research direction
does not go in that direction.
My research argues
that cooperative learning
is not only cooperative learning,
but also an activity and process of
cooperative design.
In fact, in the field of
learning or psychology,
it has been found that students
actually know what to do.
If I am in a cooperative environment,
I can deepen
the knowledge I have learned
and I can advance
my problem-solving skills.
On the other hand,
cooperation
has shown
a good way
to close the gender gap
in CS.
For example,
you may think that
computer science is more
independent,
everyone is hiding in the dungeon.
It's dark in the basement,
and everyone is coding
at night.
Cooperative learning
shows that
it can attract more women
to join this industry.
They may feel that
this is not a very isolated
job or
a programming thing.
They may feel
that it is more welcoming.
They may feel that
they can get some support
from their colleagues.
My research goal is to
hope to learn
computational thinking
through the cooperation
between students.
It's like bridging the research gap
that everyone has been doing
individually.
Oh, a good question.
Hong Yi-Chi asked
whether the closed gender gap
is effective at all ages.
The study I quoted
was done by adults
only.
She asked
some women
and their environment.
The result was that
adults felt that
it was easier for women
to join the cooperation.
This research is also a good point.
This is what I want to do
in the future.
If it's a collaboration,
the younger students
will have the same result.
This is a good research direction.
Finally, I want to extend
the current
computational thinking framework.
As you can see,
CS standards are
focused on individuals.
How do you reach this level?
I want to push it into
a team effort.
This is my
research perspective.
I have a computational thinking
framework,
K-12 CS education,
and collaborative design activity.
These are
the pieces
that I stand in the middle.
This is me.
It seems like I'm a little over time.
I'll try to finish
in 10 minutes.
You can ask questions.
My framework
is based on
the computational thinking
that I just explained.
You might want to know
how to measure
and do research.
This framework provides
a big direction.
There are three types of
computational thinking.
One is concept,
which is the so-called loops
or events.
There is also parallelism,
which means
you can observe
what you are doing.
For example,
I'm doing testing
or debugging.
Perspective is more like
how you interpret
computational thinking.
How do you interpret
computational thinking?
For example,
what do you think of CS?
What do you think of programming?
This is the direction.
My research focuses on
the first two.
How do children
in the team
apply these concepts?
How do they
observe
what they are doing?
These practices
I just mentioned
can be observed.
Computational thinking
consists of four types.
Experimenting or iterating.
Testing or debugging.
Algorithm building
Abstracting or modulizing.
Why do I have a
quote on the right?
These are
high-level practices.
For example,
how do children
experiment or iterate?
How do they test
what they are doing?
Algorithm building
is a high-level practice.
It's the same as
abstracting or modulizing.
It's hard to observe.
This is just a heads-up.
Next,
I'll provide
my research direction
and context.
My overarching question
is how do students
learn computational thinking
in the team?
Collaborative design activity
refers to
how they
co-design their projects
on this platform.
My setting is
a public school in Indiana.
I designed
a five-week course invitation
with the teacher.
I went to the school
and collected five-week data
in an intro
of programming course.
There were 12 students.
This is a training course,
so there were not many students.
There were 14 students in total,
but 12 students were my focus group.
I collected the data of these 12 students.
There were three people in one group.
There were four groups in total.
My context tool is
Scratch, which I just introduced.
I collected the data
of these four groups of students
in each group.
There were five different Scratch projects,
so I collected them all.
I also recorded
how they did it.
I will explain
what the video looks like in the next chapter.
There was also an intermittent
screen recording.
Because of school restrictions,
I could not record their screen all the time.
But I had an iPad,
so several undergrad students
helped me collect the data.
I collected the screen of
their front and back.
The direction of my analysis
is from the front and back,
as well as the video of
my qualitative code.
I recorded what they did
every 10 seconds
and whether they were engaged
in this computational thinking.
This is
what my classroom looks like.
This is the blackboard.
There are two groups here,
two people in each group.
The rest are three people in each group.
The red line represents
the number of girls.
Gender is spread out,
so there is a girl in each group.
There is a 360-degree camera
in the classroom.
I made the camera stick
by myself.
It looks like this.
You may not be used to it at first,
but this is the view of the camera.
There are three students here.
There are three people in each group.
This is the teacher.
There are three people in each group.
The way I analyze
is that
these are all students.
I have renamed them.
These are Meg, Lucas, and Ted.
Because of the time,
I will not explain much.
However,
every 10 seconds,
I will capture what they said
and transcribe it.
Then identify
if they did this practice.
Practice is what I just said.
E is experimenting or iterating.
They may be
from this time
to this time,
about 9 minutes.
They have been thinking
about whether to add this
sprite.
After I add it,
what should I change?
They have been discussing
and there is no complete answer.
They don't know what to do.
So they are all
at the forefront.
They are not very deep into this problem.
Until about 2 minutes later,
they found that
something was missing.
Then they started to test and debug this problem.
Then this thing moved to
algorithm building and modularizing.
This thinking.
So I will show you
what my data looks like.
So every 10 seconds,
I will capture what they did.
This is in practice.
So next,
I will use performance
and practice.
In education,
we usually do research
in learning sciences.
How do we know if students really learned
algorithmic thinking?
I give them a pre-test and a post-test.
So I gave them a test
before 5 weeks.
See if they have grown.
That means they have improved.
So in learning,
the result is very important.
But the process is also very important.
The process is very tricky.
It's hard to capture.
But in my dissertation,
I tried to use
the result and the process
to explain algorithmic thinking.
What is it?
How do students learn?
So in performance,
I gave them a pre-test and a post-test.
Basically,
they have improved.
In team learning,
in these 5 weeks,
they have improved statistically.
That means
in this learning,
their algorithmic thinking
has improved.
This is one example.
This is the same group.
They are in pre-test and post-test.
One of the projects.
One of the problems.
In the beginning,
the way to solve the problem is very straightforward.
You can see
what they did in the beginning.
There are many bugs.
I won't talk about it.
Many of them can't reach
the goal of this test.
But after the post-test,
I didn't give them any hints.
I just gave them questions.
Let them finish this small project.
You can see
the trigger.
It means
parallelism.
Other things will happen at the same time.
This is very important
in CT.
It can show
the player
or learner can receive
a higher level of thinking.
A proof.
As for the process,
it's very tricky.
You may think
it's easy.
But it's not.
I focused on
one group.
This is
the result of pre-test and post-test.
There are 4 groups.
You can see them.
How can I prove
they learned
or applied?
You can imagine
a timeline.
From left to right.
You can see
Lion
took the longest time
to finish.
10 seconds for each group.
1330 seconds for this group.
16 minutes.
20 minutes.
Lion took
the longest time.
20 minutes.
This is the pre-test.
You can see
each group
has different practice.
Blue represents
experimenting or iterating.
Green, yellow, pink
represent different practice.
If this group
doesn't do practice,
it can't do
every second.
It can't do
nothing.
It's black.
If it did
more than 2 practice
it's red.
This picture
looks complicated.
But you can see
the length of black
and its weight.
You can see
most groups
have a lot of black.
They didn't do practice.
If they didn't do practice,
you can see
it's off-text.
But they usually
didn't do
deep computation.
In post-test,
there's a lot of black.
They
did the same practice
consecutively.
They didn't do
blue, yellow, green,
or red.
They did experimenting.
I did abstracting
for 30 seconds.
But I did experimenting.
You can see pink.
I said algorithm building
is a high-level
computational thinking.
In post-test,
you can see they used
a lot of algorithm building.
OK.
In addition to
learning process and result,
I want to talk about
5-week class implementation.
In class design,
what can
I do?
I switch to
the teacher's role.
There are 4 practices.
This is 5-week data.
I followed
one group.
Lion, Tiger,
Bear, Cat.
Tiger.
You can see
what practices
and when they used
in 5-week class.
The main practices
are these 4.
In this class,
students get a working sheet.
They start planning
what they want to do.
They move on to coding.
You can see planning and coding
are intertwined.
It's hard to tell.
I give you a piece of paper.
You draw on it.
It's not reasonable.
Planning and coding
are in the same group.
They do the project together.
They need to discuss
what the project should look like.
What should I do?
After this stage,
there is a peer review.
They have a feedback sheet.
These 4 groups
give feedback to each other.
After getting feedback,
they revise the project.
The whole process
is 5-week project.
There are 5 projects
in a week.
They went through this process 5 times.
Planning, coding, revising.
It's repeated.
The total time
is here.
The data I analyzed
is 6.3 hours.
They are working together.
Sometimes,
they are not focusing.
I don't count these.
The data is 6.3 hours.
The graph on the right
shows the ratio
of these 4 practices
in 6.3 hours.
The blue and green
are common practices.
They spend a lot of time
discussing
what to put
and what to do.
The red is
the second time
debugging and testing.
These are the others.
You may ask
it's obvious.
Why do this?
When do they do
testing and experimenting?
This can be
connected with teaching.
When do you
give feedback to students?
When do you know
they are doing this?
This is
a time series example.
Planning and coding
are revising.
This is a segment.
It's 60 minutes per class.
I use 20 minutes
to explain.
There are 6 segments
in 1 minute.
A segment is 10 seconds.
A bigger one
is 30 seconds in a row.
There are 6 segments
in total.
The blue one
is from start to finish.
The 20-minute segment
spends a lot of time
experimenting and iterating
their ideas.
There are abstracting
and modularizing.
Algorithm building
doesn't happen completely.
It happens a little bit,
but not at the beginning.
It happens a lot
when revising.
This tells us
students need to spend
more time
to learn
at a higher level.
If you are a teacher
who is in a hurry,
for example,
it's hard to
reach the level
students want
in a team.
The stage of revising
is testing or debugging.
Students spend a lot of time
on this green bar.
They spend a lot of time
on testing or debugging.
As a teacher,
you can know
how to emphasize
the deeper level
when revising.
Do I have some
deep insights?
I can see
when they overlap.
Why do they overlap?
What did they do?
These are the
things you can discuss
in depth.
You can provide
a pattern to the teacher.
How do you apply
this pattern
to your teaching
and teaching plan?
There are too many things
to talk about.
I'm already over time.
Next,
I'd like to talk about
the main
elements and results.
As you can see,
it's a bit
complicated.
There are two main concepts.
I'd like to explain
the concept of
computational thinking
and the behavior
that can be observed.
How to assess
students' learning
is still a concept.
Do students learn
from this concept?
I'd like to start
from the perspective of practice.
What students do
can reflect
the concept of
computational thinking.
No one has
combined these concepts yet.
But what you think
and what you do
is not new in education.
Computational thinking
can be a breakthrough
in the future.
Next,
I'd like to talk about
the assessment
and how to improve
students' learning.
I'd like to
talk about
how to assess
students' learning
and practice
instead of
just giving them
a bunch of choices.
Finally,
I'd like to talk about
the ability of
computational thinking
not only for one person.
When you study in a group,
you can see
what I said
and who gave me
which opinion.
They are co-constructing
the experience and ability
of computational thinking.
They learn as a group
Next,
I'd like to talk about
the role of each student
in the learning
and cooperation.
What's the role of
each student
in the learning
of computational thinking?
For example,
one of the students
is the leader of the group.
How does he lead
and how does he do
computational thinking?
And how does
social behavior
intertwine with
computational thinking?
These are
the general direction
I'd like to focus on.
I'd like to focus on
the role of each student
in the group
and then discuss it
as a group.
Thank you.
Over time,
I won't talk too much.
Thank you for listening.
If you have any questions,
feel free to ask.
Thank you,
Joey, for sharing
your research.
Let's start
the Q&A.
I see a question.
Lin Hui has a question.
She'd like to ask
about Scratch
in Taiwan
and the students'
and teachers' reactions.
Is there a teacher
from Taiwan?
Personally,
I went to Taiwan last year
to attend a conference
on computer science education
in Kenting.
What I learned
was that Scratch
was widely used
in elementary school
in Taiwan
when I was
in the 6th grade.
You can start
the Q&A.
The way I see it,
it's very much
about programming.
I want kids to learn
programming.
Besides programming,
I don't care
about their artistic development
or creativity.
It's a little bit
against Scratch Team's
original intention.
Scratch Design Team
is one of
my current advisors.
I'm one of
the students
of our advisor.
So I continued
his original design.
That's what I heard.
I'm not sure if there are
Taiwanese students here.
What I know is that
the Ministry of Education
came up with a budget planning
in 2016.
This year,
they've been pushing
the budget planning
to the middle school level.
You can start
the Q&A.
Welcome to listen to your voice.
Another question is
if there is any difference
between individual project
and team learning
and the effect.
I think I need
to talk to
Ms. Hong.
I think this is a good question.
Why didn't I
do the research
on team learning?
The reason is
you don't need to compare.
No matter
whether it's programming,
individual learning
is always better than
team learning.
If I want to teach
a science concept today,
if I teach science
in a team,
if I test the results,
individual learning is always better.
You may find that
you need to focus
on learning.
The test is
your unique ability.
It saves time
if you learn by yourself.
Why is team learning important?
It can discuss
the application of
social skills
and learning.
The content knowledge
of the subject
will save time.
But the idea
is deeper
and broader
than learning by yourself.
I think the learning effect
can be seen
in 5 weeks
or in a short time.
Individual learning
is better.
But education depends on the long run.
In the long run,
what impact
individual learning has
has a lot to do with
new experience.
I argue that
in a team,
they can learn
what individuals can't.
To prove the value
of teamwork.
Thank you for your question.
I think it's important.
Is there any research?
Yes.
I can forward it to you.
Individual, indirect,
and complete cooperation.
The result is
what I just said.
Individual is better.
But in the long run,
team is better.
Hi, Joy. I'm Yoga.
Hi.
I can continue.
My question is a bit long.
I can type.
My main question is
to sum up
your computational thinking.
It's like
teaching students.
We cooperate
and use the same language
to solve a specific problem.
Is this
a process of
helping students
to socialize?
I have this question.
This is my main question.
I have this question.
It's like
your computational thinking
is different from
those of
computer science majors
or
seniors.
I guess
it's quite different.
I guess
it's quite different.
For K-12
or
junior high school students,
for K-12 or junior high school students,
we have an open course.
It's called
Computer Science Anyway.
It's a brand new course.
Although computer science has been developed
for 60 or 70 years,
it's a brand new course
for medical education.
it's a brand new course for medical education.
Although we have
a lot of materials,
a lot of materials,
such as textbooks,
such as textbooks,
these teaching methods
may not be suitable
for junior high school students.
So you want to
develop a set of
teaching methods suitable for junior high school students,
and a set of
ways to test
whether they really
learn something from it.
So this is
what your computational thinking
aims at.
Am I right?
Yes, to answer
your definition of CT.
The researchers
in this framework are all
from CS.
But you know,
they may have different opinions
in the same discipline.
I just showed you the round one.
I'm in the middle
and broad.
Computational thinking
needs to be completed under programming.
It only has a
beneficial definition for CS.
So I'm happy
if you have different opinions,
I'd like to hear
what your research
is doing.
If you are an educator,
how would you interpret it?
The second question,
I think it's right,
but there are too many developments.
We are still discussing
what computational thinking is.
The assessment
is a very
big topic.
A lot of NSF funding
focuses on the assessment.
So I dare not say
my research has reached the assessment.
Because I'm not
studying students'
ability to learn in the end.
In the process,
how can we reflect the current evaluation?
In the current evaluation,
most of the tests
are choice questions.
It's not a project-based
test.
This is a
very different field.
My theme
is to provide
a different idea
to the current field.
I've been emphasizing
collaboration is very important in CS.
But as for
how to apply
collaboration
in K-12,
this is a completely
different topic.
I've been saying this is very important,
but there is no research
or teacher who wants to try.
But I have to say,
it's a bit like digging a hole for yourself to jump.
In research,
we dig a hole for ourselves to jump
or get along with
ourselves in the hole.
It's very complicated.
What I've done so far
is just the beginning.
As for the question
you just mentioned,
is it really better to
learn in collaboration?
Is it really good for the student's
content knowledge?
Or is it better for the student's
other skills and
interpretation of the field?
These are all things that can be
studied and discussed in depth.
What I hope to provide is
a process of
looking at their
computational thinking
to reflect on
how I can improve
the design of
this course
to facilitate
collaborative learning.
I'm still studying
student learning,
but I hope to provide
some practical
help in the design of the course.
As for the assessment,
I can provide you
a paper that is
specifically for CT
assessment research.
You just mentioned
the so-called
collaborative learning.
I have a question.
What I heard
when I was listening
is that
we need to train students
to learn how to collaborate.
Collaborative learning is like
three or five people
studying a problem
and discussing it together.
This is collaborative learning.
The meaning of
collaborative learning is
that the three of us
learn a language together.
When someone writes a plan,
I can write it down
in this language.
This language can be
used by three or four people.
It can also be used by
a computer or other people
who have learned this language.
In the process,
three or five people
need to collaborate.
They just need to read the script
and know how to play the role.
This is the first question
about the process of
socialization.
Socialization is also
a process of learning
that provides a set of
basic languages,
such as sequence, loop,
and judgement.
This language structure
allows everyone
to complete a task
according to a script.
I said that
this is a process of
socialization.
Is this what you mean?
I think what you said
is a bit like what ESPAN
is talking about now.
What I see now is
how I learn
computational thinking
in the process of
team cooperation.
Just like what you said,
how do I learn
the concept of sequence?
I'm not just learning
by myself,
I'm learning
the concept of
the use of sequence
in a team.
I think it can be added
to a layer.
Collaborative
computational thinking
means that
you can design
a task
according to
your team.
This is a way of
cooperation,
not computational thinking.
Does this make sense?
Okay, thank you.
I got it.
Got it.
Stephen, can you
turn on the microphone?
It's okay if you don't.
Oh, hi.
I'd like to ask
when do you
recommend
elementary school students
to start learning
computational thinking?
Oh,
that's a good question.
When?
I think
I can go back to
the tour I just introduced.
For example,
Blocky and Scratch
were designed for
6-year-olds.
When you can start
learning,
you can start
developing
tangible programming.
It's especially for
2-3-year-olds.
When you're still
holding and exploring
the world,
you can
design a soft
thing.
When you connect
two things,
one of them will light up.
I'd say
most of my research is
on how to
promote
computational thinking
and programming.
I think
computational thinking
is beyond programming.
You can think
like a computer scientist
instead of
become a computer scientist.
Computational thinking
is based on CS.
When you connect
two things,
it looks like a hand,
but you can think
about the logic of coding.
If I connect
these two things,
the light bulb will light up.
For children,
many things
are developed
through
touching.
For example,
we train children
to react
to stimulations.
There are more and more
early-stage tools
to do this.
It's not just pressing
to sing.
When you
combine two things
into a complex pattern,
it will move
or sing a song.
When
you have
this resource,
it's free.
You can
let children
touch these things.
I don't think
it's a perfect age.
If you want to know more,
do you suggest
students
to learn this at school
or parents
to let children
learn this at school?
At school,
the US system
is based on
the state-by-state.
Indiana must have
CS this year.
I don't have
a complete opinion.
I think everyone is pushing
to get better as soon as possible.
I just mentioned
the world of AI.
I think everyone
will start to learn CS.
In Taiwan,
some primary schools
have already started to teach CS.
Thank you.
Thank you for your
questions.
We have two more
questions.
Thank you.
It's already 11.30
now.
I want to ask
a question.
Does computing
thinking
have anything
to do with math?
For example,
is it because
primary schools
are starting to teach
math?
Or does it have
nothing to do with math?
Are you talking about
the US or Taiwan?
I think
the US and Taiwan
are not limited to
general teaching.
Math and
computing thinking
are
a good
direction.
I don't think
math and
computing thinking
have anything to do
with science.
I just mentioned
that CS teachers
are very short.
Very few people
become a teacher
because of
CS.
In professional training,
CS teachers are
very short.
I haven't heard
this concept
being incorporated
into math.
But I think
we can find
a pattern.
For example,
we have to see
how computation
develops.
I don't see
anyone
doing overlap
between math and
computing thinking.
It depends on how
computing thinking
is applied in
different subjects
and contexts.
So far,
no one has
discussed
the overlap
between math and
computing thinking.
Are you in math?
Yes, if you're interested,
I think it's worth
doing.
If you can think of
a way to overlap
math and computing
thinking,
it would be a good
transition.
I see people
combining math and
computing thinking.
But if we can
find a way to
combine math and
computing thinking,
it would be a good
transition.
Thank you.
You're welcome.
Let's open
the last question.
Anyone?
If not,
please stay on
the platform
after the presentation.
I will
stop the recording
now.
Thank you.
