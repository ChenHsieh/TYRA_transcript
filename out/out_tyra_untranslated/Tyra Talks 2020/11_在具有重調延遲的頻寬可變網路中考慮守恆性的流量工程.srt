1
00:00:00,000 --> 00:00:28,640
哈囉,大家好,歡迎大家來到今天的TarTalk,我是今天的主持人張雁勇,那我們今天非常榮幸請到我學校同學的同事,曾世豪博士來跟我們講他今天關於網路研究的題目,題目是在具有重調延遲的頻寬可變網路中考慮守恆性的流量工程。

2
00:00:28,640 --> 00:00:49,920
我現在來介紹一下世豪,世豪大學的時候是在臺灣臺大念的是電機系,後來去Cornell念了電機與電腦工程的博士,拿到博士之後他來到了Caltech,

3
00:00:50,000 --> 00:01:02,920
他現在是在Mathematical Science,然後底下的Engineering and Applied Science,做網路相關的博士後研究。

4
00:01:05,920 --> 00:01:08,320
那我們就把演講的時間交給世豪。

5
00:01:09,320 --> 00:01:13,320
謝謝雁勇的介紹,歡迎大家來。

6
00:01:14,320 --> 00:01:32,320
這個題目其實有點長,而且有點難理解,不過因為之前雁勇邀請我演講的時候,我就想說既然是要演講,不然講一個跟我研究實際相關的主題,所以我就把我去年投的ICMP的paper拿來講。

7
00:01:32,320 --> 00:01:40,320
今天我會盡量講的比較簡易一點,雖然說這個題目看起來很硬,不過大家應該不用太擔心。

8
00:01:41,320 --> 00:01:53,320
它的英文標題其實是Perseverance-Aware Traffic Engineering in Rate Adaptive Networks with Reconfiguration Delay,所以說我只是把這個英文標題照著翻成中文而已。

9
00:01:54,320 --> 00:01:58,320
至於這個每個名詞是什麼意思,我們就等一下慢慢看。

10
00:01:59,320 --> 00:02:05,320
大家如果中間有什麼問題的話,歡迎隨時打斷我,問我問題,沒有什麼關係。

11
00:02:06,320 --> 00:02:28,320
題外話是說這個Computing and Mathematical Science,應該說Caltech它有一個特別的系統,這個東西其實是在engineering的下面,雖然說系是engineering,department好像在它下面,好像也有一個division跟department的關係不太一樣,不過其實不是很重要。

12
00:02:29,320 --> 00:02:32,320
為什麼我們要研究這樣的主題?

13
00:02:33,320 --> 00:02:38,320
我研究的主題主要就是網路。網路是什麼?網路其實就是一堆東西連在一起。

14
00:02:39,320 --> 00:02:41,320
為什麼我們要把一堆東西連在一起?

15
00:02:41,320 --> 00:02:49,320
基本上我們想要互通有無,我們送一些東西、送一些資訊從網路的一端,我們希望在另一端拿到這個資訊。

16
00:02:50,320 --> 00:02:59,320
或者說我們要送一些物流的網路,比如說我們想要把水果從嘉義運到台北,這是一種網路。

17
00:03:00,320 --> 00:03:09,320
其實我研究的大部分來講,我們是研究資訊的網路,也就是說研究電子產品或是電子設備之間用電子訊號溝通的網路。

18
00:03:10,320 --> 00:03:17,320
這些網路通常是怎麼被傳送的?就是說這些資訊是怎麼在網路中間被傳送的?

19
00:03:18,320 --> 00:03:31,320
通常比如說我們會有個人的設備,比如說今天大家來聽這個演講也是一樣,我們可能會用電腦或是我們會用平板或手機,我們會連到網路上。

20
00:03:31,320 --> 00:03:39,320
所謂連到網路上是什麼意思?其實我們是送一個資訊到一個叫做交換器,Router的地方。

21
00:03:40,320 --> 00:03:52,320
這個Router有時候也是有無線交換器,比如說AP這種東西,Access Point,這個是給無線網路用的,有時候你也會用基地台來接收這些東西。

22
00:03:53,320 --> 00:04:08,320
這些端點接收到訊息之後,他們就會用交換器送過一個空間,我們就會在這個空間的另外一側,可能別的人用別的裝置就會拿到這個資訊。

23
00:04:09,320 --> 00:04:11,320
這就是基本上整個網路是怎麼運作的。

24
00:04:12,320 --> 00:04:26,320
在這樣的情形之下,其實我們就可以,因為我們用了交換器來連接很多個不同的設備,我們就有可能說我們把我們的資訊從某個交換器進去,然後去另外一個地方拿別的東西過來。

25
00:04:27,320 --> 00:04:34,320
我們不是很需要說為了拿到某一個特定的東西,我們就非得跟他建立點對點的連結。

26
00:04:35,320 --> 00:04:46,320
而這個其實是蠻重要的,在早期的時候,網路其實是有點像電話線,我們那時候有接線繩,就是說我們兩個人想要溝通的時候,我一定要中間有一條線,專門的給我們溝通。

27
00:04:47,320 --> 00:05:01,320
可是今天網路不需要,就是說今天網路其實是把很多的不同的流量,用各種方式,用這種交換器把它一節一節的送到我們的target destination。

28
00:05:01,320 --> 00:05:17,320
這些端點可以是各種東西,比如說你可以是所謂的雲端,就是說一個在遠端的伺服器,或者說是我們跟別人在打game的時候,我們可能有伺服器,我們可能也會接收到別人那邊傳來的訊息或什麼。

29
00:05:18,320 --> 00:05:24,320
比如說最近很紅的5G網路,其實就是在講無線端點這邊的通訊。

30
00:05:25,320 --> 00:05:37,320
那很顯然的,不管我們要怎麼樣去取得遠端的資訊,我們都要透過中間這些交換器,或者是透過中間這個網路來幫我們把資訊從一端傳到另一端。

31
00:05:38,320 --> 00:05:47,320
所以說就算我們現在有5G,5G很快的意思是說,5G從我們的無線裝置到我們的基地台很快。

32
00:05:48,320 --> 00:05:52,320
可是到基地台很快之後,你不管要做什麼事情,你還是要經過中間這段網路來幫你。

33
00:05:52,320 --> 00:06:01,320
所以這段網路就是我們做我的網路研究主題的主要的focus,那這個叫做廣域網路。

34
00:06:02,320 --> 00:06:09,320
廣域網路就是說,我們在兩個端點之間其實是有很大的空間上的距離。

35
00:06:09,320 --> 00:06:21,320
與之相對的,如果我們只是在一個local的地方,那我們這就是LAN,就是local area network,比較局部性的。

36
00:06:22,320 --> 00:06:25,320
其實我拍照中很多就是局部性的這種網路。

37
00:06:26,320 --> 00:06:38,320
那廣域網路上有什麼問題呢?就是說這些廣域網路因為連接很遠的地方,所以說我們也知道其實我們用電訊號去傳東西,電其實是很容易消耗的東西。

38
00:06:39,320 --> 00:06:52,320
所以說我們要怎麼傳他們呢?我們就要用很特別的這種,我們絕對不能是用平常我們在插麵包板的那種電線,我們一定是用一種很特別的線來傳的。

39
00:06:53,320 --> 00:07:01,320
那我們要傳這些東西呢,我們就會從某個端點傳到另一邊去,那中間要有很特別的電線,那這其實是需要成本的。

40
00:07:01,320 --> 00:07:25,320
所以說,但這個成本其實有時候是justifiable,就是說它其實是可以被接受,如果說我要提供的服務可以讓我賺到更多錢,那我當然很願意去花很多錢去build這種很貴的,我們叫Links,你可以把它想成是中間這些線,然後來連接兩個很遠的地方。

41
00:07:26,320 --> 00:07:51,320
比如說有很多大公司都是這麼做的,像是微軟,或是像是Google,因為他們平常會提供一些雲端的服務,比如說你可能有時候用到Google Sheets,Google Gmail,或是Microsoft Hotmail,像這種東西,或是各種的他們不同的服務,YouTube這些東西,他們就是把資料存在世界的各個地方。

42
00:07:52,320 --> 00:08:16,320
那他們會讓你很快的可以拿到這些資料,他們就會去建立這個廣域網路,他們自己的廣域網路。那這有什麼好處呢?就是說如果你有這個廣域網路的話,我就可以有效的去調整說我要怎麼使用這些線路,那我可以有效的應用這些線路的話,我就更有機會減少我的成本,然後賺到比較多的錢,基本上是這樣。

43
00:08:17,320 --> 00:08:38,320
所以說現在的大部分的公司其實投資了很多在建立他們自己的網路,而不是純粹的使用一些比較傳統的Internet,比如說我們可能跟AT&T簽約,或是我們跟Taiwan Cable簽約,他們其實也是提供了網路,可是那個網路就不是在這些公司的控制之下。

44
00:08:38,320 --> 00:08:54,320
那這些網路有時候你就沒有辦法隨心所欲的調整你中間要怎麼樣使用你的連結,所以這些大公司通常會建構自己的網路,然後他們會自己去運作這些網路,來達到更高的效能。

45
00:08:55,320 --> 00:09:03,320
我們剛才也提到,網路在這麼遠的地方,他們中間這些線其實蠻特別的。那這些線是什麼樣的線呢?

46
00:09:03,320 --> 00:09:18,320
就是說它不是一般的纜線,當然也有,但是一般的纜線其實可以傳的量有限,然後它也比較貴。所以說大部分的時候我們是用比較便宜的、經濟價值比較高的纜線來傳。

47
00:09:18,320 --> 00:09:37,320
那它其實不是纜線,它是使用光學的方法傳訊號過光纖,所以光纖其實是比較便宜的。然後再來是光纖可以傳的資訊量很大,因為你用光嘛,相對於電訊號來說,那你就有各種不同的頻率啊什麼頻率,也可以使用。

48
00:09:37,320 --> 00:09:49,320
而且光的速度也蠻快的,還不需要使用電子訊號這樣先接收到,然後再傳。他們就是增強光的強度,然後就繼續傳了。所以說它其實有蠻多好處。

49
00:09:50,320 --> 00:10:05,320
所以說目前的這些大公司他們其實是使用,大部分來說他們會使用一些光纖來傳訊號傳的很遠,然後再把它到端點之後再轉成電訊號,然後我們再用電訊號溝通。

50
00:10:06,320 --> 00:10:21,320
那這些光纖其實,雖然說光纖相對於一般的銅纜線來說是更好,也就是說它經濟價值更高,但怎麼說在這種廣域網路上,不管是多麼便宜的東西,你要拉個幾百公里,你馬上就很貴了。

51
00:10:21,320 --> 00:10:33,320
所以說不管,而且你在維護上或者運作上其實都是不便宜的。所以說你在廣域網路上這些光纖呢,其實算是一種也是蠻貴的設備。

52
00:10:34,320 --> 00:10:50,320
那通常我們就不希望說我們的光纖不能用。那什麼叫做不能用?就是說光纖其實是要可以使用,那是表示說我的訊號要可以過這個光纖,就是說我過這個光纖之後我可以拿到訊號。

53
00:10:51,320 --> 00:11:07,320
那我們用一個簡單的例子在這邊看,我們要怎麼送一個訊號從一端送到另一端呢?你可以把它想像說我們在光纖的兩端呢,我們其實可以送,可以在它的這個頻率,我們把情緒想成一種白紙的話,我們就可以在白紙上畫一個點。

54
00:11:07,320 --> 00:11:20,320
然後我們把這張紙呢,透過光纖,光纖就會把這張紙傳到對面去,我就看這張紙的訊號是什麼。如果說對面的人可以解讀你的訊號呢,那表示你的訊號就成功的傳過去了。

55
00:11:21,320 --> 00:11:36,320
所以說我們用這個簡單的例子來看,假設我現在有一張大大的白紙,我可以把這張白紙送到對面去,那我可以先跟對面講好一個類似的暗號,如果你看到我打一個點在左邊的話,它就是0,打一個點在右邊的話就是1。

56
00:11:37,320 --> 00:11:48,320
那這樣的話,我們就可以用這個暗號來送資訊,你只要有0跟1的話,你就可以組出很多種不同的資訊的sequence。

57
00:11:49,320 --> 00:11:59,320
那問題是,這樣其實聽起來蠻美好的,那我們就一直傳這個,比如說我左邊、右邊、右邊、左邊、左右、右右之類的,那我們就很快就可以傳出訊號了,那不是很好嗎?

58
00:11:59,320 --> 00:12:13,320
但現實是什麼呢?現實是所有的訊號都伴隨著雜訊,就是說所有人在傳東西過去到對面的中間呢,都沒有這麼的美好的,都是中間一定會接受到一些電池訊號啦,或是光訊號的干擾。

59
00:12:13,320 --> 00:12:23,320
那我們今天在這個簡單例子說,假設我們有一個雜訊,它就是會把我原本在紙上畫的這個東西,比如說我畫這個點呢,它就把它左右shake一下。

60
00:12:24,320 --> 00:12:39,320
那到對面的時候,我們看起來就會,比如說我遭到shake的訊號,比如說像這樣,它稍微偏離了一點點,可是它還是大致上在左邊嘛,所以說在這個case中間我們就可以說,啊,這個其實還是0。

61
00:12:39,320 --> 00:12:46,320
我大概知道它就是0嘛,反正雖然有一點雜訊,但是大致上它就是在左邊的訊號,所以從我的暗號中我就知道它是0。

62
00:12:47,320 --> 00:12:59,320
那雜訊也有可能把你的訊號稍微往不同的方向甩,那你在這個case下,你大概也是蠻有信心的說,這個訊號其實是大概在左邊,所以它是0。

63
00:13:00,320 --> 00:13:10,320
可是如果說我今天給你一個像這樣的訊號呢,它到底在左邊呢?還是它在右邊呢?好像有點在左邊又有點在右邊,所以其實不太好判斷。

64
00:13:11,320 --> 00:13:20,320
那如果我們畫一條線,我們把原本左邊跟右邊分開來的那條線稍微畫出來,看,啊,它其實還是偏左的嘛,所以說我知道這個訊號大概還是0。

65
00:13:21,320 --> 00:13:30,320
可是有時候就是沒有這麼幸運,比如說這個雜訊其實很大,它一下就把我的訊號推得很右邊,那這時候你要怎麼知道它是0還是1呢?

66
00:13:31,320 --> 00:13:43,320
這時候我們可能會說,啊,你原本傳的訊號是1吧,可是事實上我原本傳的訊號是0嘛,所以說在這種狀況之下呢,我的訊號其實就等於是無法成功的送到我的對面。

67
00:13:44,320 --> 00:13:53,320
那也就是說在這種情形下,如果雜訊很大的時候,我其實沒有辦法成功的把我想要傳遞的訊息透過光纖送到對面去。

68
00:13:54,320 --> 00:14:02,320
所以在這種情形之下,那我們就說這個光纖其實不能用,因為你沒有辦法成功的把訊號送到對面去。

69
00:14:03,320 --> 00:14:17,320
那我們用一個例子來看看,如果說這種不能用的情形其實很少的話,那其實大概沒有什麼關係,比如說我可能一百萬次、一千萬次、一億次,我才發生一個很不幸的,我的訊號被解讀的情況。

70
00:14:18,320 --> 00:14:21,320
那我就是丟掉它,我可能就叫對面再重傳一次或怎麼樣,大概就沒什麼問題。

71
00:14:22,320 --> 00:14:33,320
那我們如果把這個兩個,比如說我要麼傳0或要麼傳1之後,受到雜訊的干擾的訊號稍微畫出來看一看,那比如說可能就會長得像這樣。

72
00:14:34,320 --> 00:14:46,320
就是說如果我送0的話呢,那我們用紅色來表示我送0的情形,那送0之後它可能會受到雜訊的干擾,那我在接收端看到的訊號可能就會長得像這樣,就是分散在各處。

73
00:14:47,320 --> 00:14:54,320
那同樣的如果我原本送1的時候,我原本送這個綠色訊號1,它可能也會受到雜訊的干擾而這樣子散開。

74
00:14:55,320 --> 00:15:06,320
可是即使是說像在這種情形中,雖然說我們可以看到說有些訊號它其實可能會被誤判嘛,但是大致上來講大部分的訊號我們都還是蠻能分辨的。

75
00:15:07,320 --> 00:15:14,320
那這種情形下我們這個光纖其實還是可以使用的,因為說大部分的訊號我們其實都沒有什麼問題,判斷上都沒有問題。

76
00:15:15,320 --> 00:15:27,320
可是如果說今天的情形是這樣子呢,就是說今天的情形這個雜訊把我的訊號散開的程度像這樣,那大部分的紅色跟綠色訊號其實都混在一起了,那這樣的話我就很容易誤判。

77
00:15:28,320 --> 00:15:35,320
那我即使一開始送的是1,那我有可能很大的機會被判斷成0,那我即使送的是0,我有很多機會被判斷成1。

78
00:15:36,320 --> 00:15:48,320
那在這種情形之下呢,你就很難說,你就無法使用這個光纖,因為它的雜訊就遠大於你訊號的能量。

79
00:15:49,320 --> 00:15:59,320
那這種情形之下我們就必須要把這兩個原本的0跟1再分開一點,那分開一點我們就有機會讓它們還可以被分辨。

80
00:16:00,320 --> 00:16:12,320
那那個時候你就會消耗更多的能量,或者說在這種情形之下,你有可能就達到你機器可以送的能量的每一次可以遞這個白紙的寬度,那你可能就說這個東西就不能用了。

81
00:16:13,320 --> 00:16:24,320
所以這就是信號它會受到雜訊信號的強度來導致說這個光纖到底是可以用還是不能用的。

82
00:16:26,320 --> 00:16:40,320
那當然有時候是這種比較不幸的情形,但其實更多時候我們是很幸運的,因為我們在運作光纖的時候,我們通常是把這兩個訊號分得很開,那這就是所謂比較保守的運作。

83
00:16:40,320 --> 00:17:01,320
那在這種情形之下雜訊其實沒有那麼多啊,那即使是含了雜訊之後,我們會看到這兩團東西其實都還是分得蠻開的,就是說我如果一開始給你0的時候,那我大致上我都沒有什麼問題可以很輕鬆的判斷說這是0,那同樣我也很輕鬆的知道說右邊這一團大概就是1。

84
00:17:02,320 --> 00:17:07,320
在這種情形之下,其實我們現在就會說啊,那這個光纖就可以用了,真的不錯。

85
00:17:08,320 --> 00:17:19,320
可是其實同一時間我們可以發現說這邊還有很多空白,就是說我們其實可以再把這張白紙用得更有效率一點,那我們該怎麼做呢?

86
00:17:19,320 --> 00:17:38,320
我們不只送0,我們可以送一些別的,我們可以再把這個白紙細分成四等份,那我們就說如果我看到最左邊這個點呢,那我其實要跟你講的00,我要看到最右邊就是講10,那同樣我們可以看到中間這幾個點呢,我就講01啊1。

87
00:17:38,320 --> 00:17:50,320
那如果說這個信號其實受到的雜訊干擾並不多的話,那其實我們就還是可以很成功的接收到這些信號,因為這些信號不管加了雜訊之後它還是大致上就在它原本的位置。

88
00:17:51,320 --> 00:18:01,320
那既然它大致上都在原本的位置上,我們就可以還是很輕鬆的判斷說如果我說看到今天有個信號在這邊,那我大概就知道沒有問題,它原本的信號其實就是0。

89
00:18:01,320 --> 00:18:16,320
所以說到底我們同一時間用一張白紙可以傳多少信號呢?它不只是跟這張白紙的大小有關係,它也跟它受到的雜訊干擾有關係。

90
00:18:16,320 --> 00:18:20,320
所以這就是所謂的Signal-to-Noise Ratio,SNR。

91
00:18:21,320 --> 00:18:30,320
我的白紙越大,那我就可以傳的訊息,我同一時間我就可以不只說0或1,我可以說00、01、101。

92
00:18:31,320 --> 00:18:36,320
那我的就表示說我同一時間可以送的訊息就變多了,那變多表示說我的頻寬就變高了。

93
00:18:37,320 --> 00:18:43,320
那這個SNR呢,當然同一時間如果你的雜訊很大的時候,那你能說的事情就變少了。

94
00:18:44,320 --> 00:18:51,320
因為雖然你的白紙很大,但是你受到的雜訊干擾也很多,所以說你同一時間可以收到的訊息量並沒有那麼的多。

95
00:18:52,320 --> 00:18:54,320
可以成功的在對面看到的訊息並沒有那麼多。

96
00:18:55,320 --> 00:18:59,320
那如果我們考慮到這個訊號的傳遞就像是這樣。

97
00:19:00,320 --> 00:19:05,320
我們從左邊如果要把訊號送到右邊,經由一條光線送到右邊呢,

98
00:19:06,320 --> 00:19:12,320
我們就可以想說我們的訊號有點像在一張白紙上,那我們就決定了我們彼此之間的暗號。

99
00:19:12,320 --> 00:19:18,320
就是說我如果看到最左邊,這叫00啊,這是10啊,00啊,01啊,11啊,10。

100
00:19:19,320 --> 00:19:22,320
像這種東西,這個叫做modulation,這叫調變。

101
00:19:23,320 --> 00:19:31,320
就是說調變的意思就是說調整你的變化跟著你的訊號的關係是什麼。

102
00:19:32,320 --> 00:19:36,320
那這個調變呢,這個modulation呢,如果對面也知道這個modulation,

103
00:19:37,320 --> 00:19:40,320
那你把訊號送過去之後,對面就可以解讀你的訊號。

104
00:19:40,320 --> 00:19:46,320
就有點像是我說最左邊的點就是00,那對面看到一個最左邊的點呢,我就說啊,這個就是00了。

105
00:19:47,320 --> 00:19:50,320
那這樣我們就可以把訊號從光線的一端送到另外一端。

106
00:19:51,320 --> 00:19:59,320
那當然事情是沒有這麼美好的,如果沒有任何的雜訊干擾那當然很好,我們其實是可以塞很多很多的點。

107
00:20:00,320 --> 00:20:03,320
但是因為有雜訊的關係呢,像我們剛才的例子上我們就看到說,

108
00:20:03,320 --> 00:20:12,320
因為雜訊呢,所以說我們其實看到訊號,在接收端這邊看到訊號都是有點不是原本的位置,它可能偏一點點。

109
00:20:13,320 --> 00:20:20,320
可是大致上來說,如果只要它偏的不是很多的話,那我們還是可以成功的知道它原本的訊號是長什麼樣子。

110
00:20:21,320 --> 00:20:25,320
如果看到訊號大概都在這一區,那我們就知道它原本就是這個點。

111
00:20:26,320 --> 00:20:28,320
那我們就可以去查我們的表,說啊,這就是00。

112
00:20:29,320 --> 00:20:36,320
那經過這樣子之後呢,我們可以其實不需要這些顏色來標明它。

113
00:20:37,320 --> 00:20:39,320
就是說,我的modulation其實就是什麼呢?

114
00:20:40,320 --> 00:20:48,320
就是我怎麼樣把這個白紙上呢,分成幾個不同的區域,然後我用每一個點呢,來代表一個訊號。

115
00:20:49,320 --> 00:20:54,320
那如果說我在對面呢,雜訊並沒有那麼多,我就可以說大概在這個區域內呢,都對應到這個點。

116
00:20:54,320 --> 00:20:56,320
那這個點就代表了一種訊號。

117
00:20:57,320 --> 00:21:01,320
所以這個我們一般叫做constellation,就是星座圖。

118
00:21:02,320 --> 00:21:07,320
就是說,如果我看到這個點呢,大概它訊號就是什麼?

119
00:21:08,320 --> 00:21:12,320
我們通常在接收端呢,我們會下一次判斷。

120
00:21:13,320 --> 00:21:17,320
就是經過雜訊之後呢,它到底這個訊號跟原本哪一個比較像?

121
00:21:18,320 --> 00:21:20,320
那我們就會解讀原本的訊號。

122
00:21:21,320 --> 00:21:29,320
那所以我們也可以看到說呢,這個noise其實會造成,noise的強度其實是跟我們的訊號的頻寬有關係。

123
00:21:30,320 --> 00:21:34,320
那我們有時候都說,為什麼我們可以說,我們今天買一條線來。

124
00:21:35,320 --> 00:21:39,320
然後這條線我們就說它的頻寬是10Gbps的線,或是我們說它是100Gbps的線。

125
00:21:40,320 --> 00:21:45,320
我們不是剛才才討論了那麼多說,其實這個線它的頻寬是跟雜訊有關係的。

126
00:21:45,320 --> 00:21:50,320
這個原因是因為呢,我們一般來講,我們都是用很保守的方式在運作這些線。

127
00:21:51,320 --> 00:21:55,320
這些線呢,它可能預期的自然界給你的雜訊大概就是怎麼樣?

128
00:21:56,320 --> 00:21:58,320
然後我們就會給一個很強烈的訊號,把它分得很開。

129
00:21:59,320 --> 00:22:03,320
這樣的話我們就可以保證說我們永遠可以在對面那邊還原。

130
00:22:04,320 --> 00:22:10,320
應該不能說保證,但是大部分的時間,譬如說10的6次方,或是10的7次方的case裡面,我們可能只會錯一次。

131
00:22:11,320 --> 00:22:15,320
那我們就說這個線呢,大概就有capacity上面。

132
00:22:16,320 --> 00:22:23,320
那我們其實在實際上傳訊號的時候,我們不是只有一張白紙,我們不是只有一維的。

133
00:22:24,320 --> 00:22:30,320
我們有時候會多維的,或是在這個case我們就用二維來表示,譬如說我有一個二維的訊號。

134
00:22:31,320 --> 00:22:36,320
我們同樣也會受到noise的干擾之後,這些訊號在接收端這邊呢,它會散開。

135
00:22:36,320 --> 00:22:42,320
但是在這種情形之下,我們還是可以看到說,它其實散開的程度不是很多嘛。

136
00:22:43,320 --> 00:22:48,320
就是說我們還是可以很清楚的分辨說,如果說這個訊號大概在這一區,那它原本的訊號就是這個。

137
00:22:49,320 --> 00:22:54,320
所以說它就是還是可以成功的把我們的訊號從一邊拉到另外一邊去。

138
00:22:55,320 --> 00:22:59,320
那二維、三維或多維的好處呢,就是說我們就可以擴大這張白紙嘛。

139
00:23:00,320 --> 00:23:04,320
所以我們就可以同一時間呢,用一張紙去說更多的事情。

140
00:23:04,320 --> 00:23:17,320
那所以說,我們剛才已經討論說,這個線的頻寬其實是跟它的訊號跟它的雜訊的比,叫訊雜比,是有很強烈的關聯。

141
00:23:18,320 --> 00:23:25,320
那一般來講呢,我們大部分時間就像我們剛才說的,我們這個線我們雖然說它是50Gbps啊,

142
00:23:26,320 --> 00:23:33,320
就是50乘以10的9次方的這個bit,每秒鐘可以送這麼多的bit。

143
00:23:34,320 --> 00:23:39,320
但其實大部分的時間,那是因為我們對雜訊的了解,就是說這個雜訊大概就是這麼多了。

144
00:23:40,320 --> 00:23:48,320
所以說我們就是把訊號分得很開,所以說我們都一定可以保證,大部分的情形之下,我們其實都是50Gbps的。

145
00:23:49,320 --> 00:23:55,320
那可是這個保守的運作,其實是在經濟層面來說並不是這麼的有效率。

146
00:23:56,320 --> 00:24:04,320
因為我花了大錢嘛,我去鋪了這個光線,可是我居然這麼大的一張白紙,我只能把訊號畫在很遠的地方。

147
00:24:05,320 --> 00:24:11,320
我為什麼不像剛才一樣,我們就是多用一下白紙這些還蠻空白的區域呢?

148
00:24:11,320 --> 00:24:20,320
所以說在2018年的時候就有一篇paper叫做RedOne這個東西,這個是微軟他們提出的一個system。

149
00:24:21,320 --> 00:24:29,320
這個system主要在講的事情就是我們剛才講的事情,如果說我已經有很多光線了,那反正我都全畫下去了,那它就是這張白紙任我畫。

150
00:24:30,320 --> 00:24:39,320
那如果大部分時間點我都發現這個noise其實並沒有那麼多的話,那我其實可以改變我的所謂的暗號,就是這個modulation。

151
00:24:40,320 --> 00:24:48,320
如果改變這個modulation呢,我同一時間我其實可以塞更多的訊息進到一張白紙送到對面去。

152
00:24:49,320 --> 00:24:56,320
所以這樣的話我就有效的提升了我的頻寬,所以雖然說我們還是接同一條光線,但我同一時間可以送更多的訊息。

153
00:24:57,320 --> 00:25:03,320
如果說這個訊號的雜訊其實並沒有那麼多的話,那我們就是就可以成功的提升我的頻寬了。

154
00:25:04,320 --> 00:25:15,320
主持人問問題,就是你現在在舉例,你都講比如說一張白紙上,所以你的variable基本上就是橫向跟縱向。

155
00:25:16,320 --> 00:25:23,320
可是實際上對光線而言,你可以講具體一點嗎?你的variable是什麼?頻率和frequency嗎?

156
00:25:24,320 --> 00:25:33,320
這是一種方法,那是一種調變的方法。但是我們今天在講的通常是指不同的頻率,我們有orthogonal的頻率。

157
00:25:34,320 --> 00:25:43,320
比如說你在一個光線中間,你可以打紅光跟綠光。它的amplitude,我們如果把這張白紙想像這邊有一個十字,它就是這個amplitude的大小。

158
00:25:44,320 --> 00:26:00,320
那如果我們是看這個橫軸好了,橫軸我們是用紅光好了,比如說我們把一個紅光這樣打過去,那我這個紅光的強度就代表我這個橫軸的大小。

159
00:26:01,320 --> 00:26:05,320
然後我同一時間我也打一個orthogonal的光,比如說我打綠光過去。

160
00:26:05,320 --> 00:26:12,320
紅跟綠光就會造成兩個軸,那這個綠光的強度就會造成第二個軸。

161
00:26:13,320 --> 00:26:27,320
所以說這個點是什麼意思呢?這個點的意思就是說,比如說我打一個紅光過去,然後它的強度是,比如說在這個case上我們講說這個寬度大概0.5好了,比如說0.5瓦特。

162
00:26:28,320 --> 00:26:37,320
比如說像這樣,我打一個0.5瓦特的紅光,然後同一時間我打,比如說我們找這個點好了,這個是0.5瓦特,這個是1.5瓦特。

163
00:26:38,320 --> 00:26:41,320
那就是1.5瓦特的綠光加上0.5瓦特的紅光。

164
00:26:42,320 --> 00:26:54,320
所以說所謂的這張白紙是什麼意思呢?更技術一點來說就是說,我把一些不同的頻率的光打到對面去,那我在對面這邊我就會把這些光分開來。

165
00:26:54,320 --> 00:27:07,320
然後我去看每個頻率上的光,它的強度是多少,那我就可以決定說我現在點是哪個點。這樣有回答到你的問題嗎?

166
00:27:12,320 --> 00:27:16,320
不知道這樣是不是,還是說還是不太清楚。

167
00:27:16,320 --> 00:27:22,320
我聽懂了,我聽懂了。

168
00:27:23,320 --> 00:27:33,320
我剛才想說是不是,還是我把我麥克風關掉。對,所以說所謂的白紙的意思就是這樣,就是說我們用很多不同顏色的色光,其實所謂的色光也不太對。

169
00:27:33,320 --> 00:27:41,320
我們應該講的是說用很多不同頻率的光,同時的通過這條光線,然後我們把它解開來,然後去做。

170
00:27:42,320 --> 00:27:58,320
那當然你剛才講這個頻率跟這個跟這個也是一種方法,那是在譬如說我們在講我們無線電波,有時候譬如說你聽廣播對不對,你還是可以聽到聽到一些,其實是廣播其實有點像是這樣。

171
00:27:59,320 --> 00:28:07,320
可是其實你舉的例子就是frequency跟amplitude啊,只是它是在,因為color其實就是frequency啊,然後watt其實就是amplitude。

172
00:28:08,320 --> 00:28:16,320
沒錯沒錯,我想要講的是說,我不是要強調這是可見光,它通常是,它通常跟可見光有什麼關聯,它就是一個電磁波這樣子。

173
00:28:17,320 --> 00:28:34,320
通常我會過光線的都是一些比較屬於可見光頻段的那些電磁波,因為其他的電磁波在光線這種介電長處下面它傳播的不遠,那這當然就跟材料有關。

174
00:28:35,320 --> 00:28:47,320
但整體來說,光線是一個非常的便宜的東西,因為它相對於電纜來說就是,因為大部分的光線是塑膠嘛,所以塑膠其實製作上是比較便宜。

175
00:28:49,320 --> 00:28:54,320
所以整體來說,我們就可以用各種不同的頻率的光去拼湊出這張所謂白紙。

176
00:28:55,320 --> 00:29:02,320
當然它還有很多技術細節,但是你也可以想像說,那為什麼我要拼白紙,我不能拼一個球嗎?我不能拼一個四維的東西嗎?當然是可以的。

177
00:29:03,320 --> 00:29:16,320
只要你的設備可以接受,所以這個星座圖有時候是,我們為什麼叫它星座圖是因為說,比如說你考慮一個三維的東西,它其實就是一堆點分佈在一整個空間中,就很像一堆星星在天上,所以它為什麼叫星座圖。

178
00:29:17,320 --> 00:29:24,320
所以對,沒有錯,就是說我們其實是用這樣來傳訊號,這樣來傳光線訊號。

179
00:29:26,320 --> 00:29:39,320
那我們現在有光線嘛,那我們可以用這種改變調變的方式來增加我們的頻寬,那當然前提是我們的訊號雜訊的程度並不能很高。

180
00:29:40,320 --> 00:29:51,320
這就是微軟他們提出的一個架構,或者說他們提出這樣的方法來讓他們之前已經建好的廣域網路可以被更有效率的利用。

181
00:29:52,320 --> 00:30:12,320
可是這個有一個缺點,也不是缺點,它是一個tradeoff,就是說,沒錯,我們剛才講的都很美好,就是說如果我們看到這些雜訊其實都分得很開的話,我們應該就可以用不同的星座圖來達到更好的頻寬。

182
00:30:13,320 --> 00:30:27,320
可是問題是說,你要重新讓兩邊用同一套暗號,這個事情是需要重新商量的,就是說我今天跟你講的暗號,我突然間改變暗號,你一定聽不懂,所以我一定要跟對面先商量好。

183
00:30:28,320 --> 00:30:31,320
這個叫reconfiguration,也就是重調,重新地調整你的調變。

184
00:30:32,320 --> 00:30:51,320
這個重調呢,它是有一個delay的,就是說這個重調,我跟你重新商量這個星座圖,然後到我們兩邊都同意了一個新的星座圖,這中間有一個時間,這一段時間,因為我們還沒有從舊暗號到新暗號,所以說我們中間是沒有辦法做事情的。

185
00:30:51,320 --> 00:31:00,320
就是說我傳出來的東西,我不知道我要用舊暗號解讀還是用新暗號解讀,還是說我們根本還不知道新暗號是什麼,所以說它就是有一個重調的延遲。

186
00:31:02,320 --> 00:31:09,320
雖然我可以在最後得到更高的頻寬,可是我要承受一段時間,我是不能用這個光線,也就是說我會損失我的頻寬。

187
00:31:10,320 --> 00:31:22,320
那這就是為什麼重調延遲會造成我們不能說很輕鬆,反正我今天看到雜訊很弱,我就重新調整。

188
00:31:23,320 --> 00:31:32,320
因為如此,如果我們突然間把這個線路重新調整,它的條邊,那這個線路突然間就斷掉了。

189
00:31:33,320 --> 00:31:43,320
那這個斷掉的線路,它就會造成原本在上面送的這些,比如說你原本的手機訊號,原本都是靠這個網路在送的,那你突然把它切掉,

190
00:31:43,320 --> 00:31:55,320
那你就會怎麼樣?你就會喪失你的信號,你就不能送東西了,你就會造成traffic disturbance,就是說你的手機流量就被大幅度的干擾,或者說被丟掉了。

191
00:31:56,320 --> 00:32:06,320
那這樣的話,使用者可能會抗議,比如說你可能就馬上打去AT&T或是打去Time Warner Cable說,網路怎麼變得那麼慢,或者說你的網路怎麼又斷了,就不能連上。

192
00:32:07,320 --> 00:32:18,320
對這些網路業者來說,這其實就是一種成本,所以我們要盡可能不要造成流量的干擾是比較好。

193
00:32:19,320 --> 00:32:28,320
那同一時間,我們又想要有更多的頻寬,這樣我們就可以serve更多的使用者,這也是這些網路公司的收入來源。

194
00:32:29,320 --> 00:32:38,320
那在RedOne這篇文章裡面,他就把這個東西叫做churn,churn就是說對這個路流量的干擾。

195
00:32:39,320 --> 00:32:54,320
他們想要做什麼呢?他們就想說,我們可以怎麼樣呢?我們可以把這個網路中,這些光纖如果受到比較弱的雜訊干擾的部分,我們就可以把它的頻寬調大一點。

196
00:32:54,320 --> 00:33:14,320
那同一時間我們要去考慮說,原本在這上面的這些流量大概有多少,那我們就想要找到一種方法去調這些links,這些線路,使得我們可以在最後達到很大的頻寬,而且中間我們又不會造成很多的干擾。

197
00:33:15,320 --> 00:33:33,320
所以這就是他們的調整的一個策略。他們的策略就是,我最後達到很多頻寬,而且我有一個參數叫做epsilon,這個epsilon叫tradeoff factor,來描述說我對於這個干擾,我可以接受的程度。

198
00:33:34,320 --> 00:33:59,320
那經過這樣調整呢,我就可以說,我中間可能會損失比如說10MB、20MB,當然不會那麼少,100GB的data,可是呢,可能我的未來我就可以送400GB的data,那我就可能覺得說,那還好嘛,我就是短時間損失一點,那但是長期來看,我還可以服務更多使用者。

199
00:34:00,320 --> 00:34:09,320
所以說,就算我現在被人投訴了,那也沒什麼關係,我之後可能可以賺到更多錢,所以整體來講,對我來講還是很划算。

200
00:34:09,320 --> 00:34:27,320
那就是他們提出的提案。那這個提案呢,其實還不錯嘛,就是說我可以不用建新的光纖,但我又可以得到更高的頻寬。那唯一要考慮的就是說,如果我已經在用這條光纖了,那我就要想辦法不要太干擾這條光纖。

201
00:34:28,320 --> 00:34:43,320
那這個是什麼意思呢?這個意思就是說,如果我有一些線路我要調整的話呢,我就是先切斷它們嘛,切斷它們,重新商量我們的modulation,商量我們的調變,然後在經過了重調延遲之後呢,我就會得到一個新的網路。

202
00:34:44,320 --> 00:34:55,320
那原本的網路可能頻寬比較少,那新的網路我們就可以有更多的頻寬。那中間我們就會suffer一個網路不能用的中間狀態。

203
00:34:56,320 --> 00:35:18,320
那可是這個調整方法呢,其實並不是那麼理想。為什麼呢?因為其實我們還是有更好的方法,比如說我們不要一次把全部的線路切斷啊,我們可以先切斷某一些線,然後我們把原本的網路上的其他的流量呢,導到這個還沒有被切斷的這些線上面來。

204
00:35:18,320 --> 00:35:33,320
然後等我們把這些線的調變都調好之後,我們再把原本這些被我們送到這些別的線路上的線呢,導到新的線,已經調好的線來,那我們再重新update這些其他的線。

205
00:35:34,320 --> 00:35:51,320
那藉由這樣子呢,我們就可以避免一下子把所有的traffic切斷這種事情。我們就可以慢慢地,雖然說每個網路流量可能會稍微地受到一點影響,但它的影響絕對沒有直接被切掉的影響來得這麼大。

206
00:35:52,320 --> 00:36:05,320
所以這個東西呢,就有點像他們以前的另外一個paper在講的事情,如果說我們想要改變這個流量的狀態的時候,我們應該要分次改變這個概念。

207
00:36:06,320 --> 00:36:08,320
multi-step的update。

208
00:36:09,320 --> 00:36:23,320
那所以說,如果說是我們可以看它的差別,如果說是我們用原本的這個提案,就是我們直接把它切掉,然後再把它復原,那我們可能會造成一個巨大的churn這件事情。

209
00:36:24,320 --> 00:36:37,320
那可是如果我們現在有好幾步的話,那我們到底要怎麼樣的每一步中間要怎麼做,才是我們最想要的那種做法呢?

210
00:36:38,320 --> 00:36:51,320
那我們這篇paper提出說,我們想要怎麼樣的update這個計畫呢?其實就是說,我在每一步中間盡量不要干擾那麼多的網路的流量。

211
00:36:52,320 --> 00:37:06,320
這個聽起來也是蠻直覺的,就是說如果說我今天可以走到我的最後想要的終點,而且中間每一步之間呢,我都不會讓我的原本網路上的流量斷掉。

212
00:37:06,320 --> 00:37:18,320
它可能只會損失一點,但是不會損失的太多。那對我來講,其實損失的越少就越好了。如果說最好的狀況就是說,我根本就不損失任何流量,我就可以到最後。

213
00:37:18,320 --> 00:37:32,320
那可是因為你要調整,你就非得有一些線不能用。所以說你一定會損失一點,但你不要損失的太多的話,那這個應該就是conceptually是一個比較好的調整的計畫。

214
00:37:33,320 --> 00:37:48,320
那我們把這個所謂不要損失太多這個概念叫做perseverance,就是所謂的守恆性。就是說,你這個流量呢,原本比如說1的話,那它可以保守,它可以不要損失到多少。

215
00:37:48,320 --> 00:38:10,320
它的損失可能會小於多少,那我們叫做perseverance level。那我們當然希望這個perseverance level是越高越好。就是說,perseverance原本是1嘛,那我剩下的最起碼要多少,比如說0.9、0.8,像是這樣。

216
00:38:10,320 --> 00:38:36,320
那我們最後想要的方案是什麼呢?我們的方案就變成說,我們想要盡快地走到終點,但是我們中間的每一步又不希望損失太多流量。那就變成了我們找這個所謂perseverance的位置,就是考慮守恆性的流量工程。考慮守恆性的流量工程的意思就是說,我想要走到最後,就是說我有很多頻寬可以使用的狀態上,可是我在中間這每一個step裡面,我都不想損失太多流量。

217
00:38:37,320 --> 00:38:54,320
那這就是我們所提出的,在這篇paper中間,我們想要做到的這個新的提案。那我們認為這個其實是比原本的這個churn-based的這個提案是好的,因為為什麼呢?因為在churn-based這個提案之間,你就是切斷了大部分的線路,所以說,你會遭到一個很大的損失。

218
00:38:54,320 --> 00:39:04,320
那這個其實就是所謂的perseverance level 0,就是說我在兩個step之間,我最多可以損失多少?我可以損失我全部的流量,全部流量都可以被切掉,那就是perseverance level 0。

219
00:39:04,320 --> 00:39:14,320
那但是呢,如果我們保持一個這個大一點的perseverance level,譬如說0.5的話,那我們就可以找到一個,譬如說,這個4.5的perseverance level 0。

220
00:39:14,320 --> 00:39:24,320
那但是呢,如果我們保持一個這個大一點的perseverance level,譬如說0.5的話,那我們就可以找到一個,譬如說,這個4.5的perseverance level 0。

221
00:39:24,320 --> 00:39:34,320
那但是呢,如果我們保持一個這個大一點的perseverance level,譬如說0.5的話,那我們就可以找到一個,譬如說,這個4.5的perseverance level 0。

222
00:39:35,320 --> 00:39:51,320
中間有兩個中間步驟的這個update plan,那在每一個plan中間呢,我最多損失一半的流量。譬如說,我原本,假設我的流量都是從左邊到最右邊,我的每一個線路都被用滿。

223
00:39:51,320 --> 00:40:07,320
那我在第一個step的時候,我把上面這條線的流量拉到下面來,然後把他們每一個都減成一半。那也就是說,我雖然損失了一半,但至少我的每一個流量都還是,我的每個網路流量都還是至少保有原本一半的這個網路流量。

224
00:40:08,320 --> 00:40:10,320
那在整個update過程中間。

225
00:40:10,320 --> 00:40:15,320
你可以回到上頁嗎?

226
00:40:17,320 --> 00:40:18,320
對,在上頁了。

227
00:40:18,320 --> 00:40:19,320
在上頁了。

228
00:40:22,320 --> 00:40:26,320
好,就是剛剛那個有一個好幾階的那個,改頁。

229
00:40:26,320 --> 00:40:27,320
就這個。

230
00:40:28,320 --> 00:40:46,320
有點lag,好,對對對,就是這頁。那個我不知道我這樣問是不是不是很practical,可是你show了,比如說一個step就是第一個版本,然後你們proposed unstep,然後下一個我想到的就是,那你為什麼不瘋狂無線條,讓它變成無限多的step,所以這個線就會變成一個smooth function。

231
00:40:46,320 --> 00:40:47,320
然後你現在。

232
00:40:47,320 --> 00:40:48,320
非常好的問題。

233
00:40:48,320 --> 00:40:53,320
你限制的問題不是一個step有多大,而是那個slope是多大這樣子。

234
00:40:53,320 --> 00:41:04,320
嗯,非常好的問題。這個問題為什麼做不到呢?應該說,呃,theoretically,這個很好嘛,對不對?但是什麼,但是每個step是什麼意思?每個step我至少要調一條線,對不對?

235
00:41:04,320 --> 00:41:12,320
但是因為網路是有限的線組成的嘛,也就是說你不可能有無限step,因為你每一次最少調一條線嘛。

236
00:41:13,320 --> 00:41:40,320
你最多就n條線給你調啊,所以你最多只有n step,對,所以不可能到n step,啊,問題就在這裡。然後再來是我們也不希望無限的無限的調,對,因為無限的調的一個壞處是什麼?就是說它很慢啊,比如說我我現在這個雜訊可能很好,所以我想要調到一個更好的狀態上,可是因為我在慢慢的調的中間雜訊變大了,那我就那我就沒有享受到任何事情,我還損失了一些頻寬。

237
00:41:40,320 --> 00:42:09,320
所以說這中間就有一個,這個我們想要盡可能讓這個過程越短越好,可是同時間我們又不希望這個過程呢,大量的干擾了這個網路的這個流量。所以這個問題非常好,為什麼不能呢?因為第一個,第一個是現實上做不到,那第二個是就算說我們去考慮一個無限多線路的網路好了,我們也不會希望這麼做,因為我們想要盡可能趕快到新的狀態上,以免現在的雜訊狀態改變。

238
00:42:10,320 --> 00:42:15,320
那我們才才有機會多傳一點,趁著現在雜訊很好的時候多傳一點。

239
00:42:16,320 --> 00:42:40,320
哦,了解了解,好,好,OK,OK,謝謝。這是非常非常好的問題。呃,所以對,所以呢,那人那就是,那接下來我們就問幾個問題嘛,我們把這個東西叫做re-adaptation planning problem,就是說我要怎麼樣調整這個就是調整這個可變網路的這個這個頻寬的計畫問題。

240
00:42:40,320 --> 00:42:58,320
我們要在,我們要,我們要幾步內做完啊,或怎麼做?那第一個問題就是說,OK,那那我們要,我們有辦法解這個問題嗎?就說我們可以,我們可以形塑這個問題,formulate這個問題沒有問題,可是問題是,問題是說我們有辦法解嗎?我們有沒有辦法真的把它解出來?

241
00:42:59,320 --> 00:43:16,320
那這個很遺憾,就是說這個問題是屬於一種很難的問題,叫做NP-hard的問題,這個在computer science裡面就屬於一種非常非常困難解的問題,那也就是說基本上很難完美的解決這個問題,就是說我們沒辦法找到最佳解。

242
00:43:17,320 --> 00:43:35,320
那可是,那一般來講我們就是說,好了,那你沒辦法在很短的時間內找到最佳解也沒有關係嘛,你給我一個還蠻不錯的解,那我也可以接受,對,那就是說,如果說我今天,雖然說我算的不是很準,可是大致上跟最佳的沒有什麼兩樣,那大概也沒什麼關係。

243
00:43:35,320 --> 00:43:54,320
那問題是,這個也不可行,就是說我們發現呢,這個問題實在太難了,就是說它不只你要找到最好的這個plan很難,它要能夠在很短的時間內被很近視的到這個最好的解也很難,對,那就很慘了。

244
00:43:54,320 --> 00:44:07,320
那當然我們最後就只能說,那我們有一些方法盡可能的去做,但是它是不是最好的,我們就沒有辦法說它是不是最好的,但至少我們可以用這個實驗結果去看一下它到底是不是還不錯。

245
00:44:08,320 --> 00:44:29,320
那我們另一個問題就是說,好啊,這個問題實在他媽的難,但是問題,我是不能講髒話還是什麼,實在是非常的難,但是這個,我盡量不要講這個,畢竟都是面向大眾的演講嘛,那總之呢,就是它這麼的難,但是它到底是難在哪裡啊?

246
00:44:29,320 --> 00:44:44,320
它的原因是為什麼?那原因是因為呢,我們一開始不是說,那我們就無限的調整就好了嘛,對不對,那如果這個是無限的調整,我們不要求它很快的就被解完的話,其實是可以解的,就是這個問題是可以被輕鬆的解掉的。

247
00:44:45,320 --> 00:45:02,320
可是它的缺點是什麼?缺點就是它有可能找到一個很久很久才會解完的這個plan,那最久是什麼?最久就是你把每一個link都調整一次嘛,對不對,所以就是最久是n次,那如果我們整個網路有n個link的話。

248
00:45:02,320 --> 00:45:23,320
但可是你通常不希望調得這麼久,因為你調得越久,你的這個雜訊的狀況可能改變啊,而且你中間又損失了頻寬啊,然後你又沒有享受到頻寬變好的好處,所以你是希望越短越好。那就是因為這個原因,所以造成這個問題實在非常的難解。

249
00:45:23,320 --> 00:45:35,320
但我們就知道另一件事情就是說,如果說我們最慘的狀況下,我們還是可以用一些好的heuristics去解它,然後大概其實還是可以得到還不錯的解。

250
00:45:36,320 --> 00:45:59,320
那只是說,如果我們要完美的解它的話,那就沒有辦法很快的解出來。那我們要怎麼樣叫做heuristics,其實我不太知道heuristics的中文是什麼,但它的意思就是說,它雖然不是一個完美的方法,但它是一個還蠻make sense的方法。

251
00:46:00,320 --> 00:46:21,320
那我們要怎麼樣設計這種heuristics呢?那最簡單的想法就是說,我們先找一個可行的,就是說我們現在網路的狀態是一個可以持續的一個狀態上面,然後從這個狀態出發呢,我們一步一步的去找說,我們下一步應該要update哪些link,那我們就一步一步去做。

252
00:46:21,320 --> 00:46:35,320
然後等到我們先確定說,我們整個計畫中我們要按什麼順序去update link之後呢,我們再一起把這個流量提升到我們可以用的最多的流量上面,那就是這個heuristics。

253
00:46:36,320 --> 00:46:51,320
那這個heuristics蠻簡單的,就是說我們現在可以走到這一步呢,盡可能踩著石頭過河,就是說我下一步可以不要損失那麼多頻寬,但是我又可以update越多link越好,那我就一步一步這樣走過去。

254
00:46:52,320 --> 00:47:07,320
那我們現在有heuristics的時候,我們就要問幾個問題,就是說,那我們有這個東西之後呢,如果我們這個提案是不是真的最後還是有對於網路的頻寬提升是有幫助的。

255
00:47:08,320 --> 00:47:22,320
第一個問題是,如果我們限制說我們每一個步驟中間不可以損失太多流量,我們會不會因此而根本就沒有辦法走到我們的終點,然後我們根本沒辦法enjoy這個頻寬變好的好處。

256
00:47:23,320 --> 00:47:40,320
第二個是說,如果說我們總是得損失,我們不要損失到0,那我們可以只要損失一點點的話,那這個損失一點點到底什麼是一個好的所謂損失一點點,就是說我損失到多少可以讓我得到一個很好的效能。

257
00:47:41,320 --> 00:47:44,320
那就是我們要怎麼determine這個perseverance level。

258
00:47:45,320 --> 00:47:56,320
再來是說,那我們這個提案到底有沒有真的把流量大幅被我們切斷這件事情,有沒有真的有避免這樣的事情發生。

259
00:47:57,320 --> 00:48:06,320
然後再來是說,我們這個東西,我們剛才說我們有heuristic嘛,那這個heuristic是很容易就可以算出來呢,還是其實很難算出來。

260
00:48:07,320 --> 00:48:20,320
如果它也很難算出來,那我們不是提了一個東西,然後我們要算老半天,比如說算個10分鐘,我們才可以update我們的link,結果我們的這個雜訊的狀況又改變,那我們根本就來不及,所以我們希望它很快就可以被算出來。

261
00:48:21,320 --> 00:48:33,320
那我們就做了一些實驗,我們先用了這個Microsoft的微軟這個SWAN這個網域網路,還有這個Google的B4這個網域網路,這兩個網域網路來做實驗。

262
00:48:34,320 --> 00:48:43,320
然後我們的Scan設計的那個heuristic我們叫它ALG,然後這個OPT我們就說它是最佳的解。

263
00:48:44,320 --> 00:48:56,320
那我們就去回答第一個問題,我們加了這個守恆性的這個條件之後,我們是不是還可以得到更好的頻寬?

264
00:48:57,320 --> 00:49:11,320
結論是可以,這個row equal to 1就是說,如果我們把這個守恆性叫做1,我們絕對不可以損失任何的頻寬,那就等於是我們基本上不要update我們的link。

265
00:49:12,320 --> 00:49:20,320
我們絕對不可以損失任何的網路流量的話,最簡單的方法就是我們都不要動,那就絕對不會損失任何流量了。

266
00:49:20,320 --> 00:49:33,320
那原本的這個總頻寬是像這樣子,最左邊這個column,那最右邊這個column是這個Microsoft他們提的那個方案,就是中間損失了,然後我最後可以達到最多是多少。

267
00:49:34,320 --> 00:49:52,320
我們可以看到說,雖然我們就算加了這個守恆性的限制之後,我們還是不管是最佳解還是我們的這個heuristic,他們其實最後都可以跟這個Microsoft提出的這個方案達到基本上一樣的效能。

268
00:49:53,320 --> 00:50:09,320
基本上是一樣的。也就是說,雖然我們有守恆性限制,我們比這個Microsoft的原本提案要更平滑一些,可是我們也沒有因此就不能達到最好的這個頻寬,事實上我們還是達到了很好的頻寬,事實上就是跟Microsoft沒兩樣的頻寬。

269
00:50:10,320 --> 00:50:23,320
所以這個第一個問題就這樣被回答了。那第二個問題是說,那我們應該要設什麼樣的數字來當我們的perseverance level,就是我們可以接受怎麼樣的損失。

270
00:50:24,320 --> 00:50:48,320
那我們可以看到說,這第二張圖畫的是什麼?就是說我們update的過程,總頻寬上升的過程。如果說我們一開始是用一個0.5的perseverance,就是守恆性0.5,就是說我可以接受我只剩下0.5,那這個當然就是我們就給了這個system operator很大的空間去調整這些線路,所以我們很快就可以達到我們最後的頻寬。

271
00:50:48,320 --> 00:51:07,320
那當然如果我願意接受的損失越少,也就是說我要求的守恆性限制越高的話,那我每一次能夠update的link就越少,因為我如果切斷很多link,我就沒有辦法保證說我原本這些網路流量還是可以送到,還是可以送到譬如說原本的0.9的程度。

272
00:51:08,320 --> 00:51:20,320
所以說它就會比較慢,那這就需要更多step才達到最後的頻寬。所以越高的守恆性限制,那當然就會越慢。

273
00:51:20,320 --> 00:51:47,320
那我們就會問說,那如果說有這個守恆性限制,那跟我converge這個時間有什麼關聯性呢?那當然就是你如果願意接受越多的干擾,就是說你願意接受越多的擾動的話,那你就越快的就會收斂到你的最終狀態,這跟剛才這張圖其實一樣,這是一個更詳細的圖。

274
00:51:48,320 --> 00:51:56,320
我們去跑了1000個random case,那我們就發現當然越高的perseverance level,就要花越多時間才收斂。

275
00:51:57,320 --> 00:52:13,320
那我們就可以發現說,大部分的時間其實你的perseverance level設在0.5到0.7中間呢,它大概就是其實都收斂的蠻快的,它其實不是,就是還蠻快就會收斂,它不會像這個設到很高的時候就會收斂。

276
00:52:13,320 --> 00:52:31,320
所以說我們最佳的選擇在這個部分,就是說我們只要3到5個step就可以收斂了,然後同時間我們又保持了0.5到0.7的原本的流量,那其實還不錯,就是至少7成。比起原本直接丟掉,我們還有5成到7成的流量。

277
00:52:32,320 --> 00:52:42,320
我們原本的主張是說這個守恆性可以讓整個過程更平滑一點,就是說我們不會一下子丟掉很多流量。

278
00:52:43,320 --> 00:52:54,320
是這樣嗎?那我們就去看這個update過程中震盪的程度。震盪的越多就是越靠右邊,震盪的越少就是靠最左邊。

279
00:52:54,320 --> 00:53:05,320
那麼看到我們有引入守恆性限制的這兩種方法呢,它的震動都非常的少,不是非常少,就是說它的震動都是遠小於原本Microsoft RedOne這個方法。

280
00:53:06,320 --> 00:53:12,320
也就是說我們這個守恆性限制確實是幫助了整個update過程更平順。

281
00:53:13,320 --> 00:53:24,320
最後一個問題我們想要回答的就是說,那我們這個很棒,我們很平滑嘛,但是到底花了多久時間才可以得到?如果花了很久的時間,那就被唬了。

282
00:53:25,320 --> 00:53:33,320
那我們現在來看這個computation time,computation time就是說我們要找到一個借,要多少時間?

283
00:53:34,320 --> 00:53:41,320
我們這個表上面的時間是millisecond,微秒,毫秒。

284
00:53:42,320 --> 00:53:56,320
那我們要找最佳解的話呢,它沒有辦法在很快的時間被算出來,但其實如果你的網路很小的話,其實這個東西可以暴力解,你就是硬去湊所有的可能的解,其實還是蠻快就可以算出來。

285
00:53:56,320 --> 00:54:06,320
比如說你要算最佳解要67毫秒,那如果你是大一點的網路呢,你就要更多秒。

286
00:54:07,320 --> 00:54:17,320
等到你要這個,比如說這個是Google的網路呢,Google網路你就要花到1.2乘以16次方微毫秒你才可以算出一個,那是多少呢?

287
00:54:17,320 --> 00:54:22,320
這個大概是一千多秒鐘,才可以算出一次update的過程。

288
00:54:23,320 --> 00:54:28,320
那等你算完這一千秒過了之後,你可能這個雜訊又變了,那你就白算了。

289
00:54:29,320 --> 00:54:35,320
那相對我們的演算法,我們的heuristic的話,大概三百多毫秒就可以算出來了。

290
00:54:36,320 --> 00:54:41,320
也就是說我們在不到一秒鐘的時間內呢,我們就可以告訴整個網路說你應該怎麼調整。

291
00:54:41,320 --> 00:54:50,320
那這個效率就很高啦,我們在算這個東西的速度很快,而且我們又可以讓這個,我們在前面這幾個實驗中都可以發現呢,

292
00:54:51,320 --> 00:54:54,320
其實我們提出的這個演算法,那跟最佳解也沒差多少。

293
00:54:55,320 --> 00:55:05,320
雖然說我們沒辦法證明說他們中間永遠都很靠近,因為我們剛才說的這個東西,沒辦法在這個近似上面是沒辦法做到的。

294
00:55:05,320 --> 00:55:11,320
可是呢,實際上在實務上來說,其實我們算出來的解就是跟最佳解沒什麼兩樣。

295
00:55:12,320 --> 00:55:17,320
而且我們演算法又非常的快,這就是我們提出的這個新的解法的好處。

296
00:55:18,320 --> 00:55:21,320
那總結一下我們這個paper在講什麼事情。

297
00:55:22,320 --> 00:55:31,320
這個paper就是說,與其把所有的線路直接切斷,然後update,然後我們再用更高的頻寬去送新的流量呢,

298
00:55:31,320 --> 00:55:41,320
我們應該要考慮到守恆性,就是我們要確定這個網路的流量在這整個update link的過程中呢,不要損失太多。

299
00:55:42,320 --> 00:55:48,320
那考慮這個守恆性呢,並不會造成太大的負擔,因為我們有一個很不錯的演算法,

300
00:55:49,320 --> 00:55:55,320
它可以很快地解掉這個問題,很快地去approach這個問題,它不是解掉,但它可以很快地找出一個解。

301
00:55:55,320 --> 00:56:05,320
那這個解呢,它其實還蠻好的,它其實跟這個最佳解沒什麼兩樣,它跟這個直接切掉造成的performance其實是沒什麼兩樣,

302
00:56:06,320 --> 00:56:09,320
但是它非常的,它就比直接切掉又更平順得多。

303
00:56:10,320 --> 00:56:21,320
那當然我們也承認說,除了這個,我們認知到這個,除了守恆性以外,其實這個system operator也是可以考慮更多不同的面向。

304
00:56:21,320 --> 00:56:29,320
比如說我們在網路的中間,這個update這個中間呢,我們希望這些流量不只是要,不要損失太多,我們可能還要希望說,

305
00:56:30,320 --> 00:56:40,320
呃,他們有一些別的這個性質,比如說我們每一個流量不可以,呃,不可以小於多少的這個絕對的這個流量。

306
00:56:41,320 --> 00:56:50,320
比如說我一定要大於10Mbps,或是大於20Mbps,它就可能不是percentage,而是一個絕對的流量,我們一定要maintain多少的流量,

307
00:56:51,320 --> 00:56:57,320
這樣的話我才不會,比如說我在打電動中間,我才不會感受到很大的delay,我最少要多少流量,比如說像這樣。

308
00:56:57,320 --> 00:57:11,320
所以說這個system operator其實是可以調整他們關於這個網路的這個要求,然後來運作這個,讓這個光纖網路運作的更有效能,更有效率,而且他們可以最後還是可以得到更好的頻寬。

309
00:57:12,320 --> 00:57:27,320
好,那在我今天這個演講大概就到這邊了,如果有什麼問題的話,歡迎提出,謝謝大家聽講,這個問題,這個議題,這個這個講題是稍微比較,比較硬一點,所以啊,如果有什麼問題就歡迎提出。

310
00:57:28,320 --> 00:57:37,320
那我先歡迎,我來代表大家鼓掌一下好了,好,那有問題嗎?大家有問題嗎?

311
00:57:37,320 --> 00:57:56,320
哎,我問一下哦,就是例如說你現在是改變他們,例如說fiber兩端,例如說他們接收modulation的方式,對,那在硬體上這東西會不會需要改很久,例如說你本來是。

312
00:57:57,320 --> 00:58:17,320
例如說你說綠光紅光藍,本來可能只有紅黃,然後你現在加了綠光進去,對,那硬體上是達得到了嗎?就是啊,這個問題非常好,是他達得到,然後他要多久呢?他在red one那個時候呢,也就2018年的時候,大概要幾十到幾百毫秒。

313
00:58:18,320 --> 00:58:41,320
每一個step幾十到幾百毫秒,那當然我們可以考慮,如果你說他好像幾十幾百毫秒沒有什麼差嘛,對不對?可是如果你考慮到這些是廣域網路,這些廣域網路他帶的流量是很大的,啊,他流量可能有幾TB或幾千TB,那乘以這幾百毫秒,那就是一個很可觀的這個流量損失啊。

314
00:58:42,320 --> 00:59:01,320
那但是呢,以前是怎麼做到的?以前做到的就像你說要加紅光加藍光怎麼辦呢?他就是先把兩邊關掉,因為你的雷射要重新調整,那你重新調整雷射之後呢,你再讓他重新送出雷射,所以關掉之後重開這件事情其實是很慢的。

315
00:59:02,320 --> 00:59:24,320
那為什麼他要幾百毫秒?那在他原本的Red1 paper中間有提到,他們說,如果說我們關掉重開這件事情是一個造成delay的一個重大的因素的話,我們是不是可以不要關掉重開?那不要關掉重開的話,他們還沒有辦法讓他,那時候還沒有辦法讓他真的work,但是他們估計說,如果不關掉重開,

316
00:59:24,320 --> 00:59:33,320
那他可能就是只需要microsecond或是更少的時間就可以達到重新調整的這個目的了。

317
00:59:34,320 --> 00:59:49,320
那如果說我們未來的網路是可以無縫接軌,就是說我要重調就重調,馬上重調好的話呢,那當然我們這個研究就已經沒有什麼問題,就是跟他們原本的研究都沒有什麼差異了,因為我們基本上不會損失任何東西。

318
00:59:50,320 --> 01:00:02,320
所以我覺得問題非常非常重要,就是說到底硬體上是怎麼做的?可以做到嗎?是,它是可以做到的。那硬體上有沒有別的研究的需求?是,就是說我們要怎麼樣在動態上面去調整這個modulation?

319
01:00:03,320 --> 01:00:21,320
那其實有很多可以想到的方法,比如說我們可以預先把modulation送過去,然後我跟對面講好說我從什麼時候開始,我就用這個新的modulation,那這中間可能會需要一些方法來讓兩邊溝通,

320
01:00:21,320 --> 01:00:37,320
比如說你要嘛用時鐘,就是說你要讓兩邊的同時性要夠好,譬如說我到七點我就馬上兩邊一起換,那這個其實是蠻困難的,因為你要讓兩邊synchronize,就是說你的時間是一致的呢,其實有時候不是那麼容易。

321
01:00:37,320 --> 01:00:53,320
那另一個方法是你送一些packet,就是送一些資訊,就是你在你的資料,送資料這個東西以外,你送一些control的message到對面去,跟他說我要開始用,然後從第幾個packet開始用。

322
01:00:53,320 --> 01:01:08,320
但這樣是稍微複雜一點,因為現在的系統並不是這樣設計的,他們原本的系統可能假想的是說你一開了,那你的modulation就是什麼,就一直用到底,所以這中間其實是有蠻多研究可以做的。

323
01:01:08,320 --> 01:01:13,320
要這樣回答到你的問題嗎?

324
01:01:13,320 --> 01:01:24,320
所以你說那個Microsoft做的,就是這樣子改變modulation的方法,它可以提升幾倍的效能,還是幾%的效能?

325
01:01:25,320 --> 01:01:33,320
它提升效能其實蠻不錯的,讓我找一下原本的paper。

326
01:01:38,320 --> 01:01:43,320
不知道你們看不看得到原本的,我這樣直接show paper是不太好,不過沒有關係。

327
01:01:44,320 --> 01:01:50,320
這個你show的時候啊,待會你結束之前,你滑到他的標題那一頁,把作者show的。

328
01:01:51,320 --> 01:02:12,320
你如果直接看他原本的paper,他其實是可以提升蠻多的流量,或者說他可以避免流量drop。

329
01:02:12,320 --> 01:02:21,320
不過因為他們原本的paper裡面講到的東西其實是蠻簡單的一個網路,就他這四個點。

330
01:02:21,320 --> 01:02:28,320
所以說他這四個點其實就在加州這邊,所以說他們這個也只是屬於一個prototype而已。

331
01:02:29,320 --> 01:02:39,320
至於他實際被應用起來,我們只能說他有很大的potential,但是他最後實際應用上好不好,還不是很確定。

332
01:02:39,320 --> 01:02:41,320
但這個想法是蠻有potential的。

333
01:02:42,320 --> 01:02:46,320
這是這篇paper,CourseSoft他們發的這篇paper。

334
01:02:50,320 --> 01:02:58,320
我發這篇paper的目的就是說,這個想法蠻好的,但是我們的update不需要這麼粗魯,可以更細緻一點這種概念。

335
01:02:59,320 --> 01:03:06,320
當然如果未來我們有更好的硬體,那就很多。

336
01:03:06,320 --> 01:03:13,320
我的問題是這樣,就是你在做你的simulation的時候,基本上你要對disturbance有些假設。

337
01:03:14,320 --> 01:03:19,320
就是你是在一個什麼樣的情境底下去比較?

338
01:03:19,320 --> 01:03:28,320
你的disturbance就是說Google他們怎麼做或什麼怎麼做,還是你是怎麼去generate你的simulation裡面的disturbance?

339
01:03:29,320 --> 01:03:38,320
這是一個很好的問題,就是說我其實generate的不是disturbance,我generate是這個link現在的狀態跟下一個狀態。

340
01:03:38,320 --> 01:03:48,320
所以我其實是多了一層的假設這一層,就是說假設我現在的link只能送50Gbps,50Gbps好了。

341
01:03:48,320 --> 01:03:56,320
然後我因為noise下降或怎麼樣,我現在可以送100Gbps,那我到底要怎麼update比較好?

342
01:03:56,320 --> 01:04:02,320
所以說這個中間就把這個noise跟signal的關係包在裡面。

343
01:04:02,320 --> 01:04:08,320
實際上運作上當然它其實是有別的一些限制。

344
01:04:08,320 --> 01:04:14,320
其實剛才那篇paper裡面也有,不過我就先不要再show一次這個paper了。

345
01:04:14,320 --> 01:04:23,320
就是說我們的頻寬的調整其實不是連續的,就是說我們可以用的頻寬是不連續的。

346
01:04:23,320 --> 01:04:28,320
比如說25Mbps,50Mbps,100Mbps,150,像這樣子。

347
01:04:28,320 --> 01:04:31,320
所以說你其實就是這幾種在選。

348
01:04:31,320 --> 01:04:36,320
不管你的雜訊多少,它到了它某一個臨界點之後,你就可能可以往上調。

349
01:04:36,320 --> 01:04:40,320
你可以調到100調150,或150調到200,這樣子。

350
01:04:40,320 --> 01:04:46,320
但是實際上為什麼你可以調的原理是我剛才講的這個noise這個東西。

351
01:04:46,320 --> 01:04:56,320
所以實際上它測量上面是怎麼樣呢?這個資料其實我就沒有,我只是根據它可以調的這個範圍去做一個假設。

352
01:04:58,320 --> 01:05:05,320
所以我在假設上就是說,原本這個link可能是處於100Gbps的這個模式上面。

353
01:05:05,320 --> 01:05:11,320
那因為我的這個雜訊可能下降,所以我現在突然這個link可以送到200。

354
01:05:11,320 --> 01:05:17,320
那如果是這個情形之下,我們要怎麼樣從100走到200?

355
01:05:17,320 --> 01:05:23,320
所以比較好的說法是,你已經先假設你的工作目標就是要這樣調。

356
01:05:23,320 --> 01:05:26,320
只是你告訴它怎麼樣比較聰明。

357
01:05:26,320 --> 01:05:36,320
不是說,應該說比較不像是在analog level,就是說noise pattern是這樣,所以我們應該要決定要調到什麼狀態。

358
01:05:36,320 --> 01:05:38,320
那已經就算是一個given的。

359
01:05:38,320 --> 01:05:42,320
對,given,就是說我假設我的device已經跟我講這件事情了。

360
01:05:42,320 --> 01:05:51,320
我的研究通常也都是比較high level,假設device跟我說了這些事情之後,我要怎麼樣去plan這件事情。

361
01:05:54,320 --> 01:05:57,320
好,那大家還有問題嗎?

362
01:05:59,320 --> 01:06:04,320
好,如果沒有的話,那我們再次鼓掌感謝示範。

363
01:06:04,320 --> 01:06:06,320
謝謝大家。

364
01:06:06,320 --> 01:06:10,320
好,那今天的演講就到這裡囉。

