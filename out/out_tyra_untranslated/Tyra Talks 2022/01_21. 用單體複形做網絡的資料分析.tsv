start	end	text
0	18000	大家好,歡迎來到今天7月23號,2022年7月23號的Taira Talk,我們今天的演講是由顏紫棋來給大家演講。
18000	43000	顏紫棋的演講標題是《用單體複形做網絡的資料分析》,紫棋是科羅拉多大學電腦科學系的博士候選人。
43000	58000	他的研究興趣是複雜系統,開發統計與構圖學的方法來看這些複雜數據裡的結構,探討數據、模型、演算法之間的關係。
58000	66000	他兩年前在Taira也有一場演講,歡迎大家如果有興趣的話可以去看一下。
74000	86000	大家好,謝謝主持人Jason的介紹,也謝謝Taira設計了這個平台讓我們可以分享自己的研究。
87000	89000	我現在先分享我的螢幕。
89000	105000	我的題目是用單體複形做網絡的資料分析。
106000	125000	這個網絡不是Internet,是指一個具有很多節點與節點之間的互動結構,英文叫做Network。
126000	133000	主要的內容是來自於我去年寫的一篇文章,列在那邊。
134000	149000	這個slide我花了蠻多時間把所有的reference都列上去,請問大家看得到我的滑鼠嗎?
150000	155000	大家可以在這個地方下載我的slide。
155000	167000	如果你是在YouTube看到這個演講的話,麻煩到我個人網站去,因為這個鏈接以後不會一直存在,裡面有一些東西我會需要更新。
167000	177000	但是我的這個slide裡面所有的reference都有一個箭頭,可以點進去看到我到底是指哪一篇文章。
178000	184000	什麼是網絡的資料分析呢?
189000	194000	這個領域常常問的問題是從數據出發,就是複雜系統裡面的數據。
194000	206000	數據可以是比如說腦科學數據,比如說我們做腦的照影,然後腦可能有一些腦區,然後把腦區當作是一個節點。
206000	215000	可能有一些刺激,那可能就有不同的腦區會有同時就亮起來,同時有作用,那我們就可以把它連起來。
216000	218000	那這樣的話是一個網路。
220000	235000	我們就可以問上面的一些問題,比如說不同刺激下的腦區之間的作用,形成的網路的結構會有什麼樣的差別,等等的。
235000	248000	那比如說像生態系統,我們可以想像是如果我們把每一種生物,然後生物之間可能誰吃誰,然後就有一個食物鏈,那這也是一個網路。
248000	253000	鏈的話是一個樹,但是如果是一個網路的話就是一個食物網。
254000	263000	那其他的類型,像是我們平常在看在上網,然後就是不同的網頁之間也是形成一個網路。
263000	271000	然後我們旅行,我們去各種不同的地方也形成一個網路這樣,或是人際之間的網路。
272000	286000	那這些網路,這篇文章是一個說明說,就是在描述這些複雜系統的時候,怎麼樣要選擇正確的模型。
286000	298000	因為有些作用,有些作用力它可能是兩兩之間作用的,像是數學上一個圖,就像這樣,一個點跟另外一點之間都是兩兩個有作用。
298000	310000	但是有時候,比如說我們剛才說的那個腦區的例子,我們有一個刺激可能是有三個不同區域的腦區同時亮起來,那這時候我們就是有三個點互相作用。
310000	318000	那這些東西可能就比較適合用所謂的high order network analysis來描述。
319000	331000	所以這篇文章說了一些不同的數據,怎麼樣會有一些high order的一個事情在裡面,然後要選擇怎樣的模型等等。
331000	341000	那我今天的這個報告會主要著重在這個單體複習,叫做symbiotic complex。
342000	346000	對了,然後有任何問題都可以打斷我。
346000	354000	好,然後不曉得大家聽到network science的時候會想到什麼東西。
354000	369000	然後這是一個最近新出的一本書,然後它最後一個章節在講,就是network science怎麼樣往前看這樣,然後它就整理了最近二十年的一些不同的領域。
369000	373000	就是這裡面的子領域,然後他們paper的數量這樣。
373000	384000	然後我們就可以看到比如說跟傳染病有關的,傳染病當然是一個跟網路有關的一個事情,那在這一兩年有很多這樣。
384000	393000	那我今天要講的工作比較是在這個高階的網路上面,就是hypergraph或是symbiotic complex上面。
394000	401000	就最近比較多這樣,但沒有像這個epidemics那麼多。
401000	407000	那同樣的這種書其實有很多,所以大家有興趣可以去找來看這樣。
407000	420000	然後我自己跟成功大學統計系的李正德老師也有翻譯了一本小說,然後這也是一個可以點進去的鏈接,是中文的,然後有附很多例子,大家可以點進去來看。
421000	430000	那在演講開始之前,我想要感謝我的指導老師,我是有兩個老師指導的,Josh跟Dan。
430000	439000	然後他們,我自己是computer science的,然後但是他們分別有在math跟biology有涉略這樣。
440000	461000	那我還要特別謝謝這一篇paper的authors,尤其是Jong-Ak跟Alexei,因為我是在跟他們兩個通信之後,我才知道說他們做的這篇文章有一個open problem,所以我才開始做這個open problem。
462000	479000	好,那現在要講,就是我剛才說的有一些描述複雜系統的方法,然後我嘗試的把它分成三種類型。
479000	486000	就是graph,然後或是這個hypergraph,或是這個symbiotic complex,這樣。
486000	505000	那這三種東西其實是一個模型的選擇,就是你看到什麼數據,你可以選擇你要用哪一種模型,然後你用那種模型可能就獲得了用了那種模型的好處,但也可能失去了其他的一些性質,這樣。
506000	514000	那這是一篇很好的paper,講說什麼樣的時候應該要用怎樣的數據。
515000	527000	那假如說我今天看到一個數據是作者跟他們發的paper的數據,所以它其實就是這樣,就是有哪些paper是哪些作者發的,這樣。
527000	539000	那這個數據呢,它的那個input是確定的,就是我知道我有哪些author在我的數據裡面。
540000	548000	但是呢,因為我想要問的問題的不同,我就可以有不同的數據的表示,數據的representation。
548000	553000	比如說我可以問說,這兩兩個作者有沒有一起寫過paper呢?
554000	559000	那這就是你選兩個人,然後他們有寫paper的話,你就把它連一個邊。
560000	567000	那這時候你就會拿到這樣的數據,你就看一跟二有沒有寫paper,然後有寫上去,二跟四也有寫paper。
567000	574000	然後這裡有很多,比如說一跟二、二跟三,還有一跟三也都有,一跟二、二跟三、一跟三,然後三跟四,這樣。
575000	580000	那這樣的數據是一個數學上的圖,就是一個graph。
581000	589000	那你還可以問的比較精細一點,比如說你說,到底這些人有沒有寫paper,這樣。
590000	596000	所以這時候呢,就是有一個東西叫做hyper-edge,就是edge的延伸版叫hyper-edge。
597000	602000	因為在edge裡面,你一定要選兩個點,但是在hyper-edge裡面你可以選n個點。
602000	608000	那這時候呢,你就是選,其實就是四篇paper,你就選四個,一、二、二、四。
608000	614000	然後一、二、三,因為現在是hyper-graph,所以你也可以選進來,這樣。
615000	617000	那這時候就有一個hyper-graph。
618000	623000	那你也可以用simplicial complex來描述。
623000	635000	這個simplicial complex來描述的話,它是問說,就比較粗略的問說,這些人有沒有一起寫過一篇paper。
636000	643000	所以這時候它其實跟hyper-graph很像,它就是選n個人起來,然後叫做一個simplex。
644000	648000	可是這個simplicial complex在數學上有個定義。
648000	663000	它的定義是說呢,你選了一個simplex之後,你要把所有比它還小的simplex都包含在這個simplicial complex裡面。
664000	677000	比如說,一個例子就是,假如說我選了一、二、三,比如說一、二、三這個,這一個,大家寫paper這四篇當作是一個simplex。
677000	682000	那在這個數據裡面,我就一定要包含一、二、二、三、一、三,然後一、二、三,這樣。
683000	684000	數學上是這樣子。
685000	697000	所以呢,我們如果有這個數據的話,其實它在這個simplicial complex的表示下,會變成是有這麼多的所有可能的東西都在裡面。
698000	705000	二、四、一、二、三、三、四,二至幾、四至幾、一至幾、三至幾,然後一、二、一、二、一、三、二、三,這樣。
706000	711000	看起來好像是一個很大的一個construct。
712000	718000	然後就是因為它是這個定義,就是所有的比它小的subset都必須包含在裡面。
719000	731000	那也是因為這樣子的話,我們可以用最大的simplexes,然後我們把它叫做facets,來表示一個simplicial complex。
732000	740000	是什麼意思呢?比如說,我們現在看到這個看起來很多的這個數據,那我們可以選一、二、三,因為一、二、三看起來很大。
741000	750000	那你選了一、二、三之後,自動就包含了一、二、一、三、二、三嘛,所以其實有一些你就可以不要選進來,這樣。
751000	753000	然後二、四就會少掉四,還有三、四,這樣。
754000	764000	所以事實上,如果這個數據你想要用simplicial complex來表示的話,你其實只需要說這三個facets就好了。
765000	772000	那所以這時候我就會拿到一個像這樣的一個表示,這樣。
773000	790000	那和我今天要講的這個工作比較有關的有一些其他的專有名詞,叫做degree sequence,或是度分布,然後或是size sequence,尺寸分布,我不太知道應該要怎麼樣翻。
791000	793000	我覺得我會用size sequence。
794000	807000	是什麼意思呢?degree sequence是說呢,如果我們以圖的例子來看的話,degree sequence是說每一個點它到底連到多少個鄰居,比如說這個點連到二,然後這個點連到三個鄰居,這樣。
808000	814000	所以這個三、二、三、二這四個數字就構成了這個圖的degree sequence。
816000	819000	這個順序是不重要的,因為它是一個distribution。
820000	827000	那但是這個事情如果在這個simplicial complex的世界的話,我會變成是一、二、二、二。
827000	839000	原因是因為呢,這個A1這個作者呢,它只有連接到一個邊,就是一、二、三這個邊,所以呢它就是一,等於是有一隻手連出去而已。
840000	854000	然後像這個A2這個作者,它有連到了這個一、二、三這個simplex,跟二、四這個simplex,所以它的degree sequence是,它的degree是二。
856000	865000	以上說的是定義,就是關於這個怎麼樣在一個simplicial complex上面說它的degree sequence是什麼的定義。
866000	878000	那相關的還有一個詞叫做side sequence,就是說呢,它每一個邊到底,就是它每一個interaction到底它的大小是多少。
879000	888000	其實我這邊應該要列出,因為這個是圖,這個圖每一個圖都是,它的interaction都是兩兩格構成的。
888000	896000	所以這個圖就是有幾個邊就有幾個二,比如說就是二、二、二、二、二,就是五個二,構成了這個side sequence。
897000	904000	那如果是hyper graph的話,變成是三,因為這裡有一個一、二、三構成的interaction,三、二、二。
904000	912000	那同樣的在simplicial complex,因為我現在有三個facets,所以它就是三、二、二。
913000	918000	好,那目前的定義有問題嗎?
924000	936000	好,那我今天要講的這個工作,雖然我會穿插很多其他相關的資訊,其實是這樣子的。
936000	951000	就是我要,我的工作是,假如說我被人家給定了兩組sequence,一組是二、二、二、一,然後另外一組是三、二、二。
951000	967000	那我可不可以用這兩組整數的序列來找到一個simplicial complex,使得它的度分布跟這個尺寸分布剛好是我剛才給定的這兩個序列。
969000	978000	那並不是所有的整數序列你都可以找到一個這樣的結構可以互相對應的。
979000	983000	那這時候我就會說我找不到,然後如果我可以找到,那就很好這樣。
984000	985000	我會說為什麼會很好。
988000	996000	好,那所以我們,對,我要進入下一張投影片。
996000	1004000	那所以我們現在看到這個好像,這個simplicial complex,因為它所有的那個小的subset都要包含進去,看起來好像是一個很複雜的東西。
1005000	1015000	但它其實是有一些好處的,就是這是我的第一個interlude,就是穿插進來讓大家可以休息一下的。
1018000	1019000	有怎樣的好處呢?
1020000	1035000	是因為呢,有一個領域叫做topological data analysis,它可以用我包含進來的這些比較小的subset,然後來算出這個數據的一些結構。
1035000	1051000	比如說它有幾個洞,幾個,像我等一下會講一個例子,就是這個杯子其實是有一個洞在這裡,或把這個地方有一個洞。
1052000	1066000	那怎麼樣拿到數據之後,怎麼樣定義它的,怎麼樣定義,找一個方式來描述它,然後描述它之後要找出它有幾個洞,這樣子我們可以區分這些數據有什麼樣的差別。
1067000	1089000	例子呢,像是,比如說我知道這是一個paper,然後它是美國總統大選的時候,在每個州裡面的一些小的郡,然後不同的郡可能投紅色或投藍色。
1090000	1105000	我是不是可以用拓撲學的方法找到說,是不是有一些特別結構是,比如說一片藍海之中,其實可能有一些紅色的郡,它是特別喜歡投共和黨這樣。
1107000	1114000	或是就是分析說這個,所有的paper構成的這個數據有怎樣的形狀。
1114000	1132000	如果大家對於這個TDA有興趣的,可以去看一下這個網站,它有非常非常多的talk,跟Tira一樣,請人來分享,分享之後放在YouTube。
1133000	1139000	可以看到各種各樣的用TDA來研究奇奇怪怪的數據的一些例子。
1140000	1144000	我在這邊講的例子可以從這個paper裡面找到reference。
1145000	1165000	其他跟這個topology有關的是,把剛才說的那種圖上面發生的現象,因為圖的關係,我限制這個interaction必須是pairwise的,然後延伸到不只是pairwise,可能是三個四個以上構成的。
1166000	1177000	那它會有一些例子,我沒有辦法在很短的時間內講完,就是說它們到底有哪些有趣的例子。
1178000	1191000	但大部分的時候呢,是以往在graph的世界裡面,它會有一些dynamical model,它會說,比如說有兩兩個agent,它們之間在一起的時候會有什麼樣的interaction。
1192000	1208000	比如說opinion model,假如說我想要買一支手錶,可是我不確定我要買什麼牌子的,然後我每次我就看一下我周圍的朋友,他們都戴什麼牌子的手錶,然後來決定,就是一個majority vote,來決定我應該要買什麼樣的牌子。
1209000	1220000	這種,這是一個模型,然後這個模型它裡面主要的component是,你要看你的朋友,就是兩兩之間的作用。
1221000	1233000	那有很多這種兩兩之間的作用的模型,被人家延伸到超過兩個以上的作用,然後會發現一些有趣的現象。
1234000	1241000	所以,這是有些相關的paper,都跟這個數據的topology有關。
1243000	1258000	好,那回到我原本的主題,我剛才介紹了degree and size sequence,那這兩個東西是用來描述一個symbiotic complex的結構。
1259000	1270000	那為什麼我們會對它們感興趣呢?因為這些東西都是很local的,比如說我想要回到剛才這邊。
1271000	1293000	可以回來嗎?它都是一些local structure,就是我不用知道我全部的數據到底長什麼樣子,我只要知道這個人他周圍有幾個邊,或是說三個人構成了一個群體。
1294000	1311000	這是一個local structure,然後我們對它們感興趣是因為這些local structure可能跟它們整個數據要共同做一件事情有關係,所以我們想要把它們之間的連結建立起來。
1312000	1325000	那這件事情呢,因為我常常想要講對比,就是我現在在symbiotic complex的世界,然後在graph的世界裡面,大家是這麼樣子的在問問題的。
1326000	1343000	在graph的世界裡面有一種模型叫做configuration model,它的意思是說呢,今天我給定了一個graph,那我知道這個graph裡面的degree sequence是告訴我每一個點它有幾個鄰居。
1344000	1348000	這個degree sequence它是一個很local的資訊。
1348000	1360000	有時候呢,這個網路它可能有一些性質是我不確定它到底有多特殊,或是說它到底跟local的degree有多大的關聯。
1360000	1369000	所以呢,我可以用configuration model把這個網路隨機化,就是隨機成很多不同的網路。
1369000	1375000	可是呢,我要求這些不同的網路,它們的degree sequence都跟我觀測到的那個是一樣的。
1375000	1388000	那我再去問說,在各個不同的網路裡面,我在意的那個性質,形成的分布跟我實際上觀測的這個數據的分布,實際上觀測的這個數據的這個值有沒有什麼樣的差別。
1389000	1405000	如果有差別的話呢,我就會覺得說,這個我觀測到的網路可能在這個degree,可能有一些特別的地方,超過degree sequence特別的地方,需要被解釋。
1406000	1408000	一個例子呢,是這樣子。
1408000	1413000	就是呢,這是一個Barn Sparrow,一種鳥。
1413000	1425000	然後呢,大家覺得牠的顏色跟牠之間交配的繁殖率有關係,但是大家不確定是怎樣的關係。
1425000	1431000	那他們做實驗,把這個鳥上面裝sensor,然後看鳥在一個空間飛。
1431000	1437000	然後飛一飛,如果牠們靠近的話,牠就會連一個邊,然後形成一個網路這樣。
1437000	1447000	那在這個網路裡面呢,他們就去算說,因為牠知道每個鳥的顏色,然後牠也知道不同顏色牠們之間有沒有interaction。
1447000	1459000	所以他們就做出這個網路之後,他們就去算牠們之間的那個跟顏色有關的correlation,然後就獲得了這個虛線這個部分。
1459000	1475000	那同時呢,這篇paper呢,也拿了這個數據,然後把他們觀測到的這個網路隨機化,然後每一個隨機化的component都算了一次這個pearson correlation,然後得到一個分布。
1476000	1486000	然後所以,這一條是來自於這個數據觀測到的,然後這一條是來自於,這個分布是來自於你隨機化的。
1487000	1493000	那你就會覺得說,牠們其實沒什麼差別這樣。
1493000	1506000	所以呢,你不會覺得,所以在這裡好像是,你不會覺得說你這個color-color correlation有什麼特別之處是多過於degrees可以解釋的。
1507000	1513000	相應的,假如說我觀測到另外一個數據,牠可能牠的correlation非常的低。
1513000	1521000	比如說,假如說我,我不知道,假如說我另外一個數據,然後你觀測牠的color-color correlation,結果是落在這裡。
1521000	1533000	那你這樣你就會問說,你就會覺得說,為什麼我現在觀測到的數據跟這個randomized之後的這個數據比起來牠的correlation特別的低。
1533000	1550000	然後因為這個randomization是跟degrees有關的,你就會知道說,這時候牠裡面應該有一些是超過degrees的事情扮演在這裡面,然後我們要去問說為什麼這樣。
1554000	1556000	目前為止有問題嗎?
1563000	1578000	我問一下好了,我想要了解一下這個例子。中間的那個圖啊,牠的上面的數字是牠連了幾條線嗎?還是什麼?
1578000	1587000	上面的數字應該是牠那個鳥的編號,然後粗細的話應該是牠有幾次的interaction。
1588000	1596000	OK。然後灰色和白色的意思是牠們的color。
1599000	1608000	然後右邊這個圖是怎麼做出來的?我剛剛沒有聽懂,可以再講一次嗎?
1608000	1618000	我們觀測到這個圖之後,我們也有牠的color,所以我們其實可以算牠的color-color correlation。
1618000	1625000	然後我們算出一個數字,可是我不知道這個數字到底是有沒有很特別。
1625000	1644000	所以呢,他們就說呢,那我看看能不能夠把這個網路隨機化,找到很多跟牠結構不一樣,可是degree sequence一樣的其他網路。
1644000	1650000	然後在上面呢,算牠的correlation,然後得到了一個分布。
1650000	1659000	然後這時候呢,我們就可以問說,到底我觀測到的這個數據的correlation有沒有比較特別?
1659000	1663000	OK。
1665000	1675000	然後這個有沒有比較特別,是跟我這時候我要怎麼樣把這個網路給隨機化有關的。
1675000	1688000	那這時候牠是固定了牠的degree,就是固定了牠每一隻鳥牠到底跟其他幾隻鳥interaction。
1688000	1695000	然後固定了之後有很多其他不同的結構,然後問說我觀測到的這個是不是特別的。
1695000	1718000	OK。所以這個例子中間,反正做這件事情statistically是OK的,但是你的意思是說,你要找到同樣degree sequence的圖,這件事情是圖論裡面需要研究的事情。
1718000	1721000	這個結論是這樣嗎?
1721000	1730000	對,這一篇paper就是提出了一個configuration model,可以把一個網路給隨機化。
1730000	1740000	然後他舉出一個例子說,你可以隨機化之後,他這個ensemble就可以用來做統計上的一些測試。
1740000	1744000	OK,OK,了解,OK,好,謝謝。
1744000	1752000	所以如果只有看這篇paper的話,你可能會只得到一個pearson correlation,可是你不太知道它到底有什麼特別的地方。
1752000	1762000	所以為了要知道它的特別地方,我想要把原本的數據固定了幾個參數,然後做出一個ensemble。
1762000	1771000	然後來看看在這個ensemble裡面,所有的裡面的pearson correlation是不是,就是我觀測到的數據到底是有多特別。
1772000	1781000	到底特別不特別這件事情,其實也取決於我懷疑它跟什麼樣的參數有關。
1781000	1789000	比如說,我懷疑說這個pearson correlation可能跟度分布有關,可能跟degree distribution有關。
1789000	1795000	所以我才故意的把它固定了之後,來看看這個分布,然後看看它有沒有落在裡面或落在外面。
1801000	1803000	還有其他的問題嗎?
1810000	1824000	好,然後呢,剛才是一個例子,就是我想要舉一個例子是local structure E。
1824000	1829000	剛才那個鳥的例子就是,鳥到底跟幾個其他的鳥有interaction,
1829000	1837000	然後以及它的global property是那篇生物的paper研究的,它的繁殖率可能跟顏色有關。
1837000	1845000	那這是一個global跟local可能有關的一個例子,在某個數據裡面。
1846000	1857000	另外一個相關的問題是,假如說我只拿到degree sequence之後,我能不能夠從它來生成一個網路。
1857000	1862000	如果我可以的話,其實也可以用來回答很多有趣的問題。
1862000	1870000	分別是在結構上的,以及在動態上的。
1871000	1884000	例如說呢,我覺得這個比較domain specific,所以大家有興趣的再點進去看這個link。
1885000	1902000	但是呢,這邊呢,想要說的事情是說呢,大家會懷疑說,我能不能夠從一個local的資訊生成一個結構,
1902000	1904000	以及這個結構有沒有什麼特殊的地方。
1904000	1911000	那如果你不能夠生成它的話,比如說我拿到一個degree sequence,我不知道怎麼生成一個network的話,
1911000	1917000	那你就根本沒有辦法談說,在這個network上面要有什麼樣的結構是特別的。
1917000	1920000	所以能夠建立起這個link是一個重要的事情。
1920000	1922000	然後這是structure。
1922000	1935000	然後第二個dynamical的意思是說呢,我不是傳染病專家,但是拿傳染病的例子來講的話,
1935000	1945000	假如說,因為我們知道傳染病有時候傳得很快,是因為有些人他可能平常的生活中有機會一次接觸好幾百人,
1945000	1947000	但這不是我們平常的生活。
1947000	1954000	可是在這個人際網路的數據裡面,就是有特定的幾個人,他的degree非常地大。
1955000	1965000	那在這樣的一個結構裡面呢,為什麼傳染病會傳染的特別的快呢?
1965000	1970000	我們必須要有辦法生成這個結構,才可以回答這個問題。
1970000	1977000	所以我們會需要有模型說呢,假如說我要生成一個網路,
1977000	1984000	然後這個網路他的degree的分布呢,是很heavy tail,就是你看他的,你畫一個分布,
1984000	1991000	然後說生活中只有一個朋友的有幾個人,然後有兩個朋友的有幾個人這樣,
1991000	1996000	跟生活中有一千個朋友的有幾個人這樣,這是一個degree的分布。
1996000	2004000	那你要從這個分布裡面去生成一個結構,然後你才可以在那個結構上面去跑傳染病的模型。
2005000	2014000	那所以說,能夠有辦法從local的資訊生成一個結構,也是重要的,因為這樣的話才可以做一些實驗。
2017000	2023000	對,所以這是我提供的一些motivation,關於我要講的這個工作。
2024000	2034000	那再深入一點進入主題呢,是說呢,我們剛才講了這個local的東西,就是degrees。
2034000	2042000	然後我們有觀測到一些數據這樣,通常呢,你觀測到數據之後,你要拿到degree是很簡單的事情。
2042000	2053000	比如說你知道,你有一個班級有三十個人,然後你就去問每個人他有,你覺得在這個班上他的朋友是哪些人這樣。
2053000	2062000	那你就拿到一個這個班級的朋友的網路,那你要從這個朋友的網路裡面去拿到他的degree,其實很簡單,
2062000	2066000	你就去拿每一個人看,然後看他周圍有幾個朋友這樣就好了。
2067000	2070000	對,這個方向通常是比較簡單的這樣。
2070000	2078000	那可是反過來是比較難的,就是你要怎麼樣,只跟我講每個朋友,比如說這個班有三十個人,
2078000	2087000	然後你給我一個,你給我三十個大於零的數字,然後你能不能夠創造出一個網路,這個反過來問是比較難的。
2088000	2095000	那相應的是呢,如果你要拿到這個網路之後,你要把它隨機化,找到一個ensemble,
2095000	2103000	使得這個ensemble裡面的每一個網路他都有一模一樣的degree sequence,這件事情也是比較困難的事情。
2104000	2110000	那我列出來的就是大家的工作,然後都可以點進去看。
2110000	2117000	那比較近一點呢,就是你拿到一個symptom complex,怎麼樣把它隨機化,
2117000	2127000	使得這個隨機化裡面的每一個symptom complex,他們都具有一模一樣的degree跟size sequence。
2128000	2136000	那這個YPVP17,2017,就是剛才所啟發我的那篇paper。
2137000	2147000	那為什麼這個問題是,同樣的事情是在hypergraph會出現這樣,那為什麼我會做這個工作呢?
2147000	2155000	原因是因為呢,他們這篇paper裡面,他們提出的是一個隨機化一個結構的方法,
2156000	2168000	然後他們去說明說,他們這樣子隨機化之後,可以explore所有可能的space,
2168000	2176000	他有一些數學的argument在裡面。可是呢,這個方法呢,他必須要有一個數據在那邊,
2176000	2182000	然後你才可以把那個數據給隨機化。可是呢,他沒有辦法回答一些問題,
2182000	2190000	像是,今天我想要有一個比較理論方面的degree跟size sequence。
2190000	2199000	那我想要知道說,比如說我的degree跟size sequence,他們都是剛才說的那種heavy tilt那種結構。
2199000	2206000	那我能不能夠用它來生成一個數據,然後再把它隨機化。
2206000	2215000	然後如果沒有,我這篇paper的話是不容易做到,他們只能夠去隨機的嘗試說,
2215000	2221000	能不能夠從這個input sequence來找到一個數據,然後再把它隨機化。
2221000	2225000	所以呢,我的工作是一個演算法的一個工作。
2226000	2240000	我想要問一個問題,就是我還是不太懂,就是隨機化跟這個找到一個,
2240000	2252000	我的了解是第一個問題是,你有給定一個degree sequence,然後你能不能找到一個圖,
2252000	2259000	它符合這個degree sequence,這個是你畫綠色的線這個地方嗎?是嗎?
2259000	2262000	如果只是圖的話,應該是這個地方。
2262000	2267000	找到一個simplicial complex data。
2267000	2271000	對,如果是simplicial complex data,就是我這個綠色的地方。
2271000	2277000	然後你是只要找到一個就好了嗎?還是說你只要找到一個就好了?
2277000	2283000	原因是因為我找到了這個之後,我就可以用這邊的方法把它隨機化,那在統計上就有用了。
2283000	2287000	OK,但是那個隨機化跟這個件事情有什麼不一樣?
2287000	2295000	就是我的了解是,隨機化你不也是要從,就是你給定一個simplicial complex data,
2295000	2299000	那你就已經知道degree了,degree sequence了。
2299000	2304000	所以你就等於是從degree sequence到隨機化。
2304000	2309000	你要找到,你等於要找到很多個圖。
2309000	2312000	是這個意思嗎?
2312000	2320000	如果是這些隨機化的演算法要可以用的話,它必須要有個結構。
2320000	2331000	如果你只有給我兩個整數序列的話,我是不能夠去比如說去swap它的邊,然後來改變它的結構的。
2331000	2343000	哦,所以這個隨機化的過程是你要先給定一個結構,然後它可能做一些swap什麼東西的,然後把它變成一樣degree的圖。
2343000	2350000	對,所謂的一個結構就是像動畫,像這種東西。
2350000	2354000	就是我必須要先給我一個結構,然後我才可以用隨機化的算法。
2354000	2365000	它隨機化的算法通常都是跟swap邊有關,比如說把兩兩個邊swap,然後swap的同時保持它們的degree是不變的。
2366000	2373000	但是如果你沒有這樣的結構的話,你是沒有辦法做這邊這些事情的。
2373000	2379000	OK,所以綠色的線等於是說我要找到第一個,然後我們可以開始來隨機化。
2379000	2380000	對對對。
2380000	2382000	OK,了解,謝謝。
2382000	2383000	對。
2383000	2385000	好,太好了。
2385000	2391000	我發現我的時間好像不太夠,我要講快一點,但是我可能會跳過一些slide。
2391000	2395000	我還是希望可以在一個小時左右講完。
2395000	2407000	那要做這件事情,其實我並沒有解決全部的問題,原因是因為這個問題被人家證明說它是一個NP-complete的問題。
2407000	2421000	然後如果你在做研究發現一個問題被證明NP-complete的話,通常告訴你說你其實沒有辦法找到一個演算法它是可以完全的有效的有用的這樣。
2422000	2424000	那就很可惜啊。
2424000	2439000	可是那時候呢我就覺得很有趣,因為,oh, by the way,就是這件事情測試兩個整數序列能不能夠找到一個NP-complete這件事情應該是一個困難的問題。
2439000	2446000	那我覺得有趣的事情是呢,我那時候就真的去畫圖,就好像在做那個速讀一樣。
2446000	2453000	就是呢,我就畫,最後我就用Excel在做研究,就是呢,這個問題就是變成這樣子。
2453000	2462000	比如說呢,我給定兩個整數序列,一個是433221,這是它的degree的序列在這裡。
2462000	2468000	然後我給定另外一個整數序列,叫做它的size序列,叫做33333。
2468000	2482000	那我的目標呢,就是在這個矩陣裡面啊,填0或是1,使得它的這個每一個column加起來剛好是4,這個加起來要剛好是3。
2482000	2486000	每一個row加起來要剛好是3,這樣。
2488000	2496000	除了這個之外呢,還有另外一個讓這個問題變得困難的一個條件,變得困難的一個限制。
2496000	2505000	就是呢,任兩個row,它們不能,不能有其中一個是另外一個的subset這件事情。
2506000	2519000	這是來自於剛才說的simplicial complex的定義,就是我希望我在這裡表示的這些結構都已經是最大的simplicial complex,就是那些facets。
2519000	2534000	所以假如說呢,我在這裡填1111,可是這裡呢,我還是想要填1111的話,那這個1111就跟下面這個1111是互相構成其中一個是另外一個subset,或是vice versa。
2534000	2541000	那我就不能夠在這裡也填1111,所以這時候我就只能填1111,然後跳一個變成1,這樣。
2541000	2544000	所以這兩個才不會互相是彼此的subset。
2545000	2556000	那假如說呢,這一行我只需要填兩個1的話,我也不能夠填比如說1111,因為這樣1111就會被上面這個1111給包進去了,這樣。
2557000	2567000	所以那時候呢,我就試了很多這種填1跟0的方法,然後加一加看看能不能夠加到它們給定的這個數字,這樣。
2568000	2575000	那剛才說的那個限制條件就是讓這個問題困難的原因,可是我發現呢,有些例子它其實很簡單。
2575000	2589000	比如說,如果我這裡的全部都,這個input degree全部都是1的話,那這裡有15,所以我這裡就要有15個1,1111,這樣。
2589000	2596000	那我就可以這樣做,就1111,然後跳一個變1111,然後再跳一個1111,點點點,這樣。
2596000	2603000	那我就很容易地創造出一個結構是符合剛才我說的那個degree size sequence。
2603000	2617000	那所以呢,我的這個工作呢,是我想到了一個演算法,它是一個heuristic,在電腦科學裡面heuristic的意思就是說呢,
2617000	2632000	你有一個,你有一個規則是你演算法的每一步的時候你都要去遵循的,那規則都是很local的,可是就是很surprising你這個規則可以用,這樣。
2632000	2637000	就是一個heuristic,沒有辦法保證它是最好的,但是它是一個可以用的。
2637000	2655000	那我們發現說,大部分的input sequence我都可以用,我等一下會說的演算法來找到一個instance,使得就是剛才說的那個,加一加鑰匙,兩邊的input的這個事情,這樣。
2656000	2668000	好,那我講完這個演算法之後呢,我就會跳過一些slides,然後來講我的,我覺得有趣的interlude,然後最後就會wrap up。
2668000	2682000	這是我的演算法,當然我不會講這個演算法,但是呢,它的想法大概是這樣,就是我想要試所有可能的0跟1,可是我在試的時候呢,我不想要隨機地試。
2682000	2694000	我希望呢,我一開始的時候呢,我這個input,我把它排成是由大到小排起來,4、3、3、3、3、2、1,然後另外這個size input,我也是由大到小排起來。
2694000	2711000	排完了之後呢,我就從上面開始往下填1或0,但是在填的時候呢,我要要求說呢,這個degree大的要趕快先碰在一起,變成是一個simplex,所以我要從左邊開始慢慢往右下角填。
2712000	2721000	所以呢,我每一次填的時候,我這個facets都有一個規則,說我要,我希望degree大的人先碰在一起。
2722000	2737000	那在排的時候呢,我也可以確定說,by the way,這是一個recursive演算法,我看到一個while在這裡,然後我有一些條件在裡面這樣。
2737000	2746000	那每一次在填這個0跟1的時候呢,有時候我可以算得出來說,有時候我可以知道我這樣填0跟1是不是一定是錯的。
2746000	2763000	比如說呢,假如說我在,我這裡填完了,然後這裡有填一個1,然後這裡呢,再填一個1,那這裡就不可能填1了,因為我這裡已經有4個1,然後加起來是4了。
2763000	2770000	所以這裡如果再填1,我就會超過4了,那這時候我就不用去試這個,這裡是1的這個條件,如果在這一行的話。
2771000	2782000	所以呢,其實每一行在填的時候有一些,我可以不要繼續往下填的一些條件,我可以知道,然後我就可以把這個選項刪除。
2782000	2793000	然後所以它其實是一個有點笨的方法,我要真的是把所有可能性都都都找到,只是呢,這個我在找這個可能性的時候,我是有一個特定的順序的。
2793000	2801000	然後,嗯,這篇研究有趣的地方是,這個特定的順序是,竟然是有用的這樣。
2802000	2815000	那我們也有一些在裡面的一些,比如說我填一個,然後我最後發現說這條路不同,我就會記錄說,啊,這條路不同,我有一個rejection。
2815000	2823000	那如果太多rejection,然後我就會放棄,因為我知道這個問題是很難的,然後我不想要就是把所有可能性都都找到。
2823000	2841000	那,嗯,那我,我會跳過這個部分,這個部分呢,是我要做,要做測試,就是我希望呢,我可以找所有加起來是13的這個整數序列。
2842000	2857000	各種,所以這其實是有101個,加起來,101個,加起來會是13的整數序列,然後我這是101乘以101,所有的可能性,然後我想要去跑,嗯,剛才說的那種演算法。
2857000	2869000	然後來看看說他到底每一個組合,他到底會不會拿到一個simplicial,就是拿到一個simplex,當作他的output,或是說我最後放棄了,拿到nonsimplicial。
2870000	2883000	那,嗯,這邊呢,我想要說的故事是呢,其實大部分的,因為,嗯,這裡有個tau是我在算那個我花多少時間,然後我的時間的定義是我到底有幾次是倒退的。
2883000	2897000	就是我,嗯,本來,嗯,往一個row一個row往下找嘛,然後有時候我可能在某一個特定的row我發現沒有路了,我要再倒退一格,這樣就是backtrack的數目,然後跟我,嗯,被拒絕的數目這樣。
2897000	2902000	被拒絕就是我剛才有一些很簡單的規則,然後我發現這條路不同,就拒絕。
2902000	2910000	那大部分都是白色或是這個灰色的,所以其實大部分的,大部分的input他是簡單的。
2910000	2914000	所以這裡我要說的其實就是大部分的input是簡單的。
2915000	2932000	好,那這張我就要快一點跳過去,那這張主要是在講說呢,就是,嗯,這件事情,嗯,可以scale up到,嗯,加起來會是1000的這種,嗯,simplicial complex。
2933000	2936000	剛才是加起來到13而已,現在加起來可以到1000。
2936000	2951000	那,嗯,我還是可以很快的找到裡面的一些那個到底是不是simplicial,然後跟,嗯,跟我在做這件事情的時候我花的時間這樣。
2951000	2960000	然後我發現大部分的例子他花的時間都,都蠻少的,就是在polynomial的時間內可以被我算出來。
2960000	2972000	那,所以我就在這裡下一個結論就是,欸,這個方法是一個有用的方法,我可以,嗯,拿他做,嗯,隨機的input,我就可以拿他來找到一個結構。
2972000	2985000	我可能會需要放棄一些些,因為我沒有辦法確定說我到底漏掉哪些,因為這個問題本身是難的,但是,嗯,如果我這個數字大的話,我還是可以用他來做一些有用的統計上的事情。
2985000	3006000	好,然後,嗯,和剛才,所以,嗯,這個paper的進展是講就是說,嗯,因為我剛才有規定說,嗯,我在找這個結構的時候,我希望,嗯,那些degree大的,朋友多的要自己先聚成一體,聚在一起這樣。
3006000	3017000	那,這件事情會不會有一些特別的一些結構被我,被我找到,所以呢,我去算,嗯,這個結構裡面的有幾個洞這樣。
3017000	3027000	好,那這是一個在那個topological data analysis裡面的一個標準的一個方法,就是如果我有一個simplicial complex,我可以問他有幾個洞這樣。
3027000	3043000	那,像這樣的話就是一個洞,在,在中間這樣。那,嗯,這個洞的話,這個洞的數目是用一種東西叫做betty numbers來描述,然後他會有各種不同dimension的洞。
3043000	3062000	比如說,嗯,betty 0就是有他有幾個kinetic component,這次有兩個,然後betty 1他只有一個kinetic component,可是他剛好有一個洞,所以他的betty 1是1,然後betty 0是1,然後h2的話就是更高階的洞等等。
3063000	3080000	好,開始割愛,這邊就調過,因為這邊的話只是要說呢,嗯,剛才說的那種,嗯,那種heuristic真的會有一些特別的結構是,是被我創造出來。
3080000	3097000	然後就也沒有,沒有什麼,就是科學上沒有什麼用,但是他是這個演算法的一個特性,就是這個特性會幫助我們找到,嗯,很很分散的跟洞很少的這種結構。
3098000	3120000	那,嗯,那重點呢,其實不是這個結構長什麼樣子,而是我可以建立一個橋,就是從input的integer sequence找到一個結構,然後我想要用別人做好的randomize的方法來找到一個ensemble,然後來回答一些問題。
3120000	3125000	所以這只是做一些capitalization,就是關於我這個演算法的一些特性。
3127000	3136000	好,然後,這不是一個interlude,就是說為什麼要算有幾個hole啊?因為,嗯,有時候其實知道這個數據有幾個hole是重要的。
3137000	3162000	拿剛才說的那個腦區的例子來講的話,嗯,大家其實可以知道說,嗯,正常人的腦在某一些特定刺激下面的這個結構的那個洞的數量跟,嗯,有,有這種external dropout,一種神經方面的疾病的人的腦的這個結構,這兩個洞的數量會不一樣。
3163000	3180000	這是一個,嗯,算,算有幾個洞,嗯,可能會有用的地方。那,其他會有用的地方呢,是,嗯,嗯,是在,嗯,signal processing,訊號處理。
3181000	3198000	嗯,這個事情呢,是說呢,假如說我有一個數據,這個數據呢,我觀測到的是這些,在一個網路上面,這個,嗯,所有的這個灰色都是一個網路,然後呢,所有這個有顏色的就是我觀測到的數據,這樣。
3198000	3219000	然後呢,在這個數據裡面,因為我現在很清楚,我看到全部的數據,我知道這個數據有兩個洞,然後,嗯,這兩個洞在結構上很特別,可是我觀測到的這個,這個有顏色的這個箭頭,我不知道它到底,嗯,跟這個洞有什麼關係,這樣。
3219000	3244000	那,嗯,有一個方法呢,就是我可以把這些觀測到的這個箭頭投影到兩個洞上面。這有點像是那個大家學統計的那個PCA,因為PCA會有兩個principle component,我可以把它投影上去,然後看看說它在這兩個不同方向,嗯,的的資訊是不是可以最大的解釋,嗯,我觀測到的數據,這樣。
3245000	3264000	那如果你把這個數據投影上去的話,你就會發現說,嗯,這三條有顏色的線被group在一起,然後另外三條group在一起,然後另外三條group在一起。為什麼它們會被group在一起呢?是因為任何在一個group的線,它沒有辦法不跳過這個洞,就deform到旁邊去。
3264000	3284000	比如說,我固定這兩頭,然後想要拉一下這個繩子,我就沒有辦法繞過這個洞,因為我只能在這個地方,就是擠來擠去,這樣。對,所以,嗯,這是一個可以從,嗯,可以從你的數據,然後拿到一些跟幾何方面的一些有關的事情的方法,這樣。
3284000	3297000	然後,嗯,這是一個小領域叫做Signal Processing on Simplicial Complexes,然後我列出一些文章,大家可以在裡面找到一些有趣的例子。
3298000	3320000	那,嗯,最後呢,這張投影片我要全部跳過去。這張投影片呢,大致上是講說,嗯,我們,如果我們限制我們的世界是一個網路,我們只能夠看到網路的話,那我們,我們在意這個網路上面的一些,嗯,就是它的洞的數量。
3320000	3347000	所以,嗯,我們,然後呢,我們有一些intuition,像是,比如說這個網路如果越來越密集的話,那其實我們會覺得這個洞會越來越多,因為就是一個越來越密的網路嘛,所以它的圈圈,它的洞就越來越多。嗯,可是這個intuition並不能夠完全carry到,嗯,Simplicial Complex裡面,因為,嗯,因為剛才說的那個Simplicial Complex的那個,那個限制。
3347000	3366000	所以呢,嗯,它的,它的,剛才說的那個描述剛好反過來,就是如果是一個越來越密的Simplicial Complex的話,它的洞其實是越來越少的。就有一些這種,嗯,跟結構一些有,有關的一些有趣的事情。好,所以這是我的結尾slide。
3366000	3387000	嗯,我覺得最重要的資訊呢,是我們現在已經,嗯,用了這個,我開發的這個方法呢,它可以用來對arbitrary的degree size sequence,我可以用來找到一個結構。那這時候我就可以用,嗯,別人的,嗯,隨機化方法,隨機化一些網路,那就可以問統計上的一些問題。
3388000	3412000	那第二個有趣的事情呢,是,嗯,剛才說的這個,這個電腦科學的問題呢,它有一個特性叫做fine-grained complexity,這意思是說呢,嗯,大家如果去google NP complete,就會在它的wikipedia找到這張圖。那事實上,在這裡面的世界還是很豐富的,就是可能有簡單有難這樣,所以它是fine-grained complexity。
3413000	3431000	那,嗯,我有把那個演算法寫成是一個python package,所以直接打開一個terminal就可以直接用這個演算法。那最後呢,我覺得這個工作有,嗯,有motivate一些問題。
3432000	3454000	就是,嗯,剛才說的那個,實際上應該是in general很難的問題,為什麼會有一個簡單的算法可以算到裡面,嗯,就是裡面大部分的instance都可以解決,那為什麼它會這麼成功呢?嗯,嗯,就我還沒有辦法在那個paper回答這個問題這樣。
3454000	3467000	那剩下的在統計方面呢,是我可以問說,嗯,假如說我看到一個數據,那我就可以想,嗯,這個數據跟它有關的固定了幾個參數之後隨機化的這個數據。
3467000	3480000	那,嗯,有什麼樣的差別?為什麼我的數據可能會跟,嗯,我認為應該要,嗯,就是應該要試的一些,嗯,參數。
3481000	3495000	開始有輪子,抱歉,就是,嗯,我這個數據裡面,我有觀,我有觀察一些我覺得有趣的事情,那我會,嗯,希望知道說,嗯,它到底是不是真的有趣。
3495000	3505000	所以為了要知道這件事情,我就需要隨機化一些部分這樣,那這是一個在統計方面的一些,嗯,嗯,常問的問題。
3506000	3518000	那,嗯,更廣一點的話,就是因為,嗯,這是描述複雜,這是一個複雜系統相關的一個,一個問題嗎?那在複雜系統裡面,我們通常會有一些component,就是它的agents。
3518000	3526000	那,嗯,剛才說那些local structure都是,比如說我選擇我要交怎麼樣的朋友,那這是一個我local做的選擇。
3526000	3538000	但我最後,嗯,人際社會是一個global的事情這樣,那在不同的數據是不是有一些,嗯,我們可以問的,嗯,local跟global之間的連結。
3539000	3556000	好,那,嗯,這是我列出,嗯,我覺得有用的reference,然後因為今天的主題是,嗯,比較跟high order的network有關,所以這幾篇文章都是跟,嗯,就是一些technical survey。
3557000	3567000	然後呢,嗯,剛才說到一些給定一個數據怎麼樣算這個數據裡面的拓撲結構,嗯,有三個有用的,嗯,link可以參考。
3568000	3579000	好,那,嗯,嗯,我覺得這個領域是network science的領域,然後,嗯,它有一些community,比如說這個net size是每年都會舉辦的一個會議。
3579000	3601000	那,嗯,我自己有在這個,嗯,since這個組織裡面這樣,然後,嗯,他們每年,嗯,我們每年都會在這個net size辦一些活動,那我們有一個slack,如果有興趣加入的可以寫email給我,這個點進去都可以有用。
3601000	3614000	那其他的事情是,嗯,有一個women in network science的seminar,那,嗯,很像tera,那裡面就是會有一些跟network science有關的talk。
3615000	3625000	那相應的還有這個diversify net size symposium。好,我講完了,謝謝。
3626000	3639000	主持人:"謝謝子齊,那我們可以打開麥克風鼓掌一下。那這邊聽眾有沒有問題呢?"
3639000	3661000	主持人:"我這邊有問題,不知道可不可以提問。主辦人,然後,子齊你好,我是中研院社會所的李宣偉,上次就有聽過子齊的演講,真的是兩年前,然後還是一樣精彩,就是很謝謝子齊的分享。
3661000	3678000	因為我們有做跟子齊今天講的主題,還有order network相關的研究,所以聽到這個就覺得非常興奮,看能不能用到我們自己的研究上面。那有幾個問題想要跟子齊請教一下,大概三個。
3678000	3696000	第一個是說,我們在實際資料上面有蠻多不同的種類,就像是你的節點有不同的種類,節點有像是性別、男性、女性、種族、黑人、白人、亞洲人。
3696000	3721000	像這個是一個note type,那edge也是,edge的話你可以加上不同的權重,你可以是01的,你也可以是各種時數的,或者是幾種值的,0.510123,或者是你可以是sign,你可以是正負號,不同的edge,那你的edge也可以有方向性,你可以指向不同的地方。
3721000	3736000	那你現在用的這個演算法,有沒有想過說以後可以推廣到不同的note type或edge type,或甚至增加方向性,我不知道這在simplicial complex裡面會不會是一個重要的延伸方向,這是第一個問題。
3736000	3756000	第二個問題是,我很好奇就是,子希,你提的這個演算法,它是你給定一個sequence,degree sequence,跟另外一個,我忘了那個名字,但你給定兩個sequence之後,你可以推到整個一個可能的圖,甚至未來的方法可以算出整個ensemble。
3757000	3785000	如果我今天提給你的是一個部分的資訊,假設我拿我收的資料做一個類比,我班上有30個同學,假設只有10個同學填這個資料,然後我們假設他填的資料是完整的,那我能不能藉由你的方法算出這10個人給的資料當中,可能是你這個文章沒有處理到,但是一個背後的問題,我不知道你的見解。
3786000	3806000	拿這10個人的資料去還原整個30個人班上的ensemble,那這個的信賴程度是不是值得這樣去做?我其實不太知道,這是第二個。如果你只得到部分的觀察資訊,你能不能去猜整個團體的互動,各種高階低階的互動是長怎樣?
3806600	3815000	最後一個問題是,您最後提到了homology,像是persistent homology,的確在這個領域上是發展非常快速的。
3816000	3826000	我們在做社會學研究的時候,也會有不同的洞。您剛剛說的這些洞,我們講說是高階互動的洞,在社會學裡面的洞有一個叫結構洞。
3826000	3840000	結構洞就是說,兩個群體之間可能連結的沒有這麼密,會有一些關鍵的樞紐,把兩個比較不怎麼樣有聯繫的團體聯繫在一起,然後中間補足了一個結構洞。
3841000	3857000	不知道就您的觀察或者感覺,這兩種洞,一個是從homology來的這種homology的洞,跟社會學研究在graph上面的這種叫做結構洞,有沒有可能有些相關?
3857000	3870000	您剛剛說,homology的結論也不一定,圖越密不一定越多越少。我一直想說這兩個,我其實沒有想得很通,我想要問問看您的意見。總之,非常精彩的演講,謝謝您。
3887000	3902000	因為這些研究都是從數據出發,我要有一個數據,然後來問我這上面感興趣的問題。我覺得simplicial complex的數據蠻少的,圖的比較多。
3902000	3919000	所以,其實有一些研究是怎麼樣從一個觀測到圖的數據裡面去做統計推論,比如說三個人他們之間都互相連結。
3919000	3942000	其實我們表示它表示成是三個邊,沒有比把它們表示成一起的一個hyper edge還要來得有效,統計上有效。所以,有很多這種怎麼樣從一個pairwise data infer high-order structure的問題。
3943000	3963000	所以,您剛才說的問題,我要refresh聽眾。第一個,是跟attribute有關的,就是能不能夠延展我剛才說的configuration model的工作。
3964000	3987000	然後到今天,如果我有一個數據,比如說人際網絡數據,節點可能有種族、收入等等的,我要固定它,然後來生成一個ensemble。我不知道,但是所有的這些問題我會回到graph來看。
3987000	4001000	我沒有印象graph有做相關的研究,但是我覺得好像是一個很好的出發點,因為它就可以幫助我們回答其他的統計問題。
4001000	4018000	第二個問題是,其實前兩個問題我都不知道。
4018000	4038000	第二個問題是,今天假如說我一個班級有五十個人,當然從我講的這個演算法,我可以把它隨機化。隨機化裡面的每一個結構我都可以拿它算一個統計性質,去拿到一個分布。
4039000	4058000	可是假如說我只有辦法觀測到這五十個裡面的一部分的人,那我怎麼樣從這一部分的人裡面拿到最多的資訊呢?跟其實我應該要有的分布拿到最多的資訊呢?我也覺得是一個很好的研究問題,我不知道。
4059000	4070000	而且我覺得剛才說的這兩個問題,在graph上面都,我好像沒有看過這樣的工作,只在graph上面的話。
4071000	4088000	第三個問題可能相較比較好回答一點是,所以我聽起來那個structural hold比較像是一個定性的一個定義,對不對?
4089000	4104000	如果是這樣子的話,因為在topology裡面,要算topology、要算homology、要算動的這件事情,它是有一個明確的依循的。
4104000	4123000	就是technical是說,我要把這個數據分成不同dimension,然後這些dimension形成一個chain complex,然後chain complex裡面不同的dimension,我們之間用所謂的boundary map連接。
4123000	4136000	然後boundary map要形成一些性質,比如說,鄰近的boundary map相乘之後必須要是0。因為這樣子的一個數學性質,我才可以在裡面去算動。
4137000	4158000	所以如果是一個social network,然後我要問說,它上面的動到底跟structural hold有什麼關聯的話,我會覺得只有看結構好像不太能夠回答這個問題。
4158000	4169000	因為你的structural hold的定義上就已經包含了一些跟節點有關的tributes,比如說誰是連接兩個群體裡面最有影響力的。
4170000	4185000	可是如果是topology的話,它完全就是數學上的,就是你跟我講這個結構是怎麼樣,有幾個填滿的三角形,有幾個被填滿的兩個邊,然後去算。
4186000	4203000	所以topology裡面的hold完全是結構上的,可能會跟社會學有關的性質的structural hold有關,也可能沒有關。
4204000	4206000	謝謝。
4208000	4213000	我可能在offline問一些東西,我們感興趣再丟給你看。
4213000	4215000	好,謝謝。
4215000	4217000	您還有問題嗎?
4217000	4219000	我自己可以問一個問題嗎?
4219000	4233000	你剛剛提出了一個heuristic的演算法,然後在我看起來,因為我對這個完全不熟,
4234000	4242000	你的演算法看起來是,如果這個演算法找到一個解,那你就成功了嘛。
4243000	4252000	但是剛剛在你show的一張圖裡面,它有那些non-solution的部分,那個是怎麼做到的?
4252000	4258000	我看起來好像你的演算法並沒有算完所有的combination,你怎麼知道就是沒有解?
4260000	4264000	這是很好的問題,是我跳過,因為有點趕著時間。
4265000	4270000	因為我知道我不能夠,我不能夠用這個演算法去解,
4270000	4276000	所以我有設定一個cut-off,然後如果我失敗的次數大於那個cut-off,我就說沒有解。
4279000	4283000	但是有可能我再認真一點算就會有解,就是我等夠久的話就會有解。
4284000	4288000	對,但是如果我失敗的次數大於那個cut-off,我就說沒有解。
4289000	4293000	但是有可能我再認真一點算就會有解,就是我等夠久的話就會有解。
4294000	4298000	但是有可能我再認真一點算就會有解,就是我等夠久的話就會有解。
4299000	4304000	對,但是在你那張圖上面,沒有解的部分不是白色的嗎?
4307000	4309000	然後白色不是佔了大部分嗎?
4310000	4316000	原因是因為那張圖是一個很小的例子,就是一個加起來等於13的錯誤可能性。
4317000	4320000	所以在那個例子基本上我全部都有explore到。
4323000	4325000	所以在那個例子基本上我全部都有explore到。
4326000	4342000	但我的問題是說,你的claim是說大於80%的問題都會有解,但是在我看起來好像那個白色部分比其他部分多,是剛好那個例子不是這樣嗎?
4342000	4350000	但我的問題是說,你的claim是說大於80%的問題都會有解,但是在我看起來好像那個白色部分比其他部分多,是剛好那個例子不是這樣嗎?
4351000	4360000	我的claim是在這個比較大的網路裡面是80%。
4361000	4366000	OK,但是你剛才秀的那個例子網路太小了。
4367000	4372000	然後剛才秀的例子其實可能也是80%,但是就是在這個小的這裡往上看。
4373000	4376000	然後有解的話必須要是simplicial。
4377000	4382000	這是我沒有講的部分,就是S除以N。
4383000	4390000	因為我如果這個加起來這個數目太大的話,我就會有超級多的可能性我需要去找。
4390000	4402000	所以在這裡面我就選了一個數字,然後我就隨機的在所有的可能性裡面選了這個數字之後,一個一個認真的去算它們到底是不是simplicial。
4403000	4408000	然後這個S除以N是我算出來是simplicial的數目的比例。
4409000	4415000	然後剛才說的那個加起來要是13的那個例子大概是從這裡上來。
4415000	4426000	所以換句話說就是你會期待說,你會期待說大概有就是小於就是0.01。
4427000	4440000	你選定一個size之後,你就會覺得所有的可能性就是那個degree sequence加起來是那個size的那些可能性裡面就是大概0.01是會有找到一個simplicial的。
4440000	4457000	然後我們我們說它是non-simplicial的方法呢有兩個,一個是它有一些明顯的原因被我被我拒絕了,就是我覺得它不會有simplicial的可能。
4457000	4469000	比如說我的,比如說我的,比如說我這裡全部都是3,加起來是15,可是我這裡只有一個15。
4473000	4479000	或是比如說,那加起來15啊,比如說這裡是7,然後這裡是8,這裡是8,然後這裡是7。
4479000	4484000	可是這是8,這裡就只有5個啊,就沒有辦法填到8,這種很簡單的原因。
4484000	4493000	所以事實上被我被我拒絕說是non-simplicial的,有很多部分是那種很簡單的原因。
4493000	4500000	然後也有蠻多部分是我設的那個cutoff,就是我超過時間了,我放棄了。
4501000	4522000	然後另外一個問題是,我的另外一個問題是,就是你後來有說你的這個heuristic的演算法,它通常會找到動比較少的結構。
4523000	4534000	那這個會不會造成說之後那個randomize的時候,你會不會偏向某一種結構,就是你可能不是完全randomize你的圖。
4535000	4538000	我覺得這也是一個很好的問題。
4546000	4563000	他們做出了這個randomization的這個工作的時候,已經有在他的paper裡面說明說,他覺得他們做這個randomization所explore的這個space是ergotic,是都連結的。
4563000	4566000	所以可以都找到這樣。
4566000	4584000	那所以這應該不是一個問題,然後我自己做測試也沒有覺得說,就是我沒有辦法找到一個數據,然後從不同出發點,然後看他到底是不是explore不同的space,他感覺都是converge到一個space這樣。
4585000	4597000	所以這是一個合理的問題,然後我沒有證據去說他會不一樣,所以我覺得找到一個就很好了。
4598000	4617000	主持人:「所謂ergotic的意思是說,所有可能的那些structure,在經過某種transformation以後,它就會變成另外一個一樣的東西嗎?但是它可以繞成一整圈就對了?」
4618000	4633000	就是所有可能的structure都是互相連結的,連結的方式是在那種swap,那種他們提出來的edge swap的這件事情,不會讓所有可能的instance分成兩半。
4634000	4646000	主持人:「OK,所以用他的那個方法,所有可能的structure都會連在一起,所以你就慢慢跑,你就會跑過整個網路?」
4647000	4653000	但是這裡面有很多問題,就是那個慢慢跑可能會花很長的時間。
4662000	4667000	但是這個工作就是提供一個出發點,讓人家可以從那邊開始randomize。
4676000	4684000	主持人:「OK,如果沒有的話,那就謝謝子齊,然後我就把這個錄影關掉了。」
