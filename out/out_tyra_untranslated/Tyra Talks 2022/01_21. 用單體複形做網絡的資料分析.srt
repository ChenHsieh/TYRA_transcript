1
00:00:00,000 --> 00:00:18,000
大家好,歡迎來到今天7月23號,2022年7月23號的Taira Talk,我們今天的演講是由顏紫棋來給大家演講。

2
00:00:18,000 --> 00:00:43,000
顏紫棋的演講標題是《用單體複形做網絡的資料分析》,紫棋是科羅拉多大學電腦科學系的博士候選人。

3
00:00:43,000 --> 00:00:58,000
他的研究興趣是複雜系統,開發統計與構圖學的方法來看這些複雜數據裡的結構,探討數據、模型、演算法之間的關係。

4
00:00:58,000 --> 00:01:06,000
他兩年前在Taira也有一場演講,歡迎大家如果有興趣的話可以去看一下。

5
00:01:14,000 --> 00:01:26,000
大家好,謝謝主持人Jason的介紹,也謝謝Taira設計了這個平台讓我們可以分享自己的研究。

6
00:01:27,000 --> 00:01:29,000
我現在先分享我的螢幕。

7
00:01:29,000 --> 00:01:45,000
我的題目是用單體複形做網絡的資料分析。

8
00:01:46,000 --> 00:02:05,000
這個網絡不是Internet,是指一個具有很多節點與節點之間的互動結構,英文叫做Network。

9
00:02:06,000 --> 00:02:13,000
主要的內容是來自於我去年寫的一篇文章,列在那邊。

10
00:02:14,000 --> 00:02:29,000
這個slide我花了蠻多時間把所有的reference都列上去,請問大家看得到我的滑鼠嗎?

11
00:02:30,000 --> 00:02:35,000
大家可以在這個地方下載我的slide。

12
00:02:35,000 --> 00:02:47,000
如果你是在YouTube看到這個演講的話,麻煩到我個人網站去,因為這個鏈接以後不會一直存在,裡面有一些東西我會需要更新。

13
00:02:47,000 --> 00:02:57,000
但是我的這個slide裡面所有的reference都有一個箭頭,可以點進去看到我到底是指哪一篇文章。

14
00:02:58,000 --> 00:03:04,000
什麼是網絡的資料分析呢?

15
00:03:09,000 --> 00:03:14,000
這個領域常常問的問題是從數據出發,就是複雜系統裡面的數據。

16
00:03:14,000 --> 00:03:26,000
數據可以是比如說腦科學數據,比如說我們做腦的照影,然後腦可能有一些腦區,然後把腦區當作是一個節點。

17
00:03:26,000 --> 00:03:35,000
可能有一些刺激,那可能就有不同的腦區會有同時就亮起來,同時有作用,那我們就可以把它連起來。

18
00:03:36,000 --> 00:03:38,000
那這樣的話是一個網路。

19
00:03:40,000 --> 00:03:55,000
我們就可以問上面的一些問題,比如說不同刺激下的腦區之間的作用,形成的網路的結構會有什麼樣的差別,等等的。

20
00:03:55,000 --> 00:04:08,000
那比如說像生態系統,我們可以想像是如果我們把每一種生物,然後生物之間可能誰吃誰,然後就有一個食物鏈,那這也是一個網路。

21
00:04:08,000 --> 00:04:13,000
鏈的話是一個樹,但是如果是一個網路的話就是一個食物網。

22
00:04:14,000 --> 00:04:23,000
那其他的類型,像是我們平常在看在上網,然後就是不同的網頁之間也是形成一個網路。

23
00:04:23,000 --> 00:04:31,000
然後我們旅行,我們去各種不同的地方也形成一個網路這樣,或是人際之間的網路。

24
00:04:32,000 --> 00:04:46,000
那這些網路,這篇文章是一個說明說,就是在描述這些複雜系統的時候,怎麼樣要選擇正確的模型。

25
00:04:46,000 --> 00:04:58,000
因為有些作用,有些作用力它可能是兩兩之間作用的,像是數學上一個圖,就像這樣,一個點跟另外一點之間都是兩兩個有作用。

26
00:04:58,000 --> 00:05:10,000
但是有時候,比如說我們剛才說的那個腦區的例子,我們有一個刺激可能是有三個不同區域的腦區同時亮起來,那這時候我們就是有三個點互相作用。

27
00:05:10,000 --> 00:05:18,000
那這些東西可能就比較適合用所謂的high order network analysis來描述。

28
00:05:19,000 --> 00:05:31,000
所以這篇文章說了一些不同的數據,怎麼樣會有一些high order的一個事情在裡面,然後要選擇怎樣的模型等等。

29
00:05:31,000 --> 00:05:41,000
那我今天的這個報告會主要著重在這個單體複習,叫做symbiotic complex。

30
00:05:42,000 --> 00:05:46,000
對了,然後有任何問題都可以打斷我。

31
00:05:46,000 --> 00:05:54,000
好,然後不曉得大家聽到network science的時候會想到什麼東西。

32
00:05:54,000 --> 00:06:09,000
然後這是一個最近新出的一本書,然後它最後一個章節在講,就是network science怎麼樣往前看這樣,然後它就整理了最近二十年的一些不同的領域。

33
00:06:09,000 --> 00:06:13,000
就是這裡面的子領域,然後他們paper的數量這樣。

34
00:06:13,000 --> 00:06:24,000
然後我們就可以看到比如說跟傳染病有關的,傳染病當然是一個跟網路有關的一個事情,那在這一兩年有很多這樣。

35
00:06:24,000 --> 00:06:33,000
那我今天要講的工作比較是在這個高階的網路上面,就是hypergraph或是symbiotic complex上面。

36
00:06:34,000 --> 00:06:41,000
就最近比較多這樣,但沒有像這個epidemics那麼多。

37
00:06:41,000 --> 00:06:47,000
那同樣的這種書其實有很多,所以大家有興趣可以去找來看這樣。

38
00:06:47,000 --> 00:07:00,000
然後我自己跟成功大學統計系的李正德老師也有翻譯了一本小說,然後這也是一個可以點進去的鏈接,是中文的,然後有附很多例子,大家可以點進去來看。

39
00:07:01,000 --> 00:07:10,000
那在演講開始之前,我想要感謝我的指導老師,我是有兩個老師指導的,Josh跟Dan。

40
00:07:10,000 --> 00:07:19,000
然後他們,我自己是computer science的,然後但是他們分別有在math跟biology有涉略這樣。

41
00:07:20,000 --> 00:07:41,000
那我還要特別謝謝這一篇paper的authors,尤其是Jong-Ak跟Alexei,因為我是在跟他們兩個通信之後,我才知道說他們做的這篇文章有一個open problem,所以我才開始做這個open problem。

42
00:07:42,000 --> 00:07:59,000
好,那現在要講,就是我剛才說的有一些描述複雜系統的方法,然後我嘗試的把它分成三種類型。

43
00:07:59,000 --> 00:08:06,000
就是graph,然後或是這個hypergraph,或是這個symbiotic complex,這樣。

44
00:08:06,000 --> 00:08:25,000
那這三種東西其實是一個模型的選擇,就是你看到什麼數據,你可以選擇你要用哪一種模型,然後你用那種模型可能就獲得了用了那種模型的好處,但也可能失去了其他的一些性質,這樣。

45
00:08:26,000 --> 00:08:34,000
那這是一篇很好的paper,講說什麼樣的時候應該要用怎樣的數據。

46
00:08:35,000 --> 00:08:47,000
那假如說我今天看到一個數據是作者跟他們發的paper的數據,所以它其實就是這樣,就是有哪些paper是哪些作者發的,這樣。

47
00:08:47,000 --> 00:08:59,000
那這個數據呢,它的那個input是確定的,就是我知道我有哪些author在我的數據裡面。

48
00:09:00,000 --> 00:09:08,000
但是呢,因為我想要問的問題的不同,我就可以有不同的數據的表示,數據的representation。

49
00:09:08,000 --> 00:09:13,000
比如說我可以問說,這兩兩個作者有沒有一起寫過paper呢?

50
00:09:14,000 --> 00:09:19,000
那這就是你選兩個人,然後他們有寫paper的話,你就把它連一個邊。

51
00:09:20,000 --> 00:09:27,000
那這時候你就會拿到這樣的數據,你就看一跟二有沒有寫paper,然後有寫上去,二跟四也有寫paper。

52
00:09:27,000 --> 00:09:34,000
然後這裡有很多,比如說一跟二、二跟三,還有一跟三也都有,一跟二、二跟三、一跟三,然後三跟四,這樣。

53
00:09:35,000 --> 00:09:40,000
那這樣的數據是一個數學上的圖,就是一個graph。

54
00:09:41,000 --> 00:09:49,000
那你還可以問的比較精細一點,比如說你說,到底這些人有沒有寫paper,這樣。

55
00:09:50,000 --> 00:09:56,000
所以這時候呢,就是有一個東西叫做hyper-edge,就是edge的延伸版叫hyper-edge。

56
00:09:57,000 --> 00:10:02,000
因為在edge裡面,你一定要選兩個點,但是在hyper-edge裡面你可以選n個點。

57
00:10:02,000 --> 00:10:08,000
那這時候呢,你就是選,其實就是四篇paper,你就選四個,一、二、二、四。

58
00:10:08,000 --> 00:10:14,000
然後一、二、三,因為現在是hyper-graph,所以你也可以選進來,這樣。

59
00:10:15,000 --> 00:10:17,000
那這時候就有一個hyper-graph。

60
00:10:18,000 --> 00:10:23,000
那你也可以用simplicial complex來描述。

61
00:10:23,000 --> 00:10:35,000
這個simplicial complex來描述的話,它是問說,就比較粗略的問說,這些人有沒有一起寫過一篇paper。

62
00:10:36,000 --> 00:10:43,000
所以這時候它其實跟hyper-graph很像,它就是選n個人起來,然後叫做一個simplex。

63
00:10:44,000 --> 00:10:48,000
可是這個simplicial complex在數學上有個定義。

64
00:10:48,000 --> 00:11:03,000
它的定義是說呢,你選了一個simplex之後,你要把所有比它還小的simplex都包含在這個simplicial complex裡面。

65
00:11:04,000 --> 00:11:17,000
比如說,一個例子就是,假如說我選了一、二、三,比如說一、二、三這個,這一個,大家寫paper這四篇當作是一個simplex。

66
00:11:17,000 --> 00:11:22,000
那在這個數據裡面,我就一定要包含一、二、二、三、一、三,然後一、二、三,這樣。

67
00:11:23,000 --> 00:11:24,000
數學上是這樣子。

68
00:11:25,000 --> 00:11:37,000
所以呢,我們如果有這個數據的話,其實它在這個simplicial complex的表示下,會變成是有這麼多的所有可能的東西都在裡面。

69
00:11:38,000 --> 00:11:45,000
二、四、一、二、三、三、四,二至幾、四至幾、一至幾、三至幾,然後一、二、一、二、一、三、二、三,這樣。

70
00:11:46,000 --> 00:11:51,000
看起來好像是一個很大的一個construct。

71
00:11:52,000 --> 00:11:58,000
然後就是因為它是這個定義,就是所有的比它小的subset都必須包含在裡面。

72
00:11:59,000 --> 00:12:11,000
那也是因為這樣子的話,我們可以用最大的simplexes,然後我們把它叫做facets,來表示一個simplicial complex。

73
00:12:12,000 --> 00:12:20,000
是什麼意思呢?比如說,我們現在看到這個看起來很多的這個數據,那我們可以選一、二、三,因為一、二、三看起來很大。

74
00:12:21,000 --> 00:12:30,000
那你選了一、二、三之後,自動就包含了一、二、一、三、二、三嘛,所以其實有一些你就可以不要選進來,這樣。

75
00:12:31,000 --> 00:12:33,000
然後二、四就會少掉四,還有三、四,這樣。

76
00:12:34,000 --> 00:12:44,000
所以事實上,如果這個數據你想要用simplicial complex來表示的話,你其實只需要說這三個facets就好了。

77
00:12:45,000 --> 00:12:52,000
那所以這時候我就會拿到一個像這樣的一個表示,這樣。

78
00:12:53,000 --> 00:13:10,000
那和我今天要講的這個工作比較有關的有一些其他的專有名詞,叫做degree sequence,或是度分布,然後或是size sequence,尺寸分布,我不太知道應該要怎麼樣翻。

79
00:13:11,000 --> 00:13:13,000
我覺得我會用size sequence。

80
00:13:14,000 --> 00:13:27,000
是什麼意思呢?degree sequence是說呢,如果我們以圖的例子來看的話,degree sequence是說每一個點它到底連到多少個鄰居,比如說這個點連到二,然後這個點連到三個鄰居,這樣。

81
00:13:28,000 --> 00:13:34,000
所以這個三、二、三、二這四個數字就構成了這個圖的degree sequence。

82
00:13:36,000 --> 00:13:39,000
這個順序是不重要的,因為它是一個distribution。

83
00:13:40,000 --> 00:13:47,000
那但是這個事情如果在這個simplicial complex的世界的話,我會變成是一、二、二、二。

84
00:13:47,000 --> 00:13:59,000
原因是因為呢,這個A1這個作者呢,它只有連接到一個邊,就是一、二、三這個邊,所以呢它就是一,等於是有一隻手連出去而已。

85
00:14:00,000 --> 00:14:14,000
然後像這個A2這個作者,它有連到了這個一、二、三這個simplex,跟二、四這個simplex,所以它的degree sequence是,它的degree是二。

86
00:14:16,000 --> 00:14:25,000
以上說的是定義,就是關於這個怎麼樣在一個simplicial complex上面說它的degree sequence是什麼的定義。

87
00:14:26,000 --> 00:14:38,000
那相關的還有一個詞叫做side sequence,就是說呢,它每一個邊到底,就是它每一個interaction到底它的大小是多少。

88
00:14:39,000 --> 00:14:48,000
其實我這邊應該要列出,因為這個是圖,這個圖每一個圖都是,它的interaction都是兩兩格構成的。

89
00:14:48,000 --> 00:14:56,000
所以這個圖就是有幾個邊就有幾個二,比如說就是二、二、二、二、二,就是五個二,構成了這個side sequence。

90
00:14:57,000 --> 00:15:04,000
那如果是hyper graph的話,變成是三,因為這裡有一個一、二、三構成的interaction,三、二、二。

91
00:15:04,000 --> 00:15:12,000
那同樣的在simplicial complex,因為我現在有三個facets,所以它就是三、二、二。

92
00:15:13,000 --> 00:15:18,000
好,那目前的定義有問題嗎?

93
00:15:24,000 --> 00:15:36,000
好,那我今天要講的這個工作,雖然我會穿插很多其他相關的資訊,其實是這樣子的。

94
00:15:36,000 --> 00:15:51,000
就是我要,我的工作是,假如說我被人家給定了兩組sequence,一組是二、二、二、一,然後另外一組是三、二、二。

95
00:15:51,000 --> 00:16:07,000
那我可不可以用這兩組整數的序列來找到一個simplicial complex,使得它的度分布跟這個尺寸分布剛好是我剛才給定的這兩個序列。

96
00:16:09,000 --> 00:16:18,000
那並不是所有的整數序列你都可以找到一個這樣的結構可以互相對應的。

97
00:16:19,000 --> 00:16:23,000
那這時候我就會說我找不到,然後如果我可以找到,那就很好這樣。

98
00:16:24,000 --> 00:16:25,000
我會說為什麼會很好。

99
00:16:28,000 --> 00:16:36,000
好,那所以我們,對,我要進入下一張投影片。

100
00:16:36,000 --> 00:16:44,000
那所以我們現在看到這個好像,這個simplicial complex,因為它所有的那個小的subset都要包含進去,看起來好像是一個很複雜的東西。

101
00:16:45,000 --> 00:16:55,000
但它其實是有一些好處的,就是這是我的第一個interlude,就是穿插進來讓大家可以休息一下的。

102
00:16:58,000 --> 00:16:59,000
有怎樣的好處呢?

103
00:17:00,000 --> 00:17:15,000
是因為呢,有一個領域叫做topological data analysis,它可以用我包含進來的這些比較小的subset,然後來算出這個數據的一些結構。

104
00:17:15,000 --> 00:17:31,000
比如說它有幾個洞,幾個,像我等一下會講一個例子,就是這個杯子其實是有一個洞在這裡,或把這個地方有一個洞。

105
00:17:32,000 --> 00:17:46,000
那怎麼樣拿到數據之後,怎麼樣定義它的,怎麼樣定義,找一個方式來描述它,然後描述它之後要找出它有幾個洞,這樣子我們可以區分這些數據有什麼樣的差別。

106
00:17:47,000 --> 00:18:09,000
例子呢,像是,比如說我知道這是一個paper,然後它是美國總統大選的時候,在每個州裡面的一些小的郡,然後不同的郡可能投紅色或投藍色。

107
00:18:10,000 --> 00:18:25,000
我是不是可以用拓撲學的方法找到說,是不是有一些特別結構是,比如說一片藍海之中,其實可能有一些紅色的郡,它是特別喜歡投共和黨這樣。

108
00:18:27,000 --> 00:18:34,000
或是就是分析說這個,所有的paper構成的這個數據有怎樣的形狀。

109
00:18:34,000 --> 00:18:52,000
如果大家對於這個TDA有興趣的,可以去看一下這個網站,它有非常非常多的talk,跟Tira一樣,請人來分享,分享之後放在YouTube。

110
00:18:53,000 --> 00:18:59,000
可以看到各種各樣的用TDA來研究奇奇怪怪的數據的一些例子。

111
00:19:00,000 --> 00:19:04,000
我在這邊講的例子可以從這個paper裡面找到reference。

112
00:19:05,000 --> 00:19:25,000
其他跟這個topology有關的是,把剛才說的那種圖上面發生的現象,因為圖的關係,我限制這個interaction必須是pairwise的,然後延伸到不只是pairwise,可能是三個四個以上構成的。

113
00:19:26,000 --> 00:19:37,000
那它會有一些例子,我沒有辦法在很短的時間內講完,就是說它們到底有哪些有趣的例子。

114
00:19:38,000 --> 00:19:51,000
但大部分的時候呢,是以往在graph的世界裡面,它會有一些dynamical model,它會說,比如說有兩兩個agent,它們之間在一起的時候會有什麼樣的interaction。

115
00:19:52,000 --> 00:20:08,000
比如說opinion model,假如說我想要買一支手錶,可是我不確定我要買什麼牌子的,然後我每次我就看一下我周圍的朋友,他們都戴什麼牌子的手錶,然後來決定,就是一個majority vote,來決定我應該要買什麼樣的牌子。

116
00:20:09,000 --> 00:20:20,000
這種,這是一個模型,然後這個模型它裡面主要的component是,你要看你的朋友,就是兩兩之間的作用。

117
00:20:21,000 --> 00:20:33,000
那有很多這種兩兩之間的作用的模型,被人家延伸到超過兩個以上的作用,然後會發現一些有趣的現象。

118
00:20:34,000 --> 00:20:41,000
所以,這是有些相關的paper,都跟這個數據的topology有關。

119
00:20:43,000 --> 00:20:58,000
好,那回到我原本的主題,我剛才介紹了degree and size sequence,那這兩個東西是用來描述一個symbiotic complex的結構。

120
00:20:59,000 --> 00:21:10,000
那為什麼我們會對它們感興趣呢?因為這些東西都是很local的,比如說我想要回到剛才這邊。

121
00:21:11,000 --> 00:21:33,000
可以回來嗎?它都是一些local structure,就是我不用知道我全部的數據到底長什麼樣子,我只要知道這個人他周圍有幾個邊,或是說三個人構成了一個群體。

122
00:21:34,000 --> 00:21:51,000
這是一個local structure,然後我們對它們感興趣是因為這些local structure可能跟它們整個數據要共同做一件事情有關係,所以我們想要把它們之間的連結建立起來。

123
00:21:52,000 --> 00:22:05,000
那這件事情呢,因為我常常想要講對比,就是我現在在symbiotic complex的世界,然後在graph的世界裡面,大家是這麼樣子的在問問題的。

124
00:22:06,000 --> 00:22:23,000
在graph的世界裡面有一種模型叫做configuration model,它的意思是說呢,今天我給定了一個graph,那我知道這個graph裡面的degree sequence是告訴我每一個點它有幾個鄰居。

125
00:22:24,000 --> 00:22:28,000
這個degree sequence它是一個很local的資訊。

126
00:22:28,000 --> 00:22:40,000
有時候呢,這個網路它可能有一些性質是我不確定它到底有多特殊,或是說它到底跟local的degree有多大的關聯。

127
00:22:40,000 --> 00:22:49,000
所以呢,我可以用configuration model把這個網路隨機化,就是隨機成很多不同的網路。

128
00:22:49,000 --> 00:22:55,000
可是呢,我要求這些不同的網路,它們的degree sequence都跟我觀測到的那個是一樣的。

129
00:22:55,000 --> 00:23:08,000
那我再去問說,在各個不同的網路裡面,我在意的那個性質,形成的分布跟我實際上觀測的這個數據的分布,實際上觀測的這個數據的這個值有沒有什麼樣的差別。

130
00:23:09,000 --> 00:23:25,000
如果有差別的話呢,我就會覺得說,這個我觀測到的網路可能在這個degree,可能有一些特別的地方,超過degree sequence特別的地方,需要被解釋。

131
00:23:26,000 --> 00:23:28,000
一個例子呢,是這樣子。

132
00:23:28,000 --> 00:23:33,000
就是呢,這是一個Barn Sparrow,一種鳥。

133
00:23:33,000 --> 00:23:45,000
然後呢,大家覺得牠的顏色跟牠之間交配的繁殖率有關係,但是大家不確定是怎樣的關係。

134
00:23:45,000 --> 00:23:51,000
那他們做實驗,把這個鳥上面裝sensor,然後看鳥在一個空間飛。

135
00:23:51,000 --> 00:23:57,000
然後飛一飛,如果牠們靠近的話,牠就會連一個邊,然後形成一個網路這樣。

136
00:23:57,000 --> 00:24:07,000
那在這個網路裡面呢,他們就去算說,因為牠知道每個鳥的顏色,然後牠也知道不同顏色牠們之間有沒有interaction。

137
00:24:07,000 --> 00:24:19,000
所以他們就做出這個網路之後,他們就去算牠們之間的那個跟顏色有關的correlation,然後就獲得了這個虛線這個部分。

138
00:24:19,000 --> 00:24:35,000
那同時呢,這篇paper呢,也拿了這個數據,然後把他們觀測到的這個網路隨機化,然後每一個隨機化的component都算了一次這個pearson correlation,然後得到一個分布。

139
00:24:36,000 --> 00:24:46,000
然後所以,這一條是來自於這個數據觀測到的,然後這一條是來自於,這個分布是來自於你隨機化的。

140
00:24:47,000 --> 00:24:53,000
那你就會覺得說,牠們其實沒什麼差別這樣。

141
00:24:53,000 --> 00:25:06,000
所以呢,你不會覺得,所以在這裡好像是,你不會覺得說你這個color-color correlation有什麼特別之處是多過於degrees可以解釋的。

142
00:25:07,000 --> 00:25:13,000
相應的,假如說我觀測到另外一個數據,牠可能牠的correlation非常的低。

143
00:25:13,000 --> 00:25:21,000
比如說,假如說我,我不知道,假如說我另外一個數據,然後你觀測牠的color-color correlation,結果是落在這裡。

144
00:25:21,000 --> 00:25:33,000
那你這樣你就會問說,你就會覺得說,為什麼我現在觀測到的數據跟這個randomized之後的這個數據比起來牠的correlation特別的低。

145
00:25:33,000 --> 00:25:50,000
然後因為這個randomization是跟degrees有關的,你就會知道說,這時候牠裡面應該有一些是超過degrees的事情扮演在這裡面,然後我們要去問說為什麼這樣。

146
00:25:54,000 --> 00:25:56,000
目前為止有問題嗎?

147
00:26:03,000 --> 00:26:18,000
我問一下好了,我想要了解一下這個例子。中間的那個圖啊,牠的上面的數字是牠連了幾條線嗎?還是什麼?

148
00:26:18,000 --> 00:26:27,000
上面的數字應該是牠那個鳥的編號,然後粗細的話應該是牠有幾次的interaction。

149
00:26:28,000 --> 00:26:36,000
OK。然後灰色和白色的意思是牠們的color。

150
00:26:39,000 --> 00:26:48,000
然後右邊這個圖是怎麼做出來的?我剛剛沒有聽懂,可以再講一次嗎?

151
00:26:48,000 --> 00:26:58,000
我們觀測到這個圖之後,我們也有牠的color,所以我們其實可以算牠的color-color correlation。

152
00:26:58,000 --> 00:27:05,000
然後我們算出一個數字,可是我不知道這個數字到底是有沒有很特別。

153
00:27:05,000 --> 00:27:24,000
所以呢,他們就說呢,那我看看能不能夠把這個網路隨機化,找到很多跟牠結構不一樣,可是degree sequence一樣的其他網路。

154
00:27:24,000 --> 00:27:30,000
然後在上面呢,算牠的correlation,然後得到了一個分布。

155
00:27:30,000 --> 00:27:39,000
然後這時候呢,我們就可以問說,到底我觀測到的這個數據的correlation有沒有比較特別?

156
00:27:39,000 --> 00:27:43,000
OK。

157
00:27:45,000 --> 00:27:55,000
然後這個有沒有比較特別,是跟我這時候我要怎麼樣把這個網路給隨機化有關的。

158
00:27:55,000 --> 00:28:08,000
那這時候牠是固定了牠的degree,就是固定了牠每一隻鳥牠到底跟其他幾隻鳥interaction。

159
00:28:08,000 --> 00:28:15,000
然後固定了之後有很多其他不同的結構,然後問說我觀測到的這個是不是特別的。

160
00:28:15,000 --> 00:28:38,000
OK。所以這個例子中間,反正做這件事情statistically是OK的,但是你的意思是說,你要找到同樣degree sequence的圖,這件事情是圖論裡面需要研究的事情。

161
00:28:38,000 --> 00:28:41,000
這個結論是這樣嗎?

162
00:28:41,000 --> 00:28:50,000
對,這一篇paper就是提出了一個configuration model,可以把一個網路給隨機化。

163
00:28:50,000 --> 00:29:00,000
然後他舉出一個例子說,你可以隨機化之後,他這個ensemble就可以用來做統計上的一些測試。

164
00:29:00,000 --> 00:29:04,000
OK,OK,了解,OK,好,謝謝。

165
00:29:04,000 --> 00:29:12,000
所以如果只有看這篇paper的話,你可能會只得到一個pearson correlation,可是你不太知道它到底有什麼特別的地方。

166
00:29:12,000 --> 00:29:22,000
所以為了要知道它的特別地方,我想要把原本的數據固定了幾個參數,然後做出一個ensemble。

167
00:29:22,000 --> 00:29:31,000
然後來看看在這個ensemble裡面,所有的裡面的pearson correlation是不是,就是我觀測到的數據到底是有多特別。

168
00:29:32,000 --> 00:29:41,000
到底特別不特別這件事情,其實也取決於我懷疑它跟什麼樣的參數有關。

169
00:29:41,000 --> 00:29:49,000
比如說,我懷疑說這個pearson correlation可能跟度分布有關,可能跟degree distribution有關。

170
00:29:49,000 --> 00:29:55,000
所以我才故意的把它固定了之後,來看看這個分布,然後看看它有沒有落在裡面或落在外面。

171
00:30:01,000 --> 00:30:03,000
還有其他的問題嗎?

172
00:30:10,000 --> 00:30:24,000
好,然後呢,剛才是一個例子,就是我想要舉一個例子是local structure E。

173
00:30:24,000 --> 00:30:29,000
剛才那個鳥的例子就是,鳥到底跟幾個其他的鳥有interaction,

174
00:30:29,000 --> 00:30:37,000
然後以及它的global property是那篇生物的paper研究的,它的繁殖率可能跟顏色有關。

175
00:30:37,000 --> 00:30:45,000
那這是一個global跟local可能有關的一個例子,在某個數據裡面。

176
00:30:46,000 --> 00:30:57,000
另外一個相關的問題是,假如說我只拿到degree sequence之後,我能不能夠從它來生成一個網路。

177
00:30:57,000 --> 00:31:02,000
如果我可以的話,其實也可以用來回答很多有趣的問題。

178
00:31:02,000 --> 00:31:10,000
分別是在結構上的,以及在動態上的。

179
00:31:11,000 --> 00:31:24,000
例如說呢,我覺得這個比較domain specific,所以大家有興趣的再點進去看這個link。

180
00:31:25,000 --> 00:31:42,000
但是呢,這邊呢,想要說的事情是說呢,大家會懷疑說,我能不能夠從一個local的資訊生成一個結構,

181
00:31:42,000 --> 00:31:44,000
以及這個結構有沒有什麼特殊的地方。

182
00:31:44,000 --> 00:31:51,000
那如果你不能夠生成它的話,比如說我拿到一個degree sequence,我不知道怎麼生成一個network的話,

183
00:31:51,000 --> 00:31:57,000
那你就根本沒有辦法談說,在這個network上面要有什麼樣的結構是特別的。

184
00:31:57,000 --> 00:32:00,000
所以能夠建立起這個link是一個重要的事情。

185
00:32:00,000 --> 00:32:02,000
然後這是structure。

186
00:32:02,000 --> 00:32:15,000
然後第二個dynamical的意思是說呢,我不是傳染病專家,但是拿傳染病的例子來講的話,

187
00:32:15,000 --> 00:32:25,000
假如說,因為我們知道傳染病有時候傳得很快,是因為有些人他可能平常的生活中有機會一次接觸好幾百人,

188
00:32:25,000 --> 00:32:27,000
但這不是我們平常的生活。

189
00:32:27,000 --> 00:32:34,000
可是在這個人際網路的數據裡面,就是有特定的幾個人,他的degree非常地大。

190
00:32:35,000 --> 00:32:45,000
那在這樣的一個結構裡面呢,為什麼傳染病會傳染的特別的快呢?

191
00:32:45,000 --> 00:32:50,000
我們必須要有辦法生成這個結構,才可以回答這個問題。

192
00:32:50,000 --> 00:32:57,000
所以我們會需要有模型說呢,假如說我要生成一個網路,

193
00:32:57,000 --> 00:33:04,000
然後這個網路他的degree的分布呢,是很heavy tail,就是你看他的,你畫一個分布,

194
00:33:04,000 --> 00:33:11,000
然後說生活中只有一個朋友的有幾個人,然後有兩個朋友的有幾個人這樣,

195
00:33:11,000 --> 00:33:16,000
跟生活中有一千個朋友的有幾個人這樣,這是一個degree的分布。

196
00:33:16,000 --> 00:33:24,000
那你要從這個分布裡面去生成一個結構,然後你才可以在那個結構上面去跑傳染病的模型。

197
00:33:25,000 --> 00:33:34,000
那所以說,能夠有辦法從local的資訊生成一個結構,也是重要的,因為這樣的話才可以做一些實驗。

198
00:33:37,000 --> 00:33:43,000
對,所以這是我提供的一些motivation,關於我要講的這個工作。

199
00:33:44,000 --> 00:33:54,000
那再深入一點進入主題呢,是說呢,我們剛才講了這個local的東西,就是degrees。

200
00:33:54,000 --> 00:34:02,000
然後我們有觀測到一些數據這樣,通常呢,你觀測到數據之後,你要拿到degree是很簡單的事情。

201
00:34:02,000 --> 00:34:13,000
比如說你知道,你有一個班級有三十個人,然後你就去問每個人他有,你覺得在這個班上他的朋友是哪些人這樣。

202
00:34:13,000 --> 00:34:22,000
那你就拿到一個這個班級的朋友的網路,那你要從這個朋友的網路裡面去拿到他的degree,其實很簡單,

203
00:34:22,000 --> 00:34:26,000
你就去拿每一個人看,然後看他周圍有幾個朋友這樣就好了。

204
00:34:27,000 --> 00:34:30,000
對,這個方向通常是比較簡單的這樣。

205
00:34:30,000 --> 00:34:38,000
那可是反過來是比較難的,就是你要怎麼樣,只跟我講每個朋友,比如說這個班有三十個人,

206
00:34:38,000 --> 00:34:47,000
然後你給我一個,你給我三十個大於零的數字,然後你能不能夠創造出一個網路,這個反過來問是比較難的。

207
00:34:48,000 --> 00:34:55,000
那相應的是呢,如果你要拿到這個網路之後,你要把它隨機化,找到一個ensemble,

208
00:34:55,000 --> 00:35:03,000
使得這個ensemble裡面的每一個網路他都有一模一樣的degree sequence,這件事情也是比較困難的事情。

209
00:35:04,000 --> 00:35:10,000
那我列出來的就是大家的工作,然後都可以點進去看。

210
00:35:10,000 --> 00:35:17,000
那比較近一點呢,就是你拿到一個symptom complex,怎麼樣把它隨機化,

211
00:35:17,000 --> 00:35:27,000
使得這個隨機化裡面的每一個symptom complex,他們都具有一模一樣的degree跟size sequence。

212
00:35:28,000 --> 00:35:36,000
那這個YPVP17,2017,就是剛才所啟發我的那篇paper。

213
00:35:37,000 --> 00:35:47,000
那為什麼這個問題是,同樣的事情是在hypergraph會出現這樣,那為什麼我會做這個工作呢?

214
00:35:47,000 --> 00:35:55,000
原因是因為呢,他們這篇paper裡面,他們提出的是一個隨機化一個結構的方法,

215
00:35:56,000 --> 00:36:08,000
然後他們去說明說,他們這樣子隨機化之後,可以explore所有可能的space,

216
00:36:08,000 --> 00:36:16,000
他有一些數學的argument在裡面。可是呢,這個方法呢,他必須要有一個數據在那邊,

217
00:36:16,000 --> 00:36:22,000
然後你才可以把那個數據給隨機化。可是呢,他沒有辦法回答一些問題,

218
00:36:22,000 --> 00:36:30,000
像是,今天我想要有一個比較理論方面的degree跟size sequence。

219
00:36:30,000 --> 00:36:39,000
那我想要知道說,比如說我的degree跟size sequence,他們都是剛才說的那種heavy tilt那種結構。

220
00:36:39,000 --> 00:36:46,000
那我能不能夠用它來生成一個數據,然後再把它隨機化。

221
00:36:46,000 --> 00:36:55,000
然後如果沒有,我這篇paper的話是不容易做到,他們只能夠去隨機的嘗試說,

222
00:36:55,000 --> 00:37:01,000
能不能夠從這個input sequence來找到一個數據,然後再把它隨機化。

223
00:37:01,000 --> 00:37:05,000
所以呢,我的工作是一個演算法的一個工作。

224
00:37:06,000 --> 00:37:20,000
我想要問一個問題,就是我還是不太懂,就是隨機化跟這個找到一個,

225
00:37:20,000 --> 00:37:32,000
我的了解是第一個問題是,你有給定一個degree sequence,然後你能不能找到一個圖,

226
00:37:32,000 --> 00:37:39,000
它符合這個degree sequence,這個是你畫綠色的線這個地方嗎?是嗎?

227
00:37:39,000 --> 00:37:42,000
如果只是圖的話,應該是這個地方。

228
00:37:42,000 --> 00:37:47,000
找到一個simplicial complex data。

229
00:37:47,000 --> 00:37:51,000
對,如果是simplicial complex data,就是我這個綠色的地方。

230
00:37:51,000 --> 00:37:57,000
然後你是只要找到一個就好了嗎?還是說你只要找到一個就好了?

231
00:37:57,000 --> 00:38:03,000
原因是因為我找到了這個之後,我就可以用這邊的方法把它隨機化,那在統計上就有用了。

232
00:38:03,000 --> 00:38:07,000
OK,但是那個隨機化跟這個件事情有什麼不一樣?

233
00:38:07,000 --> 00:38:15,000
就是我的了解是,隨機化你不也是要從,就是你給定一個simplicial complex data,

234
00:38:15,000 --> 00:38:19,000
那你就已經知道degree了,degree sequence了。

235
00:38:19,000 --> 00:38:24,000
所以你就等於是從degree sequence到隨機化。

236
00:38:24,000 --> 00:38:29,000
你要找到,你等於要找到很多個圖。

237
00:38:29,000 --> 00:38:32,000
是這個意思嗎?

238
00:38:32,000 --> 00:38:40,000
如果是這些隨機化的演算法要可以用的話,它必須要有個結構。

239
00:38:40,000 --> 00:38:51,000
如果你只有給我兩個整數序列的話,我是不能夠去比如說去swap它的邊,然後來改變它的結構的。

240
00:38:51,000 --> 00:39:03,000
哦,所以這個隨機化的過程是你要先給定一個結構,然後它可能做一些swap什麼東西的,然後把它變成一樣degree的圖。

241
00:39:03,000 --> 00:39:10,000
對,所謂的一個結構就是像動畫,像這種東西。

242
00:39:10,000 --> 00:39:14,000
就是我必須要先給我一個結構,然後我才可以用隨機化的算法。

243
00:39:14,000 --> 00:39:25,000
它隨機化的算法通常都是跟swap邊有關,比如說把兩兩個邊swap,然後swap的同時保持它們的degree是不變的。

244
00:39:26,000 --> 00:39:33,000
但是如果你沒有這樣的結構的話,你是沒有辦法做這邊這些事情的。

245
00:39:33,000 --> 00:39:39,000
OK,所以綠色的線等於是說我要找到第一個,然後我們可以開始來隨機化。

246
00:39:39,000 --> 00:39:40,000
對對對。

247
00:39:40,000 --> 00:39:42,000
OK,了解,謝謝。

248
00:39:42,000 --> 00:39:43,000
對。

249
00:39:43,000 --> 00:39:45,000
好,太好了。

250
00:39:45,000 --> 00:39:51,000
我發現我的時間好像不太夠,我要講快一點,但是我可能會跳過一些slide。

251
00:39:51,000 --> 00:39:55,000
我還是希望可以在一個小時左右講完。

252
00:39:55,000 --> 00:40:07,000
那要做這件事情,其實我並沒有解決全部的問題,原因是因為這個問題被人家證明說它是一個NP-complete的問題。

253
00:40:07,000 --> 00:40:21,000
然後如果你在做研究發現一個問題被證明NP-complete的話,通常告訴你說你其實沒有辦法找到一個演算法它是可以完全的有效的有用的這樣。

254
00:40:22,000 --> 00:40:24,000
那就很可惜啊。

255
00:40:24,000 --> 00:40:39,000
可是那時候呢我就覺得很有趣,因為,oh, by the way,就是這件事情測試兩個整數序列能不能夠找到一個NP-complete這件事情應該是一個困難的問題。

256
00:40:39,000 --> 00:40:46,000
那我覺得有趣的事情是呢,我那時候就真的去畫圖,就好像在做那個速讀一樣。

257
00:40:46,000 --> 00:40:53,000
就是呢,我就畫,最後我就用Excel在做研究,就是呢,這個問題就是變成這樣子。

258
00:40:53,000 --> 00:41:02,000
比如說呢,我給定兩個整數序列,一個是433221,這是它的degree的序列在這裡。

259
00:41:02,000 --> 00:41:08,000
然後我給定另外一個整數序列,叫做它的size序列,叫做33333。

260
00:41:08,000 --> 00:41:22,000
那我的目標呢,就是在這個矩陣裡面啊,填0或是1,使得它的這個每一個column加起來剛好是4,這個加起來要剛好是3。

261
00:41:22,000 --> 00:41:26,000
每一個row加起來要剛好是3,這樣。

262
00:41:28,000 --> 00:41:36,000
除了這個之外呢,還有另外一個讓這個問題變得困難的一個條件,變得困難的一個限制。

263
00:41:36,000 --> 00:41:45,000
就是呢,任兩個row,它們不能,不能有其中一個是另外一個的subset這件事情。

264
00:41:46,000 --> 00:41:59,000
這是來自於剛才說的simplicial complex的定義,就是我希望我在這裡表示的這些結構都已經是最大的simplicial complex,就是那些facets。

265
00:41:59,000 --> 00:42:14,000
所以假如說呢,我在這裡填1111,可是這裡呢,我還是想要填1111的話,那這個1111就跟下面這個1111是互相構成其中一個是另外一個subset,或是vice versa。

266
00:42:14,000 --> 00:42:21,000
那我就不能夠在這裡也填1111,所以這時候我就只能填1111,然後跳一個變成1,這樣。

267
00:42:21,000 --> 00:42:24,000
所以這兩個才不會互相是彼此的subset。

268
00:42:25,000 --> 00:42:36,000
那假如說呢,這一行我只需要填兩個1的話,我也不能夠填比如說1111,因為這樣1111就會被上面這個1111給包進去了,這樣。

269
00:42:37,000 --> 00:42:47,000
所以那時候呢,我就試了很多這種填1跟0的方法,然後加一加看看能不能夠加到它們給定的這個數字,這樣。

270
00:42:48,000 --> 00:42:55,000
那剛才說的那個限制條件就是讓這個問題困難的原因,可是我發現呢,有些例子它其實很簡單。

271
00:42:55,000 --> 00:43:09,000
比如說,如果我這裡的全部都,這個input degree全部都是1的話,那這裡有15,所以我這裡就要有15個1,1111,這樣。

272
00:43:09,000 --> 00:43:16,000
那我就可以這樣做,就1111,然後跳一個變1111,然後再跳一個1111,點點點,這樣。

273
00:43:16,000 --> 00:43:23,000
那我就很容易地創造出一個結構是符合剛才我說的那個degree size sequence。

274
00:43:23,000 --> 00:43:37,000
那所以呢,我的這個工作呢,是我想到了一個演算法,它是一個heuristic,在電腦科學裡面heuristic的意思就是說呢,

275
00:43:37,000 --> 00:43:52,000
你有一個,你有一個規則是你演算法的每一步的時候你都要去遵循的,那規則都是很local的,可是就是很surprising你這個規則可以用,這樣。

276
00:43:52,000 --> 00:43:57,000
就是一個heuristic,沒有辦法保證它是最好的,但是它是一個可以用的。

277
00:43:57,000 --> 00:44:15,000
那我們發現說,大部分的input sequence我都可以用,我等一下會說的演算法來找到一個instance,使得就是剛才說的那個,加一加鑰匙,兩邊的input的這個事情,這樣。

278
00:44:16,000 --> 00:44:28,000
好,那我講完這個演算法之後呢,我就會跳過一些slides,然後來講我的,我覺得有趣的interlude,然後最後就會wrap up。

279
00:44:28,000 --> 00:44:42,000
這是我的演算法,當然我不會講這個演算法,但是呢,它的想法大概是這樣,就是我想要試所有可能的0跟1,可是我在試的時候呢,我不想要隨機地試。

280
00:44:42,000 --> 00:44:54,000
我希望呢,我一開始的時候呢,我這個input,我把它排成是由大到小排起來,4、3、3、3、3、2、1,然後另外這個size input,我也是由大到小排起來。

281
00:44:54,000 --> 00:45:11,000
排完了之後呢,我就從上面開始往下填1或0,但是在填的時候呢,我要要求說呢,這個degree大的要趕快先碰在一起,變成是一個simplex,所以我要從左邊開始慢慢往右下角填。

282
00:45:12,000 --> 00:45:21,000
所以呢,我每一次填的時候,我這個facets都有一個規則,說我要,我希望degree大的人先碰在一起。

283
00:45:22,000 --> 00:45:37,000
那在排的時候呢,我也可以確定說,by the way,這是一個recursive演算法,我看到一個while在這裡,然後我有一些條件在裡面這樣。

284
00:45:37,000 --> 00:45:46,000
那每一次在填這個0跟1的時候呢,有時候我可以算得出來說,有時候我可以知道我這樣填0跟1是不是一定是錯的。

285
00:45:46,000 --> 00:46:03,000
比如說呢,假如說我在,我這裡填完了,然後這裡有填一個1,然後這裡呢,再填一個1,那這裡就不可能填1了,因為我這裡已經有4個1,然後加起來是4了。

286
00:46:03,000 --> 00:46:10,000
所以這裡如果再填1,我就會超過4了,那這時候我就不用去試這個,這裡是1的這個條件,如果在這一行的話。

287
00:46:11,000 --> 00:46:22,000
所以呢,其實每一行在填的時候有一些,我可以不要繼續往下填的一些條件,我可以知道,然後我就可以把這個選項刪除。

288
00:46:22,000 --> 00:46:33,000
然後所以它其實是一個有點笨的方法,我要真的是把所有可能性都都都找到,只是呢,這個我在找這個可能性的時候,我是有一個特定的順序的。

289
00:46:33,000 --> 00:46:41,000
然後,嗯,這篇研究有趣的地方是,這個特定的順序是,竟然是有用的這樣。

290
00:46:42,000 --> 00:46:55,000
那我們也有一些在裡面的一些,比如說我填一個,然後我最後發現說這條路不同,我就會記錄說,啊,這條路不同,我有一個rejection。

291
00:46:55,000 --> 00:47:03,000
那如果太多rejection,然後我就會放棄,因為我知道這個問題是很難的,然後我不想要就是把所有可能性都都找到。

292
00:47:03,000 --> 00:47:21,000
那,嗯,那我,我會跳過這個部分,這個部分呢,是我要做,要做測試,就是我希望呢,我可以找所有加起來是13的這個整數序列。

293
00:47:22,000 --> 00:47:37,000
各種,所以這其實是有101個,加起來,101個,加起來會是13的整數序列,然後我這是101乘以101,所有的可能性,然後我想要去跑,嗯,剛才說的那種演算法。

294
00:47:37,000 --> 00:47:49,000
然後來看看說他到底每一個組合,他到底會不會拿到一個simplicial,就是拿到一個simplex,當作他的output,或是說我最後放棄了,拿到nonsimplicial。

295
00:47:50,000 --> 00:48:03,000
那,嗯,這邊呢,我想要說的故事是呢,其實大部分的,因為,嗯,這裡有個tau是我在算那個我花多少時間,然後我的時間的定義是我到底有幾次是倒退的。

296
00:48:03,000 --> 00:48:17,000
就是我,嗯,本來,嗯,往一個row一個row往下找嘛,然後有時候我可能在某一個特定的row我發現沒有路了,我要再倒退一格,這樣就是backtrack的數目,然後跟我,嗯,被拒絕的數目這樣。

297
00:48:17,000 --> 00:48:22,000
被拒絕就是我剛才有一些很簡單的規則,然後我發現這條路不同,就拒絕。

298
00:48:22,000 --> 00:48:30,000
那大部分都是白色或是這個灰色的,所以其實大部分的,大部分的input他是簡單的。

299
00:48:30,000 --> 00:48:34,000
所以這裡我要說的其實就是大部分的input是簡單的。

300
00:48:35,000 --> 00:48:52,000
好,那這張我就要快一點跳過去,那這張主要是在講說呢,就是,嗯,這件事情,嗯,可以scale up到,嗯,加起來會是1000的這種,嗯,simplicial complex。

301
00:48:53,000 --> 00:48:56,000
剛才是加起來到13而已,現在加起來可以到1000。

302
00:48:56,000 --> 00:49:11,000
那,嗯,我還是可以很快的找到裡面的一些那個到底是不是simplicial,然後跟,嗯,跟我在做這件事情的時候我花的時間這樣。

303
00:49:11,000 --> 00:49:20,000
然後我發現大部分的例子他花的時間都,都蠻少的,就是在polynomial的時間內可以被我算出來。

304
00:49:20,000 --> 00:49:32,000
那,所以我就在這裡下一個結論就是,欸,這個方法是一個有用的方法,我可以,嗯,拿他做,嗯,隨機的input,我就可以拿他來找到一個結構。

305
00:49:32,000 --> 00:49:45,000
我可能會需要放棄一些些,因為我沒有辦法確定說我到底漏掉哪些,因為這個問題本身是難的,但是,嗯,如果我這個數字大的話,我還是可以用他來做一些有用的統計上的事情。

306
00:49:45,000 --> 00:50:06,000
好,然後,嗯,和剛才,所以,嗯,這個paper的進展是講就是說,嗯,因為我剛才有規定說,嗯,我在找這個結構的時候,我希望,嗯,那些degree大的,朋友多的要自己先聚成一體,聚在一起這樣。

307
00:50:06,000 --> 00:50:17,000
那,這件事情會不會有一些特別的一些結構被我,被我找到,所以呢,我去算,嗯,這個結構裡面的有幾個洞這樣。

308
00:50:17,000 --> 00:50:27,000
好,那這是一個在那個topological data analysis裡面的一個標準的一個方法,就是如果我有一個simplicial complex,我可以問他有幾個洞這樣。

309
00:50:27,000 --> 00:50:43,000
那,像這樣的話就是一個洞,在,在中間這樣。那,嗯,這個洞的話,這個洞的數目是用一種東西叫做betty numbers來描述,然後他會有各種不同dimension的洞。

310
00:50:43,000 --> 00:51:02,000
比如說,嗯,betty 0就是有他有幾個kinetic component,這次有兩個,然後betty 1他只有一個kinetic component,可是他剛好有一個洞,所以他的betty 1是1,然後betty 0是1,然後h2的話就是更高階的洞等等。

311
00:51:03,000 --> 00:51:20,000
好,開始割愛,這邊就調過,因為這邊的話只是要說呢,嗯,剛才說的那種,嗯,那種heuristic真的會有一些特別的結構是,是被我創造出來。

312
00:51:20,000 --> 00:51:37,000
然後就也沒有,沒有什麼,就是科學上沒有什麼用,但是他是這個演算法的一個特性,就是這個特性會幫助我們找到,嗯,很很分散的跟洞很少的這種結構。

313
00:51:38,000 --> 00:52:00,000
那,嗯,那重點呢,其實不是這個結構長什麼樣子,而是我可以建立一個橋,就是從input的integer sequence找到一個結構,然後我想要用別人做好的randomize的方法來找到一個ensemble,然後來回答一些問題。

314
00:52:00,000 --> 00:52:05,000
所以這只是做一些capitalization,就是關於我這個演算法的一些特性。

315
00:52:07,000 --> 00:52:16,000
好,然後,這不是一個interlude,就是說為什麼要算有幾個hole啊?因為,嗯,有時候其實知道這個數據有幾個hole是重要的。

316
00:52:17,000 --> 00:52:42,000
拿剛才說的那個腦區的例子來講的話,嗯,大家其實可以知道說,嗯,正常人的腦在某一些特定刺激下面的這個結構的那個洞的數量跟,嗯,有,有這種external dropout,一種神經方面的疾病的人的腦的這個結構,這兩個洞的數量會不一樣。

317
00:52:43,000 --> 00:53:00,000
這是一個,嗯,算,算有幾個洞,嗯,可能會有用的地方。那,其他會有用的地方呢,是,嗯,嗯,是在,嗯,signal processing,訊號處理。

318
00:53:01,000 --> 00:53:18,000
嗯,這個事情呢,是說呢,假如說我有一個數據,這個數據呢,我觀測到的是這些,在一個網路上面,這個,嗯,所有的這個灰色都是一個網路,然後呢,所有這個有顏色的就是我觀測到的數據,這樣。

319
00:53:18,000 --> 00:53:39,000
然後呢,在這個數據裡面,因為我現在很清楚,我看到全部的數據,我知道這個數據有兩個洞,然後,嗯,這兩個洞在結構上很特別,可是我觀測到的這個,這個有顏色的這個箭頭,我不知道它到底,嗯,跟這個洞有什麼關係,這樣。

320
00:53:39,000 --> 00:54:04,000
那,嗯,有一個方法呢,就是我可以把這些觀測到的這個箭頭投影到兩個洞上面。這有點像是那個大家學統計的那個PCA,因為PCA會有兩個principle component,我可以把它投影上去,然後看看說它在這兩個不同方向,嗯,的的資訊是不是可以最大的解釋,嗯,我觀測到的數據,這樣。

321
00:54:05,000 --> 00:54:24,000
那如果你把這個數據投影上去的話,你就會發現說,嗯,這三條有顏色的線被group在一起,然後另外三條group在一起,然後另外三條group在一起。為什麼它們會被group在一起呢?是因為任何在一個group的線,它沒有辦法不跳過這個洞,就deform到旁邊去。

322
00:54:24,000 --> 00:54:44,000
比如說,我固定這兩頭,然後想要拉一下這個繩子,我就沒有辦法繞過這個洞,因為我只能在這個地方,就是擠來擠去,這樣。對,所以,嗯,這是一個可以從,嗯,可以從你的數據,然後拿到一些跟幾何方面的一些有關的事情的方法,這樣。

323
00:54:44,000 --> 00:54:57,000
然後,嗯,這是一個小領域叫做Signal Processing on Simplicial Complexes,然後我列出一些文章,大家可以在裡面找到一些有趣的例子。

324
00:54:58,000 --> 00:55:20,000
那,嗯,最後呢,這張投影片我要全部跳過去。這張投影片呢,大致上是講說,嗯,我們,如果我們限制我們的世界是一個網路,我們只能夠看到網路的話,那我們,我們在意這個網路上面的一些,嗯,就是它的洞的數量。

325
00:55:20,000 --> 00:55:47,000
所以,嗯,我們,然後呢,我們有一些intuition,像是,比如說這個網路如果越來越密集的話,那其實我們會覺得這個洞會越來越多,因為就是一個越來越密的網路嘛,所以它的圈圈,它的洞就越來越多。嗯,可是這個intuition並不能夠完全carry到,嗯,Simplicial Complex裡面,因為,嗯,因為剛才說的那個Simplicial Complex的那個,那個限制。

326
00:55:47,000 --> 00:56:06,000
所以呢,嗯,它的,它的,剛才說的那個描述剛好反過來,就是如果是一個越來越密的Simplicial Complex的話,它的洞其實是越來越少的。就有一些這種,嗯,跟結構一些有,有關的一些有趣的事情。好,所以這是我的結尾slide。

327
00:56:06,000 --> 00:56:27,000
嗯,我覺得最重要的資訊呢,是我們現在已經,嗯,用了這個,我開發的這個方法呢,它可以用來對arbitrary的degree size sequence,我可以用來找到一個結構。那這時候我就可以用,嗯,別人的,嗯,隨機化方法,隨機化一些網路,那就可以問統計上的一些問題。

328
00:56:28,000 --> 00:56:52,000
那第二個有趣的事情呢,是,嗯,剛才說的這個,這個電腦科學的問題呢,它有一個特性叫做fine-grained complexity,這意思是說呢,嗯,大家如果去google NP complete,就會在它的wikipedia找到這張圖。那事實上,在這裡面的世界還是很豐富的,就是可能有簡單有難這樣,所以它是fine-grained complexity。

329
00:56:53,000 --> 00:57:11,000
那,嗯,我有把那個演算法寫成是一個python package,所以直接打開一個terminal就可以直接用這個演算法。那最後呢,我覺得這個工作有,嗯,有motivate一些問題。

330
00:57:12,000 --> 00:57:34,000
就是,嗯,剛才說的那個,實際上應該是in general很難的問題,為什麼會有一個簡單的算法可以算到裡面,嗯,就是裡面大部分的instance都可以解決,那為什麼它會這麼成功呢?嗯,嗯,就我還沒有辦法在那個paper回答這個問題這樣。

331
00:57:34,000 --> 00:57:47,000
那剩下的在統計方面呢,是我可以問說,嗯,假如說我看到一個數據,那我就可以想,嗯,這個數據跟它有關的固定了幾個參數之後隨機化的這個數據。

332
00:57:47,000 --> 00:58:00,000
那,嗯,有什麼樣的差別?為什麼我的數據可能會跟,嗯,我認為應該要,嗯,就是應該要試的一些,嗯,參數。

333
00:58:01,000 --> 00:58:15,000
開始有輪子,抱歉,就是,嗯,我這個數據裡面,我有觀,我有觀察一些我覺得有趣的事情,那我會,嗯,希望知道說,嗯,它到底是不是真的有趣。

334
00:58:15,000 --> 00:58:25,000
所以為了要知道這件事情,我就需要隨機化一些部分這樣,那這是一個在統計方面的一些,嗯,嗯,常問的問題。

335
00:58:26,000 --> 00:58:38,000
那,嗯,更廣一點的話,就是因為,嗯,這是描述複雜,這是一個複雜系統相關的一個,一個問題嗎?那在複雜系統裡面,我們通常會有一些component,就是它的agents。

336
00:58:38,000 --> 00:58:46,000
那,嗯,剛才說那些local structure都是,比如說我選擇我要交怎麼樣的朋友,那這是一個我local做的選擇。

337
00:58:46,000 --> 00:58:58,000
但我最後,嗯,人際社會是一個global的事情這樣,那在不同的數據是不是有一些,嗯,我們可以問的,嗯,local跟global之間的連結。

338
00:58:59,000 --> 00:59:16,000
好,那,嗯,這是我列出,嗯,我覺得有用的reference,然後因為今天的主題是,嗯,比較跟high order的network有關,所以這幾篇文章都是跟,嗯,就是一些technical survey。

339
00:59:17,000 --> 00:59:27,000
然後呢,嗯,剛才說到一些給定一個數據怎麼樣算這個數據裡面的拓撲結構,嗯,有三個有用的,嗯,link可以參考。

340
00:59:28,000 --> 00:59:39,000
好,那,嗯,嗯,我覺得這個領域是network science的領域,然後,嗯,它有一些community,比如說這個net size是每年都會舉辦的一個會議。

341
00:59:39,000 --> 01:00:01,000
那,嗯,我自己有在這個,嗯,since這個組織裡面這樣,然後,嗯,他們每年,嗯,我們每年都會在這個net size辦一些活動,那我們有一個slack,如果有興趣加入的可以寫email給我,這個點進去都可以有用。

342
01:00:01,000 --> 01:00:14,000
那其他的事情是,嗯,有一個women in network science的seminar,那,嗯,很像tera,那裡面就是會有一些跟network science有關的talk。

343
01:00:15,000 --> 01:00:25,000
那相應的還有這個diversify net size symposium。好,我講完了,謝謝。

344
01:00:26,000 --> 01:00:39,000
主持人:"謝謝子齊,那我們可以打開麥克風鼓掌一下。那這邊聽眾有沒有問題呢?"

345
01:00:39,000 --> 01:01:01,000
主持人:"我這邊有問題,不知道可不可以提問。主辦人,然後,子齊你好,我是中研院社會所的李宣偉,上次就有聽過子齊的演講,真的是兩年前,然後還是一樣精彩,就是很謝謝子齊的分享。

346
01:01:01,000 --> 01:01:18,000
因為我們有做跟子齊今天講的主題,還有order network相關的研究,所以聽到這個就覺得非常興奮,看能不能用到我們自己的研究上面。那有幾個問題想要跟子齊請教一下,大概三個。

347
01:01:18,000 --> 01:01:36,000
第一個是說,我們在實際資料上面有蠻多不同的種類,就像是你的節點有不同的種類,節點有像是性別、男性、女性、種族、黑人、白人、亞洲人。

348
01:01:36,000 --> 01:02:01,000
像這個是一個note type,那edge也是,edge的話你可以加上不同的權重,你可以是01的,你也可以是各種時數的,或者是幾種值的,0.510123,或者是你可以是sign,你可以是正負號,不同的edge,那你的edge也可以有方向性,你可以指向不同的地方。

349
01:02:01,000 --> 01:02:16,000
那你現在用的這個演算法,有沒有想過說以後可以推廣到不同的note type或edge type,或甚至增加方向性,我不知道這在simplicial complex裡面會不會是一個重要的延伸方向,這是第一個問題。

350
01:02:16,000 --> 01:02:36,000
第二個問題是,我很好奇就是,子希,你提的這個演算法,它是你給定一個sequence,degree sequence,跟另外一個,我忘了那個名字,但你給定兩個sequence之後,你可以推到整個一個可能的圖,甚至未來的方法可以算出整個ensemble。

351
01:02:37,000 --> 01:03:05,000
如果我今天提給你的是一個部分的資訊,假設我拿我收的資料做一個類比,我班上有30個同學,假設只有10個同學填這個資料,然後我們假設他填的資料是完整的,那我能不能藉由你的方法算出這10個人給的資料當中,可能是你這個文章沒有處理到,但是一個背後的問題,我不知道你的見解。

352
01:03:06,000 --> 01:03:26,000
拿這10個人的資料去還原整個30個人班上的ensemble,那這個的信賴程度是不是值得這樣去做?我其實不太知道,這是第二個。如果你只得到部分的觀察資訊,你能不能去猜整個團體的互動,各種高階低階的互動是長怎樣?

353
01:03:26,600 --> 01:03:35,000
最後一個問題是,您最後提到了homology,像是persistent homology,的確在這個領域上是發展非常快速的。

354
01:03:36,000 --> 01:03:46,000
我們在做社會學研究的時候,也會有不同的洞。您剛剛說的這些洞,我們講說是高階互動的洞,在社會學裡面的洞有一個叫結構洞。

355
01:03:46,000 --> 01:04:00,000
結構洞就是說,兩個群體之間可能連結的沒有這麼密,會有一些關鍵的樞紐,把兩個比較不怎麼樣有聯繫的團體聯繫在一起,然後中間補足了一個結構洞。

356
01:04:01,000 --> 01:04:17,000
不知道就您的觀察或者感覺,這兩種洞,一個是從homology來的這種homology的洞,跟社會學研究在graph上面的這種叫做結構洞,有沒有可能有些相關?

357
01:04:17,000 --> 01:04:30,000
您剛剛說,homology的結論也不一定,圖越密不一定越多越少。我一直想說這兩個,我其實沒有想得很通,我想要問問看您的意見。總之,非常精彩的演講,謝謝您。

358
01:04:47,000 --> 01:05:02,000
因為這些研究都是從數據出發,我要有一個數據,然後來問我這上面感興趣的問題。我覺得simplicial complex的數據蠻少的,圖的比較多。

359
01:05:02,000 --> 01:05:19,000
所以,其實有一些研究是怎麼樣從一個觀測到圖的數據裡面去做統計推論,比如說三個人他們之間都互相連結。

360
01:05:19,000 --> 01:05:42,000
其實我們表示它表示成是三個邊,沒有比把它們表示成一起的一個hyper edge還要來得有效,統計上有效。所以,有很多這種怎麼樣從一個pairwise data infer high-order structure的問題。

361
01:05:43,000 --> 01:06:03,000
所以,您剛才說的問題,我要refresh聽眾。第一個,是跟attribute有關的,就是能不能夠延展我剛才說的configuration model的工作。

362
01:06:04,000 --> 01:06:27,000
然後到今天,如果我有一個數據,比如說人際網絡數據,節點可能有種族、收入等等的,我要固定它,然後來生成一個ensemble。我不知道,但是所有的這些問題我會回到graph來看。

363
01:06:27,000 --> 01:06:41,000
我沒有印象graph有做相關的研究,但是我覺得好像是一個很好的出發點,因為它就可以幫助我們回答其他的統計問題。

364
01:06:41,000 --> 01:06:58,000
第二個問題是,其實前兩個問題我都不知道。

365
01:06:58,000 --> 01:07:18,000
第二個問題是,今天假如說我一個班級有五十個人,當然從我講的這個演算法,我可以把它隨機化。隨機化裡面的每一個結構我都可以拿它算一個統計性質,去拿到一個分布。

366
01:07:19,000 --> 01:07:38,000
可是假如說我只有辦法觀測到這五十個裡面的一部分的人,那我怎麼樣從這一部分的人裡面拿到最多的資訊呢?跟其實我應該要有的分布拿到最多的資訊呢?我也覺得是一個很好的研究問題,我不知道。

367
01:07:39,000 --> 01:07:50,000
而且我覺得剛才說的這兩個問題,在graph上面都,我好像沒有看過這樣的工作,只在graph上面的話。

368
01:07:51,000 --> 01:08:08,000
第三個問題可能相較比較好回答一點是,所以我聽起來那個structural hold比較像是一個定性的一個定義,對不對?

369
01:08:09,000 --> 01:08:24,000
如果是這樣子的話,因為在topology裡面,要算topology、要算homology、要算動的這件事情,它是有一個明確的依循的。

370
01:08:24,000 --> 01:08:43,000
就是technical是說,我要把這個數據分成不同dimension,然後這些dimension形成一個chain complex,然後chain complex裡面不同的dimension,我們之間用所謂的boundary map連接。

371
01:08:43,000 --> 01:08:56,000
然後boundary map要形成一些性質,比如說,鄰近的boundary map相乘之後必須要是0。因為這樣子的一個數學性質,我才可以在裡面去算動。

372
01:08:57,000 --> 01:09:18,000
所以如果是一個social network,然後我要問說,它上面的動到底跟structural hold有什麼關聯的話,我會覺得只有看結構好像不太能夠回答這個問題。

373
01:09:18,000 --> 01:09:29,000
因為你的structural hold的定義上就已經包含了一些跟節點有關的tributes,比如說誰是連接兩個群體裡面最有影響力的。

374
01:09:30,000 --> 01:09:45,000
可是如果是topology的話,它完全就是數學上的,就是你跟我講這個結構是怎麼樣,有幾個填滿的三角形,有幾個被填滿的兩個邊,然後去算。

375
01:09:46,000 --> 01:10:03,000
所以topology裡面的hold完全是結構上的,可能會跟社會學有關的性質的structural hold有關,也可能沒有關。

376
01:10:04,000 --> 01:10:06,000
謝謝。

377
01:10:08,000 --> 01:10:13,000
我可能在offline問一些東西,我們感興趣再丟給你看。

378
01:10:13,000 --> 01:10:15,000
好,謝謝。

379
01:10:15,000 --> 01:10:17,000
您還有問題嗎?

380
01:10:17,000 --> 01:10:19,000
我自己可以問一個問題嗎?

381
01:10:19,000 --> 01:10:33,000
你剛剛提出了一個heuristic的演算法,然後在我看起來,因為我對這個完全不熟,

382
01:10:34,000 --> 01:10:42,000
你的演算法看起來是,如果這個演算法找到一個解,那你就成功了嘛。

383
01:10:43,000 --> 01:10:52,000
但是剛剛在你show的一張圖裡面,它有那些non-solution的部分,那個是怎麼做到的?

384
01:10:52,000 --> 01:10:58,000
我看起來好像你的演算法並沒有算完所有的combination,你怎麼知道就是沒有解?

385
01:11:00,000 --> 01:11:04,000
這是很好的問題,是我跳過,因為有點趕著時間。

386
01:11:05,000 --> 01:11:10,000
因為我知道我不能夠,我不能夠用這個演算法去解,

387
01:11:10,000 --> 01:11:16,000
所以我有設定一個cut-off,然後如果我失敗的次數大於那個cut-off,我就說沒有解。

388
01:11:19,000 --> 01:11:23,000
但是有可能我再認真一點算就會有解,就是我等夠久的話就會有解。

389
01:11:24,000 --> 01:11:28,000
對,但是如果我失敗的次數大於那個cut-off,我就說沒有解。

390
01:11:29,000 --> 01:11:33,000
但是有可能我再認真一點算就會有解,就是我等夠久的話就會有解。

391
01:11:34,000 --> 01:11:38,000
但是有可能我再認真一點算就會有解,就是我等夠久的話就會有解。

392
01:11:39,000 --> 01:11:44,000
對,但是在你那張圖上面,沒有解的部分不是白色的嗎?

393
01:11:47,000 --> 01:11:49,000
然後白色不是佔了大部分嗎?

394
01:11:50,000 --> 01:11:56,000
原因是因為那張圖是一個很小的例子,就是一個加起來等於13的錯誤可能性。

395
01:11:57,000 --> 01:12:00,000
所以在那個例子基本上我全部都有explore到。

396
01:12:03,000 --> 01:12:05,000
所以在那個例子基本上我全部都有explore到。

397
01:12:06,000 --> 01:12:22,000
但我的問題是說,你的claim是說大於80%的問題都會有解,但是在我看起來好像那個白色部分比其他部分多,是剛好那個例子不是這樣嗎?

398
01:12:22,000 --> 01:12:30,000
但我的問題是說,你的claim是說大於80%的問題都會有解,但是在我看起來好像那個白色部分比其他部分多,是剛好那個例子不是這樣嗎?

399
01:12:31,000 --> 01:12:40,000
我的claim是在這個比較大的網路裡面是80%。

400
01:12:41,000 --> 01:12:46,000
OK,但是你剛才秀的那個例子網路太小了。

401
01:12:47,000 --> 01:12:52,000
然後剛才秀的例子其實可能也是80%,但是就是在這個小的這裡往上看。

402
01:12:53,000 --> 01:12:56,000
然後有解的話必須要是simplicial。

403
01:12:57,000 --> 01:13:02,000
這是我沒有講的部分,就是S除以N。

404
01:13:03,000 --> 01:13:10,000
因為我如果這個加起來這個數目太大的話,我就會有超級多的可能性我需要去找。

405
01:13:10,000 --> 01:13:22,000
所以在這裡面我就選了一個數字,然後我就隨機的在所有的可能性裡面選了這個數字之後,一個一個認真的去算它們到底是不是simplicial。

406
01:13:23,000 --> 01:13:28,000
然後這個S除以N是我算出來是simplicial的數目的比例。

407
01:13:29,000 --> 01:13:35,000
然後剛才說的那個加起來要是13的那個例子大概是從這裡上來。

408
01:13:35,000 --> 01:13:46,000
所以換句話說就是你會期待說,你會期待說大概有就是小於就是0.01。

409
01:13:47,000 --> 01:14:00,000
你選定一個size之後,你就會覺得所有的可能性就是那個degree sequence加起來是那個size的那些可能性裡面就是大概0.01是會有找到一個simplicial的。

410
01:14:00,000 --> 01:14:17,000
然後我們我們說它是non-simplicial的方法呢有兩個,一個是它有一些明顯的原因被我被我拒絕了,就是我覺得它不會有simplicial的可能。

411
01:14:17,000 --> 01:14:29,000
比如說我的,比如說我的,比如說我這裡全部都是3,加起來是15,可是我這裡只有一個15。

412
01:14:33,000 --> 01:14:39,000
或是比如說,那加起來15啊,比如說這裡是7,然後這裡是8,這裡是8,然後這裡是7。

413
01:14:39,000 --> 01:14:44,000
可是這是8,這裡就只有5個啊,就沒有辦法填到8,這種很簡單的原因。

414
01:14:44,000 --> 01:14:53,000
所以事實上被我被我拒絕說是non-simplicial的,有很多部分是那種很簡單的原因。

415
01:14:53,000 --> 01:15:00,000
然後也有蠻多部分是我設的那個cutoff,就是我超過時間了,我放棄了。

416
01:15:01,000 --> 01:15:22,000
然後另外一個問題是,我的另外一個問題是,就是你後來有說你的這個heuristic的演算法,它通常會找到動比較少的結構。

417
01:15:23,000 --> 01:15:34,000
那這個會不會造成說之後那個randomize的時候,你會不會偏向某一種結構,就是你可能不是完全randomize你的圖。

418
01:15:35,000 --> 01:15:38,000
我覺得這也是一個很好的問題。

419
01:15:46,000 --> 01:16:03,000
他們做出了這個randomization的這個工作的時候,已經有在他的paper裡面說明說,他覺得他們做這個randomization所explore的這個space是ergotic,是都連結的。

420
01:16:03,000 --> 01:16:06,000
所以可以都找到這樣。

421
01:16:06,000 --> 01:16:24,000
那所以這應該不是一個問題,然後我自己做測試也沒有覺得說,就是我沒有辦法找到一個數據,然後從不同出發點,然後看他到底是不是explore不同的space,他感覺都是converge到一個space這樣。

422
01:16:25,000 --> 01:16:37,000
所以這是一個合理的問題,然後我沒有證據去說他會不一樣,所以我覺得找到一個就很好了。

423
01:16:38,000 --> 01:16:57,000
主持人:「所謂ergotic的意思是說,所有可能的那些structure,在經過某種transformation以後,它就會變成另外一個一樣的東西嗎?但是它可以繞成一整圈就對了?」

424
01:16:58,000 --> 01:17:13,000
就是所有可能的structure都是互相連結的,連結的方式是在那種swap,那種他們提出來的edge swap的這件事情,不會讓所有可能的instance分成兩半。

425
01:17:14,000 --> 01:17:26,000
主持人:「OK,所以用他的那個方法,所有可能的structure都會連在一起,所以你就慢慢跑,你就會跑過整個網路?」

426
01:17:27,000 --> 01:17:33,000
但是這裡面有很多問題,就是那個慢慢跑可能會花很長的時間。

427
01:17:42,000 --> 01:17:47,000
但是這個工作就是提供一個出發點,讓人家可以從那邊開始randomize。

428
01:17:56,000 --> 01:18:04,000
主持人:「OK,如果沒有的話,那就謝謝子齊,然後我就把這個錄影關掉了。」

