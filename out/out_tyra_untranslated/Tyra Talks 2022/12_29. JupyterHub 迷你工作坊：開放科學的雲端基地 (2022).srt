1
00:00:00,000 --> 00:00:22,000
今天是2022年10月8號的Tyra Talk,我們今天邀請到的講者是鄭懷傑,他要講的題目是Jupiter Hub,迷你工作房,開放科學的雲端基地。

2
00:00:22,000 --> 00:00:40,000
讓我稍微介紹一下懷傑的背景。懷傑是在2010和2013年的時候在台大分別取得學士和碩士學位,

3
00:00:40,000 --> 00:00:50,000
接下來在2015年前往康奈爾大學就攻讀地球與大氣科學的博士。

4
00:00:51,000 --> 00:01:08,000
在去年2021年加入了加州伯克萊大學統計系的研究團隊,現在是博士後研究員的身份在執行Jupiter meets the Earth的計畫。

5
00:01:10,000 --> 00:01:26,000
今天他會教我們認識Jupiter Hub,他也有提到參加這個演講不需要任何背景知識和程式設計的技巧,

6
00:01:26,000 --> 00:01:40,000
不過如果要在演講時同步存取Jupiter的資源,必須要準備Google或者是Microsoft的帳號,然後以進行第三方登錄,所以大家可以先準備一下。

7
00:01:41,000 --> 00:01:45,000
我的介紹就到這邊,時間就交給懷傑了,可以嗎?

8
00:01:46,000 --> 00:01:57,000
懷傑議員 沒問題,謝謝施安的介紹。歡迎大家,也非常榮幸能夠再次邀請到Tara進行演講。

9
00:01:57,000 --> 00:02:07,000
我上次的演講是在今年1月,稍微跟各位分享一下我現在在UC Berkeley做的事情。

10
00:02:08,000 --> 00:02:12,000
這一次,與其說是教,不如說是分享。

11
00:02:13,000 --> 00:02:17,000
這一次,我想把重點放在Jupiter Hub這個工具上面。

12
00:02:18,000 --> 00:02:38,000
我是想用迷你工作坊的方式來跟各位分享一下Jupiter Hub到底是什麼,以及為什麼我們叫他開放科學的雲端基地,然後他又可以怎麼樣的轉換我們對於開放科學的一些實踐的方法。

13
00:02:41,000 --> 00:02:44,000
OK,開始囉。

14
00:02:45,000 --> 00:02:56,000
那麼,剛才施安有稍微介紹一下我在哪,目前是在哪邊,那我就稍微再補充一下。

15
00:02:57,000 --> 00:03:07,000
那我本身的專業領域是地球科學,或是更精確地說是地球物理、遙測、冰雪圈科學跟行星科學。

16
00:03:08,000 --> 00:03:19,000
目前我現在大部分在做的研究是使用豐富的衛星遙測資料,再加上模型分析,監測並了解冰雪圈的變化。

17
00:03:20,000 --> 00:03:34,000
舉個例子,你可以看到這邊有一個衛星,它在繞著地球上面,然後會發射出綠色的雷射光,然後打到地表之後,這個衛星會再接收反射的雷射光。

18
00:03:35,000 --> 00:03:45,000
然後根據這個時間再乘上光速,就可以算出來衛星跟地表的距離,再換算成地表的高度。

19
00:03:46,000 --> 00:03:59,000
如果我們可以對一個冰河重複地做這件事情,我們就可以獲得一個冰河隨著時間經過表面的高度,或是你也可以說冰的厚度的變化。

20
00:04:00,000 --> 00:04:09,000
然後我們再利用一些物理的模型去探討分析說,到底是有什麼因素影響了這個冰河的厚度變化。

21
00:04:10,000 --> 00:04:13,000
聽起來蠻酷的,我自己也很喜歡。

22
00:04:14,000 --> 00:04:21,000
不過其實大部分的學術活動,我現在在從事大部分的學術活動,我想跟各位的應該都是差不多。

23
00:04:21,000 --> 00:04:36,000
就是必須要進行研究,然後在適當的時候解釋你自己的研究,給其他人聽,包括同行的科學家,以及不同領域的人士。

24
00:04:38,000 --> 00:04:48,000
除了研究之外,我們會有教學活動,就是我們會寫一些軟體給其他人用,這些我都有稍微做。

25
00:04:49,000 --> 00:04:58,000
這邊放的幾張圖,就是我在過去幾年做過的一些事情,包括開發了一個叫做CARS的軟體在這邊。

26
00:04:59,000 --> 00:05:09,000
我也寫了一個叫做GMT教學手冊的網站,簡單來講就是教別人怎麼用GMT的軟體畫圖。

27
00:05:10,000 --> 00:05:37,000
右下角這張圖則是在我2019年發表的一篇論文裡面,我那個時候跟論文的出版商合作了一下,討論說要怎麼樣做一些材料,可以讓我們能夠更快速、更有效率地去傳達論文的一些新的知識,

28
00:05:38,000 --> 00:05:40,000
然後做成一個新聞稿。

29
00:05:43,000 --> 00:05:52,000
回到我們今天的主題,我們今天要講的是JupyterHub。JupyterHub要如何改變這些我們每日進行的學術活動呢?

30
00:05:54,000 --> 00:05:59,000
在講JupyterHub之前,先稍微提一下Jupyter是什麼樣子的概念。

31
00:06:00,000 --> 00:06:15,000
如果要用一句話去解釋Jupyter是什麼,我會說Jupyter是由開放的資料科學工具組成的生態系統,以及使用它的人組成的社群。

32
00:06:16,000 --> 00:06:20,000
這邊可能有一些專業的術語,所以我再稍微解釋多一點。

33
00:06:20,000 --> 00:06:28,000
這邊所謂的工具是指,如果你今天要完成一件事情,你使用的東西。

34
00:06:30,000 --> 00:06:36,000
舉例來說,Photoshop就是一個影像編輯的工具。

35
00:06:38,000 --> 00:06:45,000
Matplotlib則是在Python底下的一個用來進行科學繪圖的工具,有點像是這樣子。

36
00:06:46,000 --> 00:06:57,000
至於開放這個詞,倒是稍微比較模糊一點,因為老實說,有很多不同的面向都會被我們考慮成是開放的。

37
00:06:58,000 --> 00:07:06,000
舉例來說,它可以指說,你使用的工具,它的原始碼可能是公開的,任何人都可以修改。

38
00:07:07,000 --> 00:07:19,000
另外一方面的開放,有可能指的是,你使用的合作方式可以讓盡可能多的人參與,然後貢獻跟討論。

39
00:07:20,000 --> 00:07:33,000
不管怎麼說,開放這個詞的中心概念就是不要排外,就是能夠讓盡可能多的人參與到你現在在做的這件事情上面。

40
00:07:34,000 --> 00:07:50,000
所以我們會有很多的工具,有些工具是軟體,有些工具可能是硬體,甚至於有些工具是專門描述軟硬體之間怎麼樣結合交互作用的結構。

41
00:07:50,000 --> 00:08:07,000
這些工具跟一般工具不太一樣,你想想,如果放在一個工具下面的工具,可能螺絲起子是用來鎖螺絲,然後老虎鉗可能就是用來扭鐵絲,它們各自都是各自獨立的。

42
00:08:08,000 --> 00:08:14,000
在資料科學裡面,我們所謂的工具,它們時常會互相的依賴。

43
00:08:15,000 --> 00:08:20,000
舉例來說,如果你今天要使用Mathplotlib,你就必須要先安裝Python。

44
00:08:21,000 --> 00:08:25,000
安裝完Python之後,你才可以安裝Mathplotlib,它才會作用。

45
00:08:26,000 --> 00:08:36,000
如果你去把不同的工具之間的相互依賴性畫出來,你就會看到一張很像網路的圖,然後會有點像是那種實物鏈的感覺。

46
00:08:38,000 --> 00:08:44,000
所以我們就會傾向於把這整個工具以及它們之間的相互依賴關係稱作一個生態系統。

47
00:08:45,000 --> 00:08:50,000
像Jupyter這樣子的生態系統,其實它的年紀也沒有很長。

48
00:08:51,000 --> 00:09:09,000
整個開放科學的概念其實到目前為止也才不過出現了我會說二十年,可能各位的體感更短,因為剛開始的前十年都是在草創階段,並不是很多人真的都完全被暴露在這種概念裡面。

49
00:09:10,000 --> 00:09:26,000
其中一個很有可能你接受到這個暴露的時間點,我猜是2015年,因為那個時候LIGO發表了人類史上第一次的重力波觀測事件,震驚了全球。

50
00:09:27,000 --> 00:09:31,000
可能他們得到了2017還是2018諾貝爾獎。

51
00:09:36,000 --> 00:09:44,000
LIGO這個重力波觀測天文台他們做的當然不止於此,當然他們寫文章,然後蓋天文台非常厲害。

52
00:09:44,000 --> 00:09:57,000
不過他們還有一個開放科學的部門,這個部門把他們所有的重力波觀測的事件的資料都整理好,然後發佈到網上。

53
00:09:58,000 --> 00:10:08,000
每個人只要去他們的這個網站,點進去他們的連結,就可以重新執行這個程式碼,然後畫出跟他們的論文裡面一模一樣的圖。

54
00:10:09,000 --> 00:10:16,000
我等一下稍後會再分享一下我的投影片,所以你們也可以點進去這個連結看一下到底是什麼東西。

55
00:10:17,000 --> 00:10:34,000
那在2015年之後或許如果你們有在用推特,你們或許會看到在推特上面越來越多人開始在歌頌,歌頌開放科學多棒,可以讓我做到很多以前做不到的事情。

56
00:10:35,000 --> 00:10:59,000
比如說像這一位,他就在火車上面用他的手機分析SIMIP6的資料。如果你們不知道SIMIP6是什麼的話,它是一個全球性的氣候模擬資料庫,它每天都會產生數以TBG的資料,資料量非常的龐大。

57
00:11:00,000 --> 00:11:06,000
所以能夠在火車上面用智慧型手機去分析這些資料是非常不容易的一件事情。

58
00:11:07,000 --> 00:11:23,000
更有甚者,NASA已經宣布了明年,也就是2023年,是他們的開放科學元年。他們有一個非常大的企劃叫做TOPS,Transform to Open Science。

59
00:11:24,000 --> 00:11:39,000
我們的目標就是從明年開始,花大概四到五年的時間,把他們現在管理跟發布資料的方式全部大翻新。

60
00:11:40,000 --> 00:11:54,000
明年之後,他們就會採用全新一套的模式,就是更開放科學的模式去管理、出版、發表他們的資料工作流程跟研究結果。

61
00:11:55,000 --> 00:12:11,000
所以這已經是一個趨勢,我們可以看到這個趨勢大家都在討論。當然也是拜科技的發展所賜,我們現在採用各種不同的方法去實踐開放科學的方式。

62
00:12:12,000 --> 00:12:25,000
這邊就提供一個例子。我們知道開放科學其實是一個非常籠統的詞,它有很多不同的方式去實踐它,所以這邊我只提供一個例子。

63
00:12:26,000 --> 00:12:37,000
各位可以看這些圖,我們就假設有一個研究人員叫做Jim,他剛寫了一篇很酷的論文,然後剛發表。

64
00:12:38,000 --> 00:13:02,000
他想要更多,他想要說,我想要讓這個論文能夠被所有人,同行也好,其他人士也好,他想要讓所有的人都能夠看到他的論文,然後檢查裡面有沒有錯誤,甚至是重新再現他的實驗。

65
00:13:03,000 --> 00:13:11,000
甚至是改進他在論文裡面做出的一些計算。他可以怎麼做呢?

66
00:13:11,000 --> 00:13:40,000
這裡有一個方法,就是他可以使用一個叫做Jupyter Notebook的東西,在這個檔案裡面他可以放上所有研究的細節,包括敘述性的文字,包括程式碼,包括許多的互動性或是非互動性的圖表,以及更多更多的背景資源,像是原始資料,多媒體,還有軟體等等。

67
00:13:42,000 --> 00:13:56,000
他弄好了這個Jupyter Notebook之後,他把它放到一個網路上的儲存庫,讓大家都可以去讀取。比較流行的儲存庫就像是GitHub,他就可以把它放到GitHub上面,讓大家都可以看得到。

68
00:13:57,000 --> 00:14:09,000
放上去之後,他再多做一些事情,讓這個儲存庫,這裡有個術語叫做Finder Ready。

69
00:14:10,000 --> 00:14:32,000
簡單來講就是提供一些額外的資訊,比如說包括,如果要執行這個儲存庫裡面的Notebook或是程式碼,你需要什麼樣子的軟體套件,你是需要Python,還是需要R,還是需要Julia或是MATLAB,提供這些背景資訊,然後做成一份主態設定的檔案。

70
00:14:33,000 --> 00:14:39,000
然後再妥善地安排裡面的資料以及Notebook擺放的位置,以及他們的結構。

71
00:14:40,000 --> 00:15:01,000
當這些東西都準備好之後,我們就可以使用一個叫做Docker的工具,把這整個儲存庫做成一個獨立的術語叫做影像。

72
00:15:01,000 --> 00:15:15,000
不過他其實就是有點像是一個迷你的執行環境,在這個環境裡面你可以運用相同的環境去執行這些程式碼。

73
00:15:16,000 --> 00:15:32,000
那現在你只要把這個Docker的影像分送給全球其他人,那其他人就可以完美地重現你的研究,然後也不用額外安裝什麼一堆有的沒的軟體。

74
00:15:32,000 --> 00:15:45,000
那麼以上就是其中一個做開放科學的例子,就是讓大家可以更快速地去存取你自己的研究材料。

75
00:15:45,000 --> 00:15:55,000
那麼JupyterHub是怎麼貢獻到資料科學的流程裡面呢?

76
00:15:56,000 --> 00:16:09,000
如果要用一句話去解釋JupyterHub是什麼,我會說JupyterHub就是在共享的計算裝置上面提供便利的資料科學環境的一個工具。

77
00:16:10,000 --> 00:16:29,000
什麼是共享的計算裝置呢?簡單來講,假設你們的實驗室有一台電腦,然後大家都可以登入,然後在上面做一些事情,像是打字、寫文章、處理資料、寫論文等等。

78
00:16:29,000 --> 00:16:42,000
那這一台你可以登入的伺服器,並且可以存取裡面的CPU或是GPU的資源的機器,就叫做共享的計算裝置。

79
00:16:44,000 --> 00:16:53,000
那傳統上來講,我猜你們之中部分有些人可能已經用過了,譬如說SSH登入到一個遠端的伺服器,然後在上面做某些事情。

80
00:16:54,000 --> 00:17:01,000
那當然你必須要安裝很多東西,你才可以真正去做到你想要做的,在伺服器上面想要做的事情。

81
00:17:02,000 --> 00:17:04,000
那JupyterHub就是幫你免除這些步驟。

82
00:17:05,000 --> 00:17:18,000
它提供了一些預先設定好的配置,讓你可以直接的在不需要多做什麼事情,就可以直接的前往那個伺服器,然後在那邊開始進行你的資料科學分析。

83
00:17:19,000 --> 00:17:27,000
那這邊一張圖呢,簡單介紹了一下JupyterHub它的概念。

84
00:17:28,000 --> 00:17:35,000
你可以想像這邊有很多人,他們現在都要存取這樣子的一台機器,在機器上面有JupyterHub在運行。

85
00:17:35,000 --> 00:17:38,000
那每個人呢,首先要先通過一個驗證。

86
00:17:39,000 --> 00:17:48,000
那他們成功登入這台機器的時候,JupyterHub會提供幾種標準的介面給他們選擇。

87
00:17:49,000 --> 00:17:57,000
譬如說像是Jupyter Notebook的介面,那他們就可以開始藉由這個介面來存取這台機器裡面的計算資源。

88
00:17:58,000 --> 00:18:02,000
值得注意的是計算資源本身呢,跟Jupyter是分開的。

89
00:18:03,000 --> 00:18:20,000
JupyterHub同時可以準備好幾個不同的計算的環境,譬如說它可以準備一個Python的環境,然後如果我需要的話,我就登入JupyterHub,然後叫出這個Python的環境,說我這次要用Python,就把它抓過來。

90
00:18:21,000 --> 00:18:31,000
那同時呢,JupyterHub也可以準備另外一個環境,是完全建立在不同的工具上面,那別人如果要用,也可以隨時再把它叫出來。

91
00:18:33,000 --> 00:18:42,000
那所以JupyterHub就是把這樣子的一個工作結構一層一層拆分,讓整個開放科學以及合作變得容易。

92
00:18:45,000 --> 00:18:57,000
那這邊再次提供另外一個例子,來跟各位解釋一下JupyterHub到底是怎麼達到我們想要的目標,就是環境共享的目標。

93
00:18:58,000 --> 00:19:05,000
假設呢,有一個教授叫做John,他現在在領導一個大型的研究計劃。

94
00:19:07,000 --> 00:19:18,000
那這個大型的研究計劃呢,他已經預先配置好他想要用的軟體了,譬如說他可能想要用Python,然後想要用裡面很多不同的套件,他都先裝好了。

95
00:19:19,000 --> 00:19:27,000
他就說,哇,這個就是我要的環境。那他要怎麼樣把這個環境妥善地告訴其他人說,你們也一起來用這個環境呢?

96
00:19:28,000 --> 00:19:35,000
那我們提供的方法就是,他可以跟學校的IT人員合作。

97
00:19:36,000 --> 00:19:48,000
他送一份有點像是申請單這樣子,然後給學校的IT人員說,這是我想要設計的環境,我想要提供出去的環境。

98
00:19:50,000 --> 00:19:58,000
那這些環境就會有一個主態設定檔,也就是Configuration File的方式給那個IT的資訊人員。

99
00:19:59,000 --> 00:20:09,000
那他收到這份檔案之後呢,他就會參照裡面的設定,然後開啟一個叫做Workspace Manager的東西。

100
00:20:11,000 --> 00:20:18,000
在我們這個例子裡面,Workspace Manager就是JupyterHub,所以我就把它叫做JupyterHub。

101
00:20:19,000 --> 00:20:27,000
所以呢,這個IT資訊人員就會幫他開啟一個JupyterHub,在學校的電腦裡面。

102
00:20:29,000 --> 00:20:42,000
那麼JupyterHub會讀取提供的主態檔案,然後來自動地配置你需要的工作環境,包括Python,包括Python筆下各個套件。

103
00:20:43,000 --> 00:20:46,000
你可能還需要其他的一兵幫你配置好。

104
00:20:47,000 --> 00:20:54,000
然後呢,最後這個JupyterHub就會在學校的雲端機器伺服器上面運行。

105
00:20:56,000 --> 00:21:02,000
那他配置好之後會產生一個有點像是Docker的檔案。

106
00:21:03,000 --> 00:21:13,000
有點像是一個,如果我講太多術語聽不懂的話,歡迎最後再隨時問我。

107
00:21:15,000 --> 00:21:22,000
會產生一個Docker的檔案,以及一個URL網址。

108
00:21:23,000 --> 00:21:33,000
那這樣就可以拿到這個網址之後,就可以把它傳給任何想要跟他合作的人,包括他的學生,包括他的合作者。

109
00:21:34,000 --> 00:21:38,000
那麼點開這個網址就可以連到JupyterHub的登入頁面。

110
00:21:39,000 --> 00:21:50,000
然後只要能夠驗證他們的身份登入以後,他們就可以存取運行在學校雲端的JupyterHub。

111
00:21:51,000 --> 00:21:58,000
然後裡面所有的環境配置都已經準備就緒,不需要再安裝任何額外的東西。

112
00:22:01,000 --> 00:22:03,000
這大概就是一個環境共享的概念。

113
00:22:04,000 --> 00:22:14,000
好,那麼講解就稍微到這邊,因為這是Mini工作坊,所以接下來我們就要實際的嘗試一下JupyterHub到底是個什麼東西。

114
00:22:15,000 --> 00:22:21,000
我們今天要的JupyterHub是一個叫做Calisto的組織設置的。

115
00:22:26,000 --> 00:22:36,000
Calisto是由兩個在加拿大的非營利組織共同發行的企劃。

116
00:22:37,000 --> 00:22:56,000
他們的企劃的主要目標是提供在加拿大的國中小的老師足夠的資源,可以讓他們在課堂上面直接教學生怎麼樣開始進行資料科學,以及各種不同的教學的模組。

117
00:22:57,000 --> 00:23:07,000
他們自己的JupyterHub叫做CalistoHub,這邊我說明一下JupyterHub是工具的名字。

118
00:23:08,000 --> 00:23:14,000
利用這個工具搭出來的那個東西,在雲端上運行的那個東西,我們通常會叫做Hub。

119
00:23:15,000 --> 00:23:24,000
所以CalistoHub,就是Calisto這個組織,他們用JupyterHub搭起來的一個你可以存取的線上雲端的資源。

120
00:23:27,000 --> 00:23:32,000
所以歡迎各位前往,我先把這個連結給你們。

121
00:23:32,000 --> 00:23:57,000
OK,首先呢,這是我的投影片連結。

122
00:23:57,000 --> 00:24:07,000
然後,這個是Calisto他們的網址,歡迎各位前往這個網址。

123
00:24:08,000 --> 00:24:13,000
那我就持續的分享我的螢幕。

124
00:24:14,000 --> 00:24:22,000
好,各位可以看到我現在正在Calisto的頁面上面了嗎?

125
00:24:22,000 --> 00:24:27,000
有人可以給我一個聲音嗎?

126
00:24:28,000 --> 00:24:30,000
哦,可以可以。

127
00:24:31,000 --> 00:24:33,000
好,感謝感謝感謝。

128
00:24:34,000 --> 00:24:39,000
好,那右上角這個部分會有一個CalistoHub的標誌,就點進去。

129
00:24:41,000 --> 00:24:46,000
點進去之後呢,你會看到說,你可以登入。

130
00:24:46,000 --> 00:24:51,000
然後,他會問你說要Google還是Microsoft,那就看各位有什麼就選什麼。

131
00:24:52,000 --> 00:24:58,000
那我是有Google,那這是用我自己的Berkeley的帳戶,為大家示範一下。

132
00:25:00,000 --> 00:25:03,000
登入的時候,大家會看到這個畫面,就是在準備中。

133
00:25:04,000 --> 00:25:06,000
哦,我要登入的不是Berkeley。

134
00:25:06,000 --> 00:25:08,000
重新來。

135
00:25:10,000 --> 00:25:12,000
用我自己的Gmail來登入。

136
00:25:16,000 --> 00:25:18,000
登入完成。

137
00:25:20,000 --> 00:25:22,000
登入完成。

138
00:25:24,000 --> 00:25:26,000
登入完成。

139
00:25:28,000 --> 00:25:30,000
登入完成。

140
00:25:31,000 --> 00:25:33,000
登入完成。

141
00:25:33,000 --> 00:25:35,000
登入完成。

142
00:25:37,000 --> 00:25:45,000
好,那麼,登入之後呢,你會看到有點像是這樣子的一個頁面。

143
00:25:47,000 --> 00:25:53,000
這個頁面呢,就是JupyterHub提供使用者的標準介面的其中之一。

144
00:25:54,000 --> 00:25:56,000
我們通常叫做Notebook的介面。

145
00:25:57,000 --> 00:26:01,000
大家到這裡還OK嗎?需要等一下嗎?

146
00:26:03,000 --> 00:26:05,000
我這邊OK。

147
00:26:06,000 --> 00:26:10,000
那,話說BlueJeans可以舉手或是什麼之類的嗎?

148
00:26:11,000 --> 00:26:16,000
能夠有辦法讓我從這邊看到說,大家需要多一點時間或怎樣的。

149
00:26:17,000 --> 00:26:22,000
它是可以舉手,不過我不確定會發生什麼事情。

150
00:26:22,000 --> 00:26:24,000
我先把看聊天視窗拉出來好了。

151
00:26:25,000 --> 00:26:29,000
這樣可以用聊天的方式讓我知道我們現在走到哪裡。

152
00:26:31,000 --> 00:26:34,000
可是我不知道怎麼拉出來,我對BlueJeans好不熟。

153
00:26:35,000 --> 00:26:38,000
好,不管怎麼樣,那我們就先繼續好了。

154
00:26:39,000 --> 00:26:41,000
好,那我們就先繼續好了。

155
00:26:42,000 --> 00:26:44,000
好,不管怎麼樣,我們就先繼續好了。

156
00:26:45,000 --> 00:26:47,000
好,不管怎麼樣,我們就先繼續好了。

157
00:26:48,000 --> 00:26:51,000
好,不管怎麼樣,我們就先繼續好了。

158
00:26:52,000 --> 00:26:57,000
好,當你看到這個頁面的時候,表示你已經成功的登入了JupyterHub。

159
00:26:58,000 --> 00:27:04,000
你已經成功登入了他們的CalistaHub,然後你已經開始在使用他們提供的計算資源。

160
00:27:06,000 --> 00:27:13,000
這邊會有一個在檔案列表上面,你會看到有一個檔案叫做Getting Started,就點進去。

161
00:27:14,000 --> 00:27:17,000
然後你會看到類似像這樣子的頁面。

162
00:27:20,000 --> 00:27:26,000
這個就是在Notebook介面之下呈現Jupyter Notebook的樣子。

163
00:27:27,000 --> 00:27:30,000
你會看到這其實整個就是一個Notebook的文件。

164
00:27:31,000 --> 00:27:40,000
它看起來非常繽紛,但實際上如果你點兩下,在每個區塊點兩下,你會發現他們的原始的資訊。

165
00:27:41,000 --> 00:27:42,000
資訊啊,不是這個。

166
00:27:44,000 --> 00:27:46,000
原始的資訊其實就是一些文字。

167
00:27:47,000 --> 00:27:51,000
這些文字是用markdown的格式撰寫的。

168
00:27:52,000 --> 00:28:00,000
所以在編輯模式的時候你可以隨意的編輯,譬如說像是在這個底下打blah blah。

169
00:28:01,000 --> 00:28:09,000
然後按run的時候,它就會重新的把這個變成顯示的模式。

170
00:28:10,000 --> 00:28:12,000
就看到底下出現blah blah blah。

171
00:28:19,000 --> 00:28:25,000
那我剛剛說過這是一個Jupyter Notebook,所以你也可以在直接上面進行某種程度的計算。

172
00:28:26,000 --> 00:28:34,000
譬如說我們可以按加號來新增幾個單元的格子,在這個Notebook的底下新增幾個單元的格子。

173
00:28:34,000 --> 00:28:42,000
那我們可以隨便點一個單元的格子,在這上面打,我想想看,我們可以打Hello World。

174
00:28:43,000 --> 00:28:50,000
你在右上角可以看到現在這個Notebook使用的核心是什麼。

175
00:28:51,000 --> 00:29:03,000
那這邊它寫的是Python 3,也就是目前如果你在這邊上面打程式碼,按下執行的時候,Notebook就會用Python去執行這些程式碼。

176
00:29:05,000 --> 00:29:16,000
舉個例子,A等於Hello World,然後print A。

177
00:29:17,000 --> 00:29:23,000
打好之後呢,如果按一下執行,它就會用Python的方式去執行這段程式碼。

178
00:29:23,000 --> 00:29:41,000
如果你今天想要增加更多的註解,你也可以把區塊的種類從code轉化成markdown,這樣子就可以在這邊打註解。

179
00:29:41,000 --> 00:29:56,000
像是今天是Aira演講之類的,然後在run它就會變成在你的Notebook裡面敘述性的文字的部分。

180
00:29:58,000 --> 00:30:06,000
那iPython Notebook我很喜歡的一個地方是,在敘述性文字的部分,the markdown是支援LaTeX的。

181
00:30:06,000 --> 00:30:16,000
所以你可以在這邊打註解公式,譬如說我可以打隨便講一個為什麼,打什麼呢?

182
00:30:16,000 --> 00:30:43,000
前前Q等於OK,乘上partial T,partial X,這是一個熱傳導的方程,然後就會出現一個方程式。

183
00:30:43,000 --> 00:30:53,000
那如果你傳統在使用LaTeX的話,要這樣子混打其實很難,尤其是當你的文章裡面還有中文的時候。

184
00:30:53,000 --> 00:31:11,000
傳統上來講,LaTeX非常難以處理中文的內容,但是在Jupyter Markdown裡面,因為它原生是支援UTF的,所以你可以把這兩件事情完美的混合在一起,非常的方便。

185
00:31:11,000 --> 00:31:19,000
好,那目前為止還OK嗎?就暫停嗎?還是我們就繼續?

186
00:31:20,000 --> 00:31:24,000
OK,我OK。大家有沒有什麼問題?

187
00:31:25,000 --> 00:31:36,000
雖然可能有一件事情要麻煩你,因為我們沒辦法一直看聊天盒,所以如果聊天裡面有人提出問題的話,可以稍微打斷我嗎?

188
00:31:36,000 --> 00:31:38,000
好,可以可以,我會。

189
00:31:38,000 --> 00:31:40,000
感謝感謝,或是如果你看到有人舉手,也可以隨時打斷我。

190
00:31:40,000 --> 00:31:44,000
好,我會幫你注意這些,你可以繼續。

191
00:31:45,000 --> 00:31:59,000
好,那麼我們剛剛說過Jupyter Notebook跟核心這兩件事情是分開的,根據使用者的需求我們可以切換不同的核心。

192
00:32:00,000 --> 00:32:04,000
所以呢,我們現在就來換個核心試試看,我們現在就不要Python了。

193
00:32:04,000 --> 00:32:15,000
如果你把滑鼠移到上面的選單,然後選Kernel,然後呢,Kernel最底下有一個Change Kernel。

194
00:32:15,000 --> 00:32:21,000
你會看到呢,在Calista Hub裡面提供了兩個核心,一個是Python,另外一個是R。

195
00:32:21,000 --> 00:32:22,000
我們就試試看R。

196
00:32:22,000 --> 00:32:31,000
哦,切換過去了,現在這個Jupyter Notebook在執行的是R而不是Python了。

197
00:32:31,000 --> 00:32:41,000
如果我們再重新的執行剛剛的Hello World,run,它就,哦,這一段還是有用,因為R裡面也有這一段文字。

198
00:32:41,000 --> 00:32:48,000
不過R本身的語法就像是這樣,這一段Python是行不通的。

199
00:32:51,000 --> 00:33:05,000
大概是這樣,run,它就會以R的方式去執行這段程式。

200
00:33:05,000 --> 00:33:18,000
那如果你在上面畫圖的話,譬如說,我們就快速的弄一個X,這是R的程式,所以如果你不懂的話,歡迎隨時再問我。

201
00:33:19,000 --> 00:33:25,000
但現在呢,我要設定五個資料點,然後再把這五個資料點畫出來。

202
00:33:25,000 --> 00:33:33,000
然後呢,我可以按一下Shift跟Enter,來執行這一段程式。

203
00:33:33,000 --> 00:33:37,000
幾個逗號。

204
00:33:39,000 --> 00:33:44,000
那它就會調用R裡面的繪圖函數庫,去把這東西畫出來。

205
00:33:45,000 --> 00:33:53,000
那對於Python裡面的繪圖,套件也是差不多的。

206
00:33:53,000 --> 00:34:00,000
那我們現在呢,再把這個kernel的核心,再把這個kernel換回來Python。

207
00:34:00,000 --> 00:34:08,000
然後呢,我們再到底下來,來試試看,用Python畫。

208
00:34:08,000 --> 00:34:16,000
Python的話呢,就要先輸入一些套件,譬如說像是,

209
00:34:19,000 --> 00:34:28,000
我在這邊呢,就先調用matplotlib跟numpy出來幫我做事情。

210
00:34:28,000 --> 00:34:32,000
然後呢,

211
00:34:39,000 --> 00:34:47,000
大概像這樣,就可以畫一張sign的圖。

212
00:34:47,000 --> 00:34:48,000
像這樣。

213
00:34:48,000 --> 00:34:51,000
那你會看到這兩張圖,長相非常不一樣。

214
00:34:51,000 --> 00:34:55,000
那某種程度上證明呢,它們其實是兩個不同的繪圖套件。

215
00:34:55,000 --> 00:35:01,000
下面這個是R畫的,下面這個是Python畫的。

216
00:35:01,000 --> 00:35:04,000
那麼,當然如果你想要的話,你也可以把這張圖存起來。

217
00:35:04,000 --> 00:35:08,000
我們可以再多加一堂指令,plt.savefig。

218
00:35:08,000 --> 00:35:17,000
那我們就叫它測試.png好了。

219
00:35:17,000 --> 00:35:22,000
畫出來之後呢,重新執行之後,那,

220
00:35:22,000 --> 00:35:25,000
測試.png就會出現在檔案列表裡面。

221
00:35:25,000 --> 00:35:30,000
如果我們回去檔案列表,File,File,然後Open,

222
00:35:30,000 --> 00:35:33,000
你就會回去剛才的那個檔案列表的畫面。

223
00:35:33,000 --> 00:35:36,000
那你就會看到有一個新的檔案,叫做測試,它出現了。

224
00:35:36,000 --> 00:35:39,000
你在這邊打開,就可以看到這張png檔。

225
00:35:39,000 --> 00:35:43,000
那你也可以選取它,選取這個檔案列表,

226
00:35:43,000 --> 00:35:46,000
然後選取這個檔案列表。

227
00:35:46,000 --> 00:35:49,000
你在這邊打開,就可以看到這張png檔。

228
00:35:49,000 --> 00:35:54,000
那你也可以選取它,然後再把它下載下來。

229
00:35:54,000 --> 00:35:57,000
下載的按鈕呢,就是在,應該是在這裡,

230
00:35:57,000 --> 00:36:00,000
哦,在這裡,在上面這一排的這個部分。

231
00:36:00,000 --> 00:36:04,000
你就可以把它下載到你自己的電腦裡面。

232
00:36:04,000 --> 00:36:11,000
那,以上的就是簡單的,就是Notebook的介面的操作方式。

233
00:36:11,000 --> 00:36:15,000
你可以發現,我們真的已經在利用JupyterHub,

234
00:36:15,000 --> 00:36:17,000
就是Calisto提供的運算資源,

235
00:36:17,000 --> 00:36:20,000
去幫助你做一些科學分析的概念。

236
00:36:20,000 --> 00:36:25,000
那當然它也有一些,它有配有傳統的伺服器的操作模式。

237
00:36:25,000 --> 00:36:33,000
如果呢,你滑鼠移到這個,選單列上面的New,這裡有個New,按下去。

238
00:36:33,000 --> 00:36:36,000
那裡面呢,你會看到有幾個選項。

239
00:36:36,000 --> 00:36:38,000
那你可以開啟一個新的Notebook。

240
00:36:38,000 --> 00:36:40,000
你也可以開啟其他種類的檔案。

241
00:36:40,000 --> 00:36:44,000
這邊有一個檔案叫做,有一個類型叫做Terminal。

242
00:36:44,000 --> 00:36:49,000
按下去之後呢,你就可以開啟一個傳統的終端機,

243
00:36:49,000 --> 00:36:57,000
然後去操作你想要操作的事情,譬如說LOS啊,或是PWD啊,等等等等等等,

244
00:36:57,000 --> 00:36:59,000
任何你想到的事情。

245
00:36:59,000 --> 00:37:03,000
那這邊呢,我想要給各位看的是,列出所安裝的套件。

246
00:37:05,000 --> 00:37:07,000
那這個指令需要等一下。

247
00:37:07,000 --> 00:37:12,000
因為它是使用Conda這個套件版的軟體去安裝套件的,

248
00:37:12,000 --> 00:37:14,000
那是軟體,有的時候會慢。

249
00:37:18,000 --> 00:37:23,000
不過,看來還有一段時間。

250
00:37:25,000 --> 00:37:28,000
不過,噢,出來了。

251
00:37:29,000 --> 00:37:34,000
那你可以看到它真的已經是先預先裝好非常非常多的套件。

252
00:37:34,000 --> 00:37:38,000
包括,以Python為例,因為Python比較熟。

253
00:37:38,000 --> 00:37:49,000
以Python為例的話,你可以看到,這邊有Dask,平行預算的套件。

254
00:37:49,000 --> 00:37:56,000
然後,譬如說這邊有Geopandas,是地理空間資料的套件。

255
00:37:56,000 --> 00:38:04,000
然後,譬如說這邊還有HDF5,專門處理HDF檔的套件。

256
00:38:04,000 --> 00:38:10,000
以及各種其他種類的套件。

257
00:38:10,000 --> 00:38:14,000
當然還有MattePlotLib在這邊。

258
00:38:15,000 --> 00:38:20,000
還有其他不同的視覺化套件,譬如說像是,我想它應該要裝Seaborn。

259
00:38:21,000 --> 00:38:25,000
Seaborn在,大概在這邊。

260
00:38:25,000 --> 00:38:31,000
那,科學分析比較常用的SciPy啦,或是NonPy的檔案也都有裝。

261
00:38:31,000 --> 00:38:36,000
所以你可以看到,如果有一個人可以幫你預先裝好這些套件,

262
00:38:36,000 --> 00:38:42,000
那你自己在剛起步的時候,你就不需要去花那麼多心力去裝套件,

263
00:38:42,000 --> 00:38:45,000
然後還要處理那些互相依賴的問題。

264
00:38:45,000 --> 00:38:49,000
有時候這些問題會大大的阻礙一個研究的進展。

265
00:38:50,000 --> 00:38:55,000
好,那麼到這邊還OK嗎?

266
00:38:55,000 --> 00:38:59,000
還OK的話,我們就要進入下一個階段。

267
00:39:02,000 --> 00:39:04,000
我OK。

268
00:39:04,000 --> 00:39:06,000
OK,OK。

269
00:39:07,000 --> 00:39:12,000
好,那讓我們回到剛才的檔案列表。

270
00:39:14,000 --> 00:39:16,000
這次檔案列表裡面呢,

271
00:39:17,000 --> 00:39:21,000
我們剛說過這個檔案列表叫做Notebook Entry,

272
00:39:21,000 --> 00:39:26,000
它是一個傳統的ChipTab介面。

273
00:39:26,000 --> 00:39:32,000
那我想要跟各位介紹的是比較新的另外一個介面,叫做Lab。

274
00:39:32,000 --> 00:39:37,000
存取的方法就是把這個Tree,把這個網址列的這個Tree砍掉,

275
00:39:37,000 --> 00:39:40,000
換成Lab。

276
00:39:41,000 --> 00:39:46,000
然後再輸入。

277
00:39:46,000 --> 00:39:50,000
當你這麼做的時候呢,

278
00:39:50,000 --> 00:40:00,000
你就會進入到ChipTab提供的另外一個介面,叫做Lab的介面。

279
00:40:00,000 --> 00:40:05,000
如果你需要一點資訊的話,你可以回去看我們的投影片。

280
00:40:05,000 --> 00:40:09,000
投影片後面幾章應該有步驟。

281
00:40:09,000 --> 00:40:18,000
好,那在Lab的介面上面看起來跟剛才Notebook的介面的確有點不同。

282
00:40:18,000 --> 00:40:23,000
最大的不同呢,是Lab的介面是由很多不同的小面板構成的。

283
00:40:23,000 --> 00:40:25,000
譬如說像是左邊這個面板,

284
00:40:25,000 --> 00:40:28,000
左邊現在我們看到是檔案瀏覽的面板。

285
00:40:28,000 --> 00:40:31,000
有測試.png可以點兩下,

286
00:40:31,000 --> 00:40:36,000
然後右邊這個部分就會顯示出測試.png的分頁這樣。

287
00:40:37,000 --> 00:40:40,000
那當然,Getting Started,Notebook已經打開了。

288
00:40:40,000 --> 00:40:43,000
你可以看裡面的資訊,都還在。

289
00:40:43,000 --> 00:40:45,000
看我們的資訊都還在。

290
00:40:45,000 --> 00:40:51,000
所以他們其實存取的是同樣一個伺服器,只不過是用不同的介面而已。

291
00:40:51,000 --> 00:40:56,000
那在Lab的介面裡面,我們可以幹嘛呢?

292
00:40:56,000 --> 00:41:00,000
你可以看到左上角有一個藍色的加號。

293
00:41:00,000 --> 00:41:04,000
這個點下去會開啟啟動的分頁。

294
00:41:04,000 --> 00:41:09,000
那這個啟動的分頁中,你可以選擇你想要啟動什麼樣子的內容。

295
00:41:09,000 --> 00:41:11,000
你可以啟動一個Notebook,

296
00:41:11,000 --> 00:41:17,000
以Python為內核的Notebook,或是以R為核心的Notebook。

297
00:41:17,000 --> 00:41:19,000
或是你可以直接在這邊啟動中段機,

298
00:41:19,000 --> 00:41:23,000
然後做跟剛才一樣的事情,LS之類的。

299
00:41:28,000 --> 00:41:30,000
那我剛剛說過,Lab最大的賣點,

300
00:41:30,000 --> 00:41:35,000
就是它是由不同的面板構成的視窗介面。

301
00:41:35,000 --> 00:41:39,000
那這麼做的好處呢,就是有時候你可以讓圖表互相比較。

302
00:41:39,000 --> 00:41:43,000
譬如說如果你剛剛回去剛才我們看到的iPython Notebook,

303
00:41:43,000 --> 00:41:46,000
然後你移到最下面這張圖。

304
00:41:46,000 --> 00:41:50,000
按右鍵的時候,按右鍵叫出選單的話,

305
00:41:50,000 --> 00:41:52,000
你可以看到這裡面有很多選單。

306
00:41:52,000 --> 00:41:55,000
其中有一個叫做Create New View for Output。

307
00:41:55,000 --> 00:41:57,000
在這邊點一下。

308
00:41:57,000 --> 00:42:01,000
那這張圖就會移動到一個新的面板,

309
00:42:01,000 --> 00:42:03,000
然後就可以把它移來移去,

310
00:42:03,000 --> 00:42:07,000
就像是很多現在很厲害的軟體一樣。

311
00:42:07,000 --> 00:42:10,000
然後你就可以把它跟不同的圖片比較。

312
00:42:10,000 --> 00:42:13,000
譬如說我可以重畫一個,把它改成Cosine。

313
00:42:15,000 --> 00:42:16,000
重畫。

314
00:42:16,000 --> 00:42:17,000
這個也比較。

315
00:42:17,000 --> 00:42:19,000
因為這個跟這個是連在一起的。

316
00:42:19,000 --> 00:42:21,000
但我可以把它換一個。

317
00:42:21,000 --> 00:42:25,000
複製,然後再做一樣的事情。

318
00:42:25,000 --> 00:42:27,000
但是這裡我要把它做Sine。

319
00:42:27,000 --> 00:42:29,000
再畫一次。

320
00:42:29,000 --> 00:42:32,000
然後就可以把這張圖片跟這張圖片比較。

321
00:42:32,000 --> 00:42:34,000
之類之類。

322
00:42:36,000 --> 00:42:41,000
那Jibbit Lab也支援了很多其他的,

323
00:42:41,000 --> 00:42:44,000
不只是Notebook,還有很多其他檔案的顯示模式。

324
00:42:44,000 --> 00:42:47,000
譬如說如果你按PNG檔,它就可以直接跳出PNG檔。

325
00:42:47,000 --> 00:42:50,000
那如果你按CSV的話,

326
00:42:50,000 --> 00:42:55,000
它也可以直接以圖表顯示的方式呈現CSV,等等等等。

327
00:42:57,000 --> 00:43:00,000
而且呢,它還有一些更華麗的設定。

328
00:43:00,000 --> 00:43:02,000
譬如說像是你看上面的,

329
00:43:02,000 --> 00:43:07,000
如果你移動到上面的這些選單列表的話,

330
00:43:07,000 --> 00:43:09,000
有一個選單叫做Settings。

331
00:43:09,000 --> 00:43:10,000
進去。

332
00:43:10,000 --> 00:43:12,000
第一個是Zing。

333
00:43:12,000 --> 00:43:18,000
那這裡你可以選擇Jibbit Lab要是亮色系的配置還是暗色系的配置。

334
00:43:18,000 --> 00:43:20,000
預設都是亮色系的配置。

335
00:43:20,000 --> 00:43:22,000
那我本人比較喜歡暗色系,

336
00:43:22,000 --> 00:43:25,000
所以我先把它切換到暗色系看看會發生什麼事情。

337
00:43:25,000 --> 00:43:27,000
現在是暗色系了。

338
00:43:31,000 --> 00:43:35,000
除此之外呢,你還可以進行更多的客製化。

339
00:43:35,000 --> 00:43:37,000
譬如說呢,我們可以讓,

340
00:43:37,000 --> 00:43:40,000
你可以看到如果打開Settings,

341
00:43:40,000 --> 00:43:42,000
這邊還有一個Language。

342
00:43:42,000 --> 00:43:45,000
不過目前呢,語言套件只有英文。

343
00:43:45,000 --> 00:43:48,000
但是我們可以自己安裝中文的套件。

344
00:43:48,000 --> 00:43:51,000
譬如說我們只要過去Terminal,

345
00:43:51,000 --> 00:43:54,000
然後使用Pip,

346
00:43:54,000 --> 00:43:59,000
來安裝這個套件叫什麼名字呢?

347
00:44:00,000 --> 00:44:13,000
叫做Jibbit Lab Language Pack中文台灣之類的。

348
00:44:13,000 --> 00:44:16,000
安裝。

349
00:44:16,000 --> 00:44:18,000
然後它就開始安裝。

350
00:44:18,000 --> 00:44:25,000
沒錯,你現在在一個叫做Calisto Hub的伺服器上面安裝你自己想要的套件。

351
00:44:25,000 --> 00:44:29,000
安裝好之後呢,要重新整理這個Lab,

352
00:44:29,000 --> 00:44:34,000
就移動到網址點再重新整理就可以了。

353
00:44:34,000 --> 00:44:37,000
那整個Lab就會重新整理。

354
00:44:37,000 --> 00:44:42,000
那麼,如果你這個時候再去Settings,

355
00:44:42,000 --> 00:44:44,000
然後Language,

356
00:44:44,000 --> 00:44:48,000
這邊應該就可以看到Chinese,中文台灣可以選擇。

357
00:44:48,000 --> 00:44:50,000
進去呢?

358
00:44:50,000 --> 00:44:58,000
然後再Reload。

359
00:44:58,000 --> 00:45:02,000
就會出現中文繁體的Jibbit Lab。

360
00:45:02,000 --> 00:45:03,000
可能沒有那麼完美,

361
00:45:03,000 --> 00:45:06,000
你可以看到有一些並沒有翻譯的過來。

362
00:45:06,000 --> 00:45:10,000
因為目前Jibbit Lab的翻譯專案呢,

363
00:45:10,000 --> 00:45:12,000
是還在熱烈的進行中。

364
00:45:12,000 --> 00:45:14,000
那也都是公開的專案,

365
00:45:14,000 --> 00:45:17,000
所以如果各位有興趣貢獻的話,

366
00:45:17,000 --> 00:45:20,000
再問我,我可以再把那個連結寄給你。

367
00:45:20,000 --> 00:45:27,000
但是你也可以自己Google找到翻譯專案的連結。

368
00:45:27,000 --> 00:45:39,000
好,那目前為止不知道各位有沒有什麼問題。

369
00:45:39,000 --> 00:45:43,000
OK。

370
00:45:43,000 --> 00:45:45,000
好像沒看到什麼問題。

371
00:45:45,000 --> 00:45:46,000
太好了。

372
00:45:46,000 --> 00:45:50,000
看來大家都非常的進入狀況。

373
00:45:50,000 --> 00:45:51,000
我也不知道。

374
00:45:51,000 --> 00:45:53,000
大家有跟著做嗎?

375
00:45:53,000 --> 00:45:56,000
我這邊是有跟著做。

376
00:45:56,000 --> 00:45:59,000
那也沒關係啦。

377
00:45:59,000 --> 00:46:02,000
因為如果你們之後想要再重複的話,

378
00:46:02,000 --> 00:46:04,000
你們可以參考我的投影片。

379
00:46:04,000 --> 00:46:07,000
投影片裡面應該有一些細節,

380
00:46:07,000 --> 00:46:11,000
說明一下要怎麼做這些事情。

381
00:46:11,000 --> 00:46:14,000
那最後的一個部分呢,

382
00:46:14,000 --> 00:46:17,000
我想要跟各位分享一下,

383
00:46:17,000 --> 00:46:21,000
就是Hub它本身具備的一些功能。

384
00:46:21,000 --> 00:46:27,000
所以如果我們前往這個選單,File,

385
00:46:27,000 --> 00:46:29,000
然後倒數第二個,

386
00:46:29,000 --> 00:46:31,000
你應該會看到Hub控制面板,

387
00:46:31,000 --> 00:46:33,000
或是Hub Control Panel。

388
00:46:33,000 --> 00:46:34,000
如果你沒有裝中文的話,

389
00:46:34,000 --> 00:46:36,000
就是Hub Control Panel。

390
00:46:36,000 --> 00:46:39,000
點進去,就會跳出一個Control Panel。

391
00:46:39,000 --> 00:46:41,000
哇,好亮。

392
00:46:41,000 --> 00:46:43,000
如果各位不介意的話,

393
00:46:43,000 --> 00:46:44,000
我先關掉這個燈,

394
00:46:44,000 --> 00:46:46,000
因為我們這裡要變晚上了。

395
00:46:46,000 --> 00:47:02,000
馬上回來。

396
00:47:02,000 --> 00:47:04,000
在這個Control Panel上面,

397
00:47:04,000 --> 00:47:05,000
你可以看到,

398
00:47:05,000 --> 00:47:07,000
你應該只能看到兩個選項。

399
00:47:07,000 --> 00:47:09,000
一個選項是,

400
00:47:09,000 --> 00:47:14,000
停止剛才的伺服器。

401
00:47:14,000 --> 00:47:23,000
那我現在來看看。

402
00:47:23,000 --> 00:47:27,000
我們就試著點點看這個點。

403
00:47:27,000 --> 00:47:29,000
然後現在伺服器已經被停止了。

404
00:47:29,000 --> 00:47:30,000
如果我們回去剛才的頁面,

405
00:47:30,000 --> 00:47:31,000
你會看到,

406
00:47:31,000 --> 00:47:34,000
Server Available Unreachable。

407
00:47:34,000 --> 00:47:37,000
因為這個伺服器已經被停止了。

408
00:47:37,000 --> 00:47:40,000
不過我們可以重新啟動。

409
00:47:40,000 --> 00:47:43,000
所以我們可以直接在這邊按重新啟動,

410
00:47:43,000 --> 00:47:46,000
或是回去剛才的分頁按Start My Server,

411
00:47:46,000 --> 00:47:48,000
都可以,看你想要怎麼做。

412
00:47:48,000 --> 00:47:50,000
就在這邊重新啟動好了。

413
00:47:50,000 --> 00:47:57,000
啟動。

414
00:47:57,000 --> 00:47:59,000
好,啟動完畢。

415
00:47:59,000 --> 00:48:01,000
啟動完畢的預設介面,

416
00:48:01,000 --> 00:48:03,000
會是Notebook介面。

417
00:48:03,000 --> 00:48:04,000
但是你可以看到,

418
00:48:04,000 --> 00:48:07,000
剛剛你產生出來的檔案都還在,

419
00:48:07,000 --> 00:48:11,000
測試點PMG還在。

420
00:48:11,000 --> 00:48:16,000
不過如果你切換到Lab的介面,

421
00:48:16,000 --> 00:48:20,000
你應該會發現事情變得有點不太一樣。

422
00:48:20,000 --> 00:48:22,000
來看看。

423
00:48:22,000 --> 00:48:27,000
好,OK。

424
00:48:27,000 --> 00:48:29,000
如果你點到選單,

425
00:48:29,000 --> 00:48:32,000
你會發現剛剛安裝的中文不見了。

426
00:48:32,000 --> 00:48:35,000
這是為什麼呢?

427
00:48:35,000 --> 00:48:36,000
為什麼檔案還在,

428
00:48:36,000 --> 00:48:40,000
但是中文套件不見了?

429
00:48:40,000 --> 00:48:44,000
這邊我想利用觀察來解釋一下

430
00:48:44,000 --> 00:48:47,000
JupyterHub本身的權限的設定。

431
00:48:47,000 --> 00:48:51,000
如果你今天是身為JupyterHub的管理者,

432
00:48:51,000 --> 00:48:54,000
你可以設定JupyterHub裡面的檔案或是結構,

433
00:48:54,000 --> 00:48:57,000
哪些部分是不能被使用者更改的,

434
00:48:57,000 --> 00:49:00,000
然後哪些部分是使用者可以更改,

435
00:49:00,000 --> 00:49:02,000
但是當你結束這伺服器以後,

436
00:49:02,000 --> 00:49:04,000
就會回溯。

437
00:49:04,000 --> 00:49:06,000
剛才我們安裝的那個套件,

438
00:49:06,000 --> 00:49:07,000
就是被回溯掉了。

439
00:49:07,000 --> 00:49:09,000
如果你要再重新使用中文,

440
00:49:09,000 --> 00:49:12,000
你必須要再重新安裝一次。

441
00:49:12,000 --> 00:49:16,000
但是管理者也可以決定哪些部分

442
00:49:16,000 --> 00:49:19,000
是使用者可以永遠地保存他們的檔案。

443
00:49:19,000 --> 00:49:20,000
也就是說,

444
00:49:20,000 --> 00:49:24,000
如果你只要把檔案產生在那些地方,

445
00:49:24,000 --> 00:49:26,000
你就可以保存這些檔案,

446
00:49:26,000 --> 00:49:28,000
然後每次重新啟動Hub的時候,

447
00:49:28,000 --> 00:49:29,000
這些檔案就不會不見。

448
00:49:29,000 --> 00:49:31,000
像是這個測試.png,

449
00:49:31,000 --> 00:49:33,000
目前就是出現在這個位置。

450
00:49:33,000 --> 00:49:36,000
所以你在這個位置進行的更動,

451
00:49:36,000 --> 00:49:39,000
會一直保存在這個伺服器上面。

452
00:49:39,000 --> 00:49:40,000
就我所知,

453
00:49:40,000 --> 00:49:42,000
Calisto有一個時限,

454
00:49:42,000 --> 00:49:44,000
就是如果你超過多久,

455
00:49:44,000 --> 00:49:46,000
好像是幾十天還是怎樣子,

456
00:49:46,000 --> 00:49:48,000
都沒有登入還是怎樣的話,

457
00:49:48,000 --> 00:49:50,000
你的檔案就會被砍掉。

458
00:49:50,000 --> 00:49:54,000
每一個Hub都有他們自己的規定。

459
00:49:54,000 --> 00:49:55,000
詳細的話,

460
00:49:55,000 --> 00:49:58,000
你可以去參考他們自己的設定是怎麼樣子。

461
00:50:00,000 --> 00:50:02,000
好,

462
00:50:02,000 --> 00:50:06,000
如果我們再回到Control Panel,

463
00:50:06,000 --> 00:50:09,000
你會看到這邊有一個Token,

464
00:50:09,000 --> 00:50:13,000
在左上角的這個選單這邊有一個Token。

465
00:50:13,000 --> 00:50:14,000
點進去的話,

466
00:50:14,000 --> 00:50:18,000
你應該可以看到一些看起來很複雜的東西。

467
00:50:19,000 --> 00:50:22,000
那我這邊因為,

468
00:50:22,000 --> 00:50:25,000
這邊大部分的東西是管理者需要用的,

469
00:50:25,000 --> 00:50:31,000
但是我想要講的是底下的這個OAuth的Application。

470
00:50:32,000 --> 00:50:37,000
TubeHub有跟OAuth相容的,

471
00:50:37,000 --> 00:50:39,000
意味著說,

472
00:50:39,000 --> 00:50:42,000
根據管理者他們自己的想法,

473
00:50:42,000 --> 00:50:47,000
他們可以使用第三方的帳號資訊,

474
00:50:47,000 --> 00:50:50,000
來作為進入TubeHub的驗證。

475
00:50:51,000 --> 00:50:52,000
舉例來說,

476
00:50:52,000 --> 00:50:55,000
List of Hub就是利用你的Google帳戶,

477
00:50:55,000 --> 00:50:57,000
或是Microsoft的帳戶來驗證。

478
00:50:58,000 --> 00:51:01,000
但是像我們的研究,

479
00:51:01,000 --> 00:51:04,000
像我們自己團隊的TubeHub,

480
00:51:04,000 --> 00:51:08,000
就是使用GitHub的帳號來進行第三方驗證。

481
00:51:08,000 --> 00:51:10,000
那這麼做的好處就是,

482
00:51:10,000 --> 00:51:13,000
管理者可以少掉非常非常多的時間,

483
00:51:13,000 --> 00:51:16,000
在管理使用者以及他們的帳名。

484
00:51:16,000 --> 00:51:19,000
因為你是把這個責任分散出去,

485
00:51:19,000 --> 00:51:22,000
分散到第三方的團體。

486
00:51:22,000 --> 00:51:24,000
那這麼做我個人覺得是不錯,

487
00:51:24,000 --> 00:51:28,000
因為可以想像我們現在幾乎每一個研究人員,

488
00:51:28,000 --> 00:51:30,000
都會有Google,

489
00:51:30,000 --> 00:51:32,000
然後可能都會有GitHub。

490
00:51:32,000 --> 00:51:34,000
如果你能夠使用這些帳戶,

491
00:51:34,000 --> 00:51:35,000
直接登入GitHub,

492
00:51:35,000 --> 00:51:37,000
那當然就是非常的方便。

493
00:51:41,000 --> 00:51:44,000
好,大概就是這樣。

494
00:51:45,000 --> 00:51:50,000
那我在投影片上面還會放上幾個螢幕截圖。

495
00:51:50,000 --> 00:51:52,000
各位看一下。

496
00:51:56,000 --> 00:52:00,000
如果今天這個GitHub是在一個大型的,

497
00:52:00,000 --> 00:52:03,000
譬如說那種Google雲端,

498
00:52:03,000 --> 00:52:05,000
或是Amazon雲端上面運行的話,

499
00:52:05,000 --> 00:52:08,000
在啟動伺服器的時候,

500
00:52:08,000 --> 00:52:10,000
有可能它會提供一個選項。

501
00:52:10,000 --> 00:52:12,000
就是可能它會說,

502
00:52:12,000 --> 00:52:14,000
這個伺服器需要幾個CPU啊,

503
00:52:14,000 --> 00:52:15,000
你可以自己選擇,

504
00:52:15,000 --> 00:52:20,000
你要開比較大的伺服器,

505
00:52:20,000 --> 00:52:22,000
還是開比較小的伺服器。

506
00:52:22,000 --> 00:52:26,000
那Kalisto因為它是一個免費的Hub,

507
00:52:26,000 --> 00:52:31,000
所以它在這方面提供所有的使用者一個CPU,

508
00:52:31,000 --> 00:52:36,000
也就是每一次只使用一個CPU去做事情。

509
00:52:36,000 --> 00:52:41,000
那這個螢幕截圖就是從我自己研究室的Hub截圖下來,

510
00:52:41,000 --> 00:52:43,000
你可以看到我們最多可以開到64個CPU。

511
00:52:43,000 --> 00:52:45,000
事實上下面還有,

512
00:52:45,000 --> 00:52:48,000
有64個CPU加上GPU的選項,

513
00:52:48,000 --> 00:52:51,000
就是更豪華一點。

514
00:52:51,000 --> 00:52:53,000
那另外一張截圖在這裡呢,

515
00:52:53,000 --> 00:52:57,000
是只有Hub的管理員可以看得到的。

516
00:52:57,000 --> 00:53:05,000
你可以看到說上面會有一些,

517
00:53:05,000 --> 00:53:06,000
如果你今天是管理員的話,

518
00:53:06,000 --> 00:53:08,000
你可以看到現在多少人在使用這個Hub,

519
00:53:08,000 --> 00:53:10,000
哪些人是正在用的,

520
00:53:10,000 --> 00:53:12,000
哪些人是很久沒用的。

521
00:53:12,000 --> 00:53:18,000
你可以直接去停,

522
00:53:18,000 --> 00:53:20,000
如果你發現有異常的使用,

523
00:53:20,000 --> 00:53:22,000
你就可以直接把他們的Hub關掉,

524
00:53:22,000 --> 00:53:24,000
這樣他們就沒辦法繼續用了。

525
00:53:24,000 --> 00:53:26,000
之類之類的。

526
00:53:26,000 --> 00:53:30,000
只是稍微給你們看一下管理員的介面。

527
00:53:30,000 --> 00:53:36,000
好,因為一個小時好像快不到。

528
00:53:36,000 --> 00:53:38,000
我自己有個問題。

529
00:53:38,000 --> 00:53:40,000
一個小時快要到了,

530
00:53:40,000 --> 00:53:42,000
所以我想先停一下,

531
00:53:42,000 --> 00:53:44,000
看大家有沒有問題。

532
00:53:44,000 --> 00:53:46,000
我自己有個問題,

533
00:53:46,000 --> 00:53:50,000
就是這個Kalisto它原本,

534
00:53:50,000 --> 00:53:52,000
如果身為一個User,

535
00:53:52,000 --> 00:53:54,000
你應該要怎麼用它?

536
00:53:54,000 --> 00:53:56,000
啊,問得好。

537
00:53:56,000 --> 00:54:00,000
後面這裡應該有。

538
00:54:00,000 --> 00:54:02,000
如果我們回去剛才的Hub,

539
00:54:02,000 --> 00:54:04,000
你會看到在Getting Started,

540
00:54:04,000 --> 00:54:07,000
這個Notebook裡面有幾個連結,

541
00:54:07,000 --> 00:54:09,000
那麼這些連結都可以點。

542
00:54:09,000 --> 00:54:13,000
譬如說我們可以點Preparation,

543
00:54:13,000 --> 00:54:16,000
裡面的Kalisto Jupyter and Python Basics Notebook,

544
00:54:16,000 --> 00:54:18,000
點進去,

545
00:54:18,000 --> 00:54:22,000
然後這個Hub就會開始擷取,

546
00:54:22,000 --> 00:54:24,000
他們存在GitHub上面的資源,

547
00:54:24,000 --> 00:54:28,000
然後複製一份到Hub上面。

548
00:54:29,000 --> 00:54:32,000
然後他們弄好之後呢,

549
00:54:32,000 --> 00:54:37,000
你的Hub的空間就會多出一些東西。

550
00:54:37,000 --> 00:54:41,000
然後這些東西就是你可以用來學習的資源。

551
00:54:41,000 --> 00:54:42,000
好,出來了。

552
00:54:42,000 --> 00:54:45,000
這個是剛剛擷取下來的新的Notebook,

553
00:54:45,000 --> 00:54:48,000
然後這個Notebook就是在教你Python,

554
00:54:48,000 --> 00:54:49,000
簡單來講。

555
00:54:49,000 --> 00:54:52,000
然後有一個YouTube的Video先在這邊,

556
00:54:52,000 --> 00:54:56,000
你可以看看,

557
00:54:56,000 --> 00:54:59,000
像這樣就可以看。

558
00:54:59,000 --> 00:55:03,000
然後底下有一些其他的東西,

559
00:55:03,000 --> 00:55:05,000
你可以搭配的文字敘述,

560
00:55:05,000 --> 00:55:07,000
然後執行這些程式碼,

561
00:55:07,000 --> 00:55:11,000
然後來看一下會發生什麼事情。

562
00:55:11,000 --> 00:55:12,000
還有一個影片,

563
00:55:12,000 --> 00:55:16,000
不像很好看,不過改天再看。

564
00:55:16,000 --> 00:55:19,000
所以它像是一個教學的…

565
00:55:19,000 --> 00:55:20,000
它是一個教學Hub。

566
00:55:20,000 --> 00:55:23,000
各種東西,有各種教學的網站這樣。

567
00:55:23,000 --> 00:55:25,000
是的,它是一個教學的Hub。

568
00:55:25,000 --> 00:55:28,000
那如果我們回去剛才的Lab介面,

569
00:55:28,000 --> 00:55:31,000
你會看到按重新整理,

570
00:55:31,000 --> 00:55:33,000
這裡有一個圓圈按重新整理的話,

571
00:55:33,000 --> 00:55:36,000
你會看到出現了一個新的檔案,

572
00:55:36,000 --> 00:55:38,000
出現一個新的資料夾。

573
00:55:38,000 --> 00:55:39,000
點進去的話呢,

574
00:55:39,000 --> 00:55:41,000
你可以看到裡面好多東西,

575
00:55:41,000 --> 00:55:45,000
這就是你剛才下載下來的東西。

576
00:55:45,000 --> 00:55:47,000
那裡面除了剛才那個Notebook,

577
00:55:47,000 --> 00:55:49,000
還有很多其他的Notebook,

578
00:55:49,000 --> 00:55:52,000
你可以參考。

579
00:55:52,000 --> 00:55:56,000
總之就是一個規模還蠻龐大的資源,

580
00:55:56,000 --> 00:55:58,000
就是提供給國中小老師,

581
00:55:58,000 --> 00:56:01,000
讓他們進行資料科學的用法。

582
00:56:01,000 --> 00:56:05,000
那你可以去看看他們到底做了哪些模組出來。

583
00:56:05,000 --> 00:56:08,000
那除了以這種方法去瀏覽Calista提供的資源,

584
00:56:08,000 --> 00:56:09,000
這裡應該還有一個,

585
00:56:09,000 --> 00:56:11,000
Calista Learning Module。

586
00:56:11,000 --> 00:56:13,000
點進去的話呢,

587
00:56:13,000 --> 00:56:14,000
會連到他們的另外一個頁面,

588
00:56:14,000 --> 00:56:16,000
就是這個。

589
00:56:16,000 --> 00:56:18,000
接下來有很多Learning Modules,

590
00:56:18,000 --> 00:56:20,000
所以如果你今天是老師,

591
00:56:20,000 --> 00:56:21,000
你就可以說,

592
00:56:21,000 --> 00:56:23,000
我今天想讓我的學生學哪一個Module,

593
00:56:23,000 --> 00:56:24,000
你就點進去,click。

594
00:56:24,000 --> 00:56:26,000
然後這個Module的內容,

595
00:56:26,000 --> 00:56:29,000
就會直接被擷取到Jubed Hub,

596
00:56:29,000 --> 00:56:30,000
然後再把這個Jubed Hub,

597
00:56:30,000 --> 00:56:32,000
分享給你的學生們就可以了。

598
00:56:32,000 --> 00:56:34,000
或是叫學生自己點,

599
00:56:34,000 --> 00:56:37,000
這樣學生們就可以用他們的帳號,

600
00:56:37,000 --> 00:56:44,000
然後直接執行放在下面的東西。

601
00:56:44,000 --> 00:56:46,000
那這邊還有很多其他的Resources,

602
00:56:46,000 --> 00:56:48,000
像我自己很喜歡的一個是,

603
00:56:48,000 --> 00:56:54,000
他們有那個跟北美原住民合作的內容。

604
00:56:54,000 --> 00:56:56,000
譬如說,點進去的話,

605
00:56:56,000 --> 00:57:01,000
這邊有一個捕魚陷阱。

606
00:57:01,000 --> 00:57:04,000
就是用資料分析,

607
00:57:04,000 --> 00:57:08,000
來看放在哪邊的捕魚陷阱,

608
00:57:08,000 --> 00:57:10,000
抓魚的效率是最好的。

609
00:57:11,000 --> 00:57:13,000
他是一個Learning Module,

610
00:57:13,000 --> 00:57:14,000
所以點進去之後,

611
00:57:14,000 --> 00:57:16,000
他就會被擷取到你的Jubed Hub,

612
00:57:16,000 --> 00:57:21,000
然後就開始做這些有趣的資料分析。

613
00:57:21,000 --> 00:57:26,000
讀完了,出現了。

614
00:57:26,000 --> 00:57:33,000
這邊有東西,我們來試試看,跑跑看。

615
00:57:33,000 --> 00:57:35,000
就會出現一張地圖。

616
00:57:35,000 --> 00:57:36,000
這是一個互動性的地圖,

617
00:57:36,000 --> 00:57:40,000
就可以在這邊拖曳,然後放大縮小。

618
00:57:40,000 --> 00:57:45,000
這是在Vancouver附近的捕魚場,之類之類。

619
00:57:45,000 --> 00:57:49,000
所以Calisto本身提供非常多的教學資源,

620
00:57:49,000 --> 00:57:52,000
來幫助你熟悉資料科學。

621
00:57:52,000 --> 00:57:53,000
那當然對各位而言,

622
00:57:53,000 --> 00:57:58,000
可能還有Jubed Hub是怎麼進行資料科學的。

623
00:57:58,000 --> 00:58:00,000
看起來很酷。

624
00:58:00,000 --> 00:58:09,000
那這些資料都是要經過Calisto這個組織嗎?

625
00:58:09,000 --> 00:58:10,000
他們要認證嗎?

626
00:58:10,000 --> 00:58:14,000
不然這些東西是怎麼決定要不要被放上去的?

627
00:58:14,000 --> 00:58:19,000
Calisto是兩個組織合作的企劃。

628
00:58:19,000 --> 00:58:25,000
兩個非營利組織NPO合作的企劃。

629
00:58:26,000 --> 00:58:31,000
這兩個組織都有出團隊去維護Calisto。

630
00:58:31,000 --> 00:58:34,000
所有的模組,就是這些Notebook,

631
00:58:34,000 --> 00:58:36,000
都是他們寫的。

632
00:58:36,000 --> 00:58:39,000
他們使用的資料,我想應該是從其他地方來的。

633
00:58:39,000 --> 00:58:41,000
包括譬如說像是這個捕魚的資料,

634
00:58:41,000 --> 00:58:44,000
我想是他們跟當地的部落合作,

635
00:58:44,000 --> 00:58:49,000
然後輸入進來的。

636
00:58:49,000 --> 00:58:51,000
除此之外,也有很多科學上的公開資料。

637
00:58:51,000 --> 00:58:58,000
他們應該就是用那些公開資料去展示資料科學怎麼做。

638
00:58:58,000 --> 00:59:04,000
了解,謝謝。

639
00:59:04,000 --> 00:59:07,000
我其實還有最後一部分,

640
00:59:07,000 --> 00:59:09,000
不過如果各位覺得很滿意,

641
00:59:09,000 --> 00:59:17,000
我們可以到這邊就打住。

642
00:59:17,000 --> 00:59:19,000
沒關係,我們可以繼續進行。

643
00:59:19,000 --> 00:59:21,000
是嗎?

644
00:59:21,000 --> 00:59:25,000
好,那麼如果各位覺得OK,

645
00:59:25,000 --> 00:59:28,000
我就把剩下的影片也講一講好了。

646
00:59:28,000 --> 00:59:29,000
那最後一個部分呢,

647
00:59:29,000 --> 00:59:37,000
就是提供大家更多的一些資源。

648
00:59:37,000 --> 00:59:44,000
那除了Calisto Hub之外呢,

649
00:59:44,000 --> 00:59:46,000
還有很多其他的Hub都是存在的。

650
00:59:46,000 --> 00:59:50,000
譬如說一個很常用的Hub的服務叫做Binder。

651
00:59:50,000 --> 00:59:52,000
那這個Binder這個服務呢,

652
00:59:52,000 --> 00:59:58,000
專門用在讓一個GitHub的儲存庫,

653
00:59:58,000 --> 01:00:03,000
變成一個可以馬上被執行的Hub。

654
01:00:03,000 --> 01:00:05,000
譬如說像是這一篇,

655
01:00:05,000 --> 01:00:09,000
是我在去年發的一篇文章。

656
01:00:09,000 --> 01:00:21,000
那它的補充資料就是一個GitHub Pages。

657
01:00:21,000 --> 01:00:27,000
那你在這個GitHub Pages上面可以找到一個連結。

658
01:00:27,000 --> 01:00:31,000
看看能不能切換到那個頁面。

659
01:00:31,000 --> 01:00:37,000
這個GitHub頁面就是我剛發的那篇論文的補充資料。

660
01:00:37,000 --> 01:00:40,000
那底下會有Binder的連結。

661
01:00:40,000 --> 01:00:44,000
點進去就可以啟動一個東西叫做Binder。

662
01:00:44,000 --> 01:00:49,000
那它會帶你到一個跟剛才我們看到的GitHub很像的一個地方。

663
01:00:49,000 --> 01:00:57,000
那就可以再現我在這篇論文裡面分析的資料,

664
01:00:57,000 --> 01:01:03,000
然後重做我在這篇論文裡面呈現的每張圖。

665
01:01:03,000 --> 01:01:09,000
都有非常多的細節解釋這樣。

666
01:01:09,000 --> 01:01:15,000
那這是Binder,就是另外一個用GitHub提供的服務。

667
01:01:15,000 --> 01:01:16,000
長這樣。

668
01:01:16,000 --> 01:01:20,000
那另外一個,這個是跟地球科學比較有關的,

669
01:01:20,000 --> 01:01:22,000
叫做Pangeo Cloud。

670
01:01:22,000 --> 01:01:24,000
是一個也算是半公開吧,

671
01:01:24,000 --> 01:01:26,000
因為你只要是在做地球科學,

672
01:01:26,000 --> 01:01:29,000
你就可以用他們的這個服務。

673
01:01:29,000 --> 01:01:32,000
那就是註冊,然後他們審核通過之後,

674
01:01:32,000 --> 01:01:39,000
就可以開始使用他們部署在Google Cloud跟Amazon上面的GitHub。

675
01:01:39,000 --> 01:01:45,000
那就可以直接存取這兩家供應商的雲端計算的資源,很酷。

676
01:01:48,000 --> 01:01:51,000
那當然還有Callisto,那這個我們剛剛講過,我們就不講了。

677
01:01:51,000 --> 01:01:56,000
那如果你一直想,如果你覺得Callisto Learning Module有點雜的話,

678
01:01:56,000 --> 01:02:00,000
或是你想要一個快速的我們推薦的學習資源,

679
01:02:00,000 --> 01:02:02,000
這邊有兩個,你可以參考一下。

680
01:02:02,000 --> 01:02:10,000
那你可以直接在剛才的Hub裡面進去終端機,

681
01:02:10,000 --> 01:02:14,000
然後輸入這兩行之中的任何一行,你想要輸入哪一行都可以。

682
01:02:14,000 --> 01:02:20,000
因為這兩行其實就是擷取某個GitHub上面的儲存庫,

683
01:02:20,000 --> 01:02:23,000
然後把他們上面的內容全部都放到那個Hub上面。

684
01:02:23,000 --> 01:02:31,000
譬如說呢,我們先用League來做參考,就複製,然後回到剛才的Hub,

685
01:02:31,000 --> 01:02:39,000
然後開啟終端機,貼上,Ctrl-V貼上,

686
01:02:39,000 --> 01:02:46,000
然後抓過來以後,你就可以看到在主資料夾,

687
01:02:46,000 --> 01:02:49,000
就可以看到有出現一個Demo Jupyter Git,

688
01:02:49,000 --> 01:02:53,000
然後點開裡面就有非常多的,看一下,應該是在,

689
01:02:53,000 --> 01:02:58,000
那這裡有一個IP1V,這個就是可以執行的iPython Notebook,

690
01:02:58,000 --> 01:03:03,000
然後其他的Notebook應該放在資料夾裡面,像是Intro Jupyter,

691
01:03:03,000 --> 01:03:09,000
那就可以在裡面看到各種不同針對Jupyter工具的簡單介紹。

692
01:03:09,000 --> 01:03:12,000
總之有非常非常多的學習資源在這邊,

693
01:03:13,000 --> 01:03:19,000
那歡迎各位在隨時自己嘗試遊玩。

694
01:03:22,000 --> 01:03:26,000
那最後兩三張投影片呢,我想要簡單解釋一下就是,

695
01:03:26,000 --> 01:03:28,000
如果你真的對JupyterHub心動了,

696
01:03:28,000 --> 01:03:32,000
然後你想要安裝,想要為自己的研究團隊,

697
01:03:32,000 --> 01:03:35,000
為自己的小組,研究小組,安裝JupyterHub,

698
01:03:35,000 --> 01:03:38,000
然後大家都可以用的話,你要怎麼做?

699
01:03:39,000 --> 01:03:43,000
先說明一下JupyterHub提供了兩種標準的發行板,

700
01:03:44,000 --> 01:03:47,000
一種叫做The Littlest JupyterHub,

701
01:03:47,000 --> 01:03:51,000
這種發行板是專門供小團隊運作,

702
01:03:51,000 --> 01:03:55,000
那種零到一百人之類的,之間的小團隊。

703
01:03:56,000 --> 01:04:00,000
那它就是精簡化,簡單來講,

704
01:04:00,000 --> 01:04:03,000
然後不用花太多時間心力,

705
01:04:03,000 --> 01:04:06,000
就可以自己裝在你可能研究室的伺服器上面,

706
01:04:06,000 --> 01:04:10,000
然後給你的同事或學生使用。

707
01:04:11,000 --> 01:04:15,000
那另外一種JupyterHub發行板叫做JupyterHub on Kubernetes,

708
01:04:15,000 --> 01:04:18,000
那這種發行板就是專門針對,

709
01:04:18,000 --> 01:04:22,000
譬如說在那種大型雲端上面的安裝,

710
01:04:22,000 --> 01:04:29,000
譬如說在Amazon啦,或是Microsoft Azure上面的JupyterHub安裝,

711
01:04:29,000 --> 01:04:32,000
然後一次要給幾百幾千個人使用的,

712
01:04:32,000 --> 01:04:35,000
或是裝在那種超級電腦上面的JupyterHub,

713
01:04:35,000 --> 01:04:37,000
大家都要用的。

714
01:04:38,000 --> 01:04:41,000
那麼你如果要安裝的話,

715
01:04:41,000 --> 01:04:46,000
那就是選擇一種你覺得適合你的方式去安裝。

716
01:04:47,000 --> 01:04:49,000
那即使是這樣子,你或許還是會覺得,

717
01:04:49,000 --> 01:04:52,000
這其中的技術性能看似的太高了,

718
01:04:52,000 --> 01:04:55,000
畢竟大部分的人都不是資訊專業,

719
01:04:55,000 --> 01:04:58,000
裡面有很多細節,你可能不知道怎麼調整。

720
01:04:58,000 --> 01:05:01,000
那我們當然也是看到這個困難,

721
01:05:01,000 --> 01:05:04,000
所以大概在2019年的時候,

722
01:05:04,000 --> 01:05:07,000
我們在Berkeley的Jupyter團隊,

723
01:05:07,000 --> 01:05:09,000
其中的一部分的人,

724
01:05:09,000 --> 01:05:13,000
就成立了一個非營利組織叫做2I2C,

725
01:05:13,000 --> 01:05:17,000
或是The International Interactive Computing Collaboration,

726
01:05:17,000 --> 01:05:19,000
那這個組織的宗旨呢,

727
01:05:19,000 --> 01:05:21,000
這個非營利組織的宗旨,

728
01:05:21,000 --> 01:05:27,000
就是提供各種不同的開放科學的基礎設施的服務,

729
01:05:27,000 --> 01:05:32,000
那麼其中之一,目前發展最旺盛的服務呢,

730
01:05:32,000 --> 01:05:38,000
就是提供研究團隊或是組織安裝他們的JupyterHub,

731
01:05:38,000 --> 01:05:40,000
安裝並管理他們的JupyterHub。

732
01:05:41,000 --> 01:05:47,000
他們目前大部分的資金來源是John Zuckerberg Initiative,

733
01:05:47,000 --> 01:05:49,000
就是臉書的那個。

734
01:05:50,000 --> 01:05:59,000
那不過他們也有接收到很多來自於其他的開放科學組織的資金。

735
01:06:03,000 --> 01:06:07,000
我們剛才看到的Callisto跟PangeoHub,

736
01:06:07,000 --> 01:06:11,000
這兩個Hub就是由2I2C來幫忙設置的。

737
01:06:13,000 --> 01:06:17,000
但是Binder跟我們自己研究室的Hub,這不是。

738
01:06:17,000 --> 01:06:21,000
我們自己研究室的Hub更華麗一點,

739
01:06:21,000 --> 01:06:23,000
因為我們要測試很多東西。

740
01:06:23,000 --> 01:06:25,000
我們的研究室的Hub大概長這樣,

741
01:06:25,000 --> 01:06:27,000
可以稍微給你們看一下。

742
01:06:39,000 --> 01:06:41,000
好像沒辦法直接開始。

743
01:06:41,000 --> 01:06:43,000
看來需要等一下。

744
01:06:45,000 --> 01:06:47,000
等一下有機會再來看好了。

745
01:06:49,000 --> 01:06:53,000
那我們藉由2I2C呢,

746
01:06:53,000 --> 01:06:59,000
想要達到的願景就是在未來的某一天,

747
01:06:59,000 --> 01:07:01,000
作為一個研究人員,

748
01:07:01,000 --> 01:07:04,000
你的所有的研究活動,所有的學術活動,

749
01:07:04,000 --> 01:07:06,000
可以發生在雲端。

750
01:07:06,000 --> 01:07:09,000
你自己的研究團隊是在雲端上面合作,

751
01:07:09,000 --> 01:07:14,000
那你要存取HPC運算的資源,

752
01:07:14,000 --> 01:07:16,000
就是用JupyterHub去登錄。

753
01:07:16,000 --> 01:07:20,000
那學校機構本身可能也會有一個JupyterHub,

754
01:07:20,000 --> 01:07:24,000
那當你今天要上課或是給演講的時候,

755
01:07:24,000 --> 01:07:26,000
你可以直接使用他們Hub的資源,

756
01:07:26,000 --> 01:07:32,000
來給別人,你想讓他們學習的資源。

757
01:07:33,000 --> 01:07:37,000
來給別人,你想讓他們學習的東西。

758
01:07:38,000 --> 01:07:42,000
那甚至呢,你今天如果去參加一個國際會議,

759
01:07:42,000 --> 01:07:46,000
那這個國際會議本身可能也會有一個Hub,

760
01:07:46,000 --> 01:07:51,000
然後讓會議的與會者可以同時登錄這個Hub,

761
01:07:51,000 --> 01:07:53,000
在上面直接進行研究的交流,

762
01:07:53,000 --> 01:07:55,000
以及學習新技能。

763
01:07:55,000 --> 01:08:03,000
大概就是這樣,我今天大概就是這樣。

764
01:08:03,000 --> 01:08:06,000
那最後最後我想說,

765
01:08:06,000 --> 01:08:10,000
所有的開放科學的進展都絕對不是靠一己之力,

766
01:08:10,000 --> 01:08:14,000
這之中有非常非常多的社群的參與。

767
01:08:14,000 --> 01:08:18,000
那舉例來說,我今天能夠跟你們分享這個事情,

768
01:08:18,000 --> 01:08:23,000
是必須要歸功於我們整個在Berkeley的研究團隊,

769
01:08:23,000 --> 01:08:25,000
也就是Jupiter Meteors,

770
01:08:25,000 --> 01:08:28,000
所以我把他們的人全部都放在這邊,

771
01:08:28,000 --> 01:08:30,000
然後也稍微放了一下,

772
01:08:30,000 --> 01:08:36,000
讓你們了解一下Jupiter Meteors這個計畫目前在做什麼。

773
01:08:36,000 --> 01:08:38,000
非常感謝他們。

774
01:08:38,000 --> 01:08:41,000
那最後呢,如果大家有什麼問題,

775
01:08:41,000 --> 01:08:43,000
這裡是我的聯絡方式,

776
01:08:43,000 --> 01:08:46,000
你可以現在就問,或是這裡是我的聯絡方式,

777
01:08:46,000 --> 01:08:49,000
隨時都可以找我。

778
01:08:49,000 --> 01:08:53,000
那麼,對,這就是我最後一張圖片,感謝大家。

779
01:08:53,000 --> 01:08:55,000
謝謝懷傑。

780
01:08:55,000 --> 01:08:58,000
那我們可以先,如果大家有興趣的話,

781
01:08:58,000 --> 01:09:03,000
可以把麥克風打開,然後給懷傑一個鼓掌。

782
01:09:07,000 --> 01:09:18,000
然後,我先把那個PoAP的code寫上來,

783
01:09:18,000 --> 01:09:20,000
讓我找一下。

784
01:09:20,000 --> 01:09:24,000
大家如果有什麼問題的話,也可以現在發問。

785
01:09:24,000 --> 01:09:51,000
那我先給大家鼓掌,我看到有人鼓掌。

786
01:09:52,000 --> 01:09:58,000
好,我這邊把那個PoAP的那個code寫下來。

787
01:10:01,000 --> 01:10:03,000
謝謝各位的參與。

788
01:10:03,000 --> 01:10:05,000
好,謝謝。

789
01:10:05,000 --> 01:10:08,000
那,那個,我這邊有個問題。

790
01:10:08,000 --> 01:10:11,000
就是,你的那個投影片啊,

791
01:10:11,000 --> 01:10:17,000
你之後想要分享在,譬如說Tyra的網站上嗎?

792
01:10:17,000 --> 01:10:23,000
不然,就是,你那個開分享應該只是暫時的吧?

793
01:10:23,000 --> 01:10:27,000
嗯,我想想好了。

794
01:10:27,000 --> 01:10:31,000
我可以分享給目前我們有參加的與會者,絕對沒問題。

795
01:10:31,000 --> 01:10:35,000
而且,短時間之內,這個投影片應該會是公開的。

796
01:10:35,000 --> 01:10:39,000
不過,要不要分享到網站上,我之後再跟你聯繫。

797
01:10:39,000 --> 01:10:41,000
好好,沒有問題。

798
01:10:41,000 --> 01:10:42,000
謝謝。

799
01:10:42,000 --> 01:10:56,000
然後,另外,我自己有個問題。

800
01:10:56,000 --> 01:11:02,000
就是像,現在很多那個Quantum Computing的那些公司啊,

801
01:11:02,000 --> 01:11:05,000
他們做的事情是不是也是類似的?

802
01:11:05,000 --> 01:11:10,000
就是,他們把他們的計算的那個資源,

803
01:11:10,000 --> 01:11:13,000
在雲端上面分享給大家使用。

804
01:11:13,000 --> 01:11:17,000
然後,你也是用Python寫code,

805
01:11:17,000 --> 01:11:21,000
然後,就是把它upload到他們的伺服器上面,

806
01:11:21,000 --> 01:11:22,000
他們就會幫你跑。

807
01:11:22,000 --> 01:11:24,000
就是,他們的哈位也不一樣,

808
01:11:24,000 --> 01:11:26,000
但是他們就會幫你跑這個code。

809
01:11:26,000 --> 01:11:29,000
嗯,其實這還是算是比較傳統的模式。

810
01:11:29,000 --> 01:11:32,000
比較傳統使用超級電腦的模式,

811
01:11:32,000 --> 01:11:35,000
就是在超級電腦上面會有一個,

812
01:11:35,000 --> 01:11:37,000
有點像是工作排程器的東西。

813
01:11:37,000 --> 01:11:42,000
那,你必須要把你自己寫的程式碼腳本啊,

814
01:11:42,000 --> 01:11:44,000
上傳到這個工作流程器裡面。

815
01:11:44,000 --> 01:11:48,000
然後,由這個工作流程器去部署。

816
01:11:48,000 --> 01:11:51,000
就是他會決定說,他要撥多少計算資源,

817
01:11:51,000 --> 01:11:54,000
在什麼時候,然後要撥多少計算資源,

818
01:11:54,000 --> 01:11:56,000
來執行你的程式碼。

819
01:11:56,000 --> 01:11:59,000
然後,最後呢,再把那個執行的結果,

820
01:11:59,000 --> 01:12:02,000
以某種方式打包,然後送給你。

821
01:12:02,000 --> 01:12:03,000
對。

822
01:12:03,000 --> 01:12:05,000
對,這其實是比較傳統的模式。

823
01:12:05,000 --> 01:12:07,000
那我們現在推廣的模式,

824
01:12:07,000 --> 01:12:12,000
就是省去這個工作排程器的這個部分。

825
01:12:12,000 --> 01:12:15,000
Jupyter本身就可以當作工作排程器。

826
01:12:15,000 --> 01:12:19,000
你只要使用正確的,譬如說Kubernetes的這種結構。

827
01:12:19,000 --> 01:12:22,000
呃,實際的技術細節有點複雜,

828
01:12:22,000 --> 01:12:24,000
我這邊簡單的講就好。

829
01:12:24,000 --> 01:12:29,000
呃,你只要使用Kubernetes這種結構,

830
01:12:29,000 --> 01:12:34,000
你就可以做到用JupyterHub來當作Scheduler,

831
01:12:34,000 --> 01:12:36,000
來當作工作排程器。

832
01:12:36,000 --> 01:12:39,000
你可以在你的腳本一剛開始就決定,

833
01:12:39,000 --> 01:12:43,000
你要用多少資源。

834
01:12:43,000 --> 01:12:47,000
你可以用幾個節點啊,幾個Cluster。

835
01:12:47,000 --> 01:12:50,000
然後呢,你再開始跑。

836
01:12:50,000 --> 01:12:54,000
然後JupyterHub有跟Desk,

837
01:12:54,000 --> 01:12:57,000
Desk是一個我剛講過的平行運算的套件,

838
01:12:57,000 --> 01:13:00,000
Python裡面平行運算的套件。

839
01:13:00,000 --> 01:13:06,000
那有Desk的外掛元件。

840
01:13:06,000 --> 01:13:08,000
你只要使用了Desk,

841
01:13:08,000 --> 01:13:13,000
就可以在JupyterHub裡面開啟幾個,

842
01:13:13,000 --> 01:13:15,000
有點像是控制面板,

843
01:13:15,000 --> 01:13:20,000
然後來監測你在執行這些程式碼的時候,

844
01:13:20,000 --> 01:13:24,000
即時的監測你在執行這些程式碼的時候,

845
01:13:24,000 --> 01:13:26,000
使用多少CPU。

846
01:13:39,000 --> 01:13:41,000
喂喂喂,是我卡了嗎?

847
01:13:46,000 --> 01:13:49,000
好像,大家聽得到懷杰講話嗎?

848
01:13:53,000 --> 01:13:56,000
好像是,殭屍好像消失了。

849
01:14:01,000 --> 01:14:03,000
沒關係,我們等他一下好了。

850
01:14:15,000 --> 01:14:39,000
大家如果還有什麼,有問題可以發問,

851
01:14:39,000 --> 01:14:42,000
可以把它寫下來發問一下喔。

852
01:14:45,000 --> 01:14:47,000
好,謝謝大家。

853
01:15:15,000 --> 01:15:38,000
剛才聽講者說Desk好像是Python的一個套件吧,

854
01:15:38,000 --> 01:15:44,000
所以應該是只要他有在他的伺服器上面裝Desk,

855
01:15:44,000 --> 01:15:46,000
他應該就可以使用Desk的功能。

856
01:15:46,000 --> 01:15:48,000
只是我不知道Desk的功能是什麼。

857
01:15:58,000 --> 01:15:59,000
我猜應該是。

858
01:16:08,000 --> 01:16:10,000
哈囉,懷杰,聽得到嗎?

859
01:16:11,000 --> 01:16:13,000
哈囉,剛剛好像出現了一點問題。

860
01:16:14,000 --> 01:16:18,000
抱歉抱歉,我剛剛是不是講到一半的時候就被卡掉了?

861
01:16:18,000 --> 01:16:23,000
對,你剛剛講到…講到哪裡啊?

862
01:16:25,000 --> 01:16:27,000
我剛剛是不是講到那個…

863
01:16:31,000 --> 01:16:36,000
他可以用…他有一個自己的Scheduler嗎?

864
01:16:37,000 --> 01:16:42,000
他有點像是利用…應該這麼說,

865
01:16:42,000 --> 01:16:48,000
就是JupyterHub是透過另外一個開源的套件叫做Desk,

866
01:16:48,000 --> 01:16:56,000
來管理平行運算的部分,來管理存取CPU資源的部分,

867
01:16:56,000 --> 01:16:58,000
還有平行運算的部分。

868
01:16:58,000 --> 01:17:04,000
Desk有提供一個有點像是外掛元件的東西,

869
01:17:04,000 --> 01:17:12,000
他可以讓你送到Cluster裡面的工作排程,

870
01:17:13,000 --> 01:17:17,000
他可以監測你送到Cluster裡面的工作排程,

871
01:17:17,000 --> 01:17:21,000
然後用可視化的圖…就用視覺化的圖表,

872
01:17:22,000 --> 01:17:26,000
來讓你知道現在這個排程進行到哪裡了,

873
01:17:26,000 --> 01:17:29,000
然後可能還要多久,然後跑的結果怎麼樣。

874
01:17:29,000 --> 01:17:33,000
了解,剛才有一個聽眾問那個…

875
01:17:34,000 --> 01:17:36,000
我不會唸這個名字,Yi…

876
01:17:36,000 --> 01:17:37,000
Desk

877
01:17:37,000 --> 01:17:41,000
對,Desk,然後他是想要問這個是內建功能嗎?

878
01:17:41,000 --> 01:17:42,000
還是有另外的連結?

879
01:17:42,000 --> 01:17:45,000
然後是用那個…那個叫什麼?

880
01:17:45,000 --> 01:17:48,000
Pip Install來做這件事情嗎?

881
01:17:52,000 --> 01:17:54,000
Desk的話…

882
01:17:55,000 --> 01:17:59,000
Desk應該是有在Pip上面,

883
01:17:59,000 --> 01:18:04,000
不過你可以試試看,我想應該是有。

884
01:18:04,000 --> 01:18:06,000
然後Desk網站是這個。

885
01:18:18,000 --> 01:18:22,000
在Callisto Hub上面,我印象中Callisto Hub是沒有裝Desk,

886
01:18:22,000 --> 01:18:28,000
因為他們本來就不希望使用者用平行運算來真的計算,

887
01:18:28,000 --> 01:18:30,000
來消耗大量的計算資源。

888
01:18:30,000 --> 01:18:34,000
所以Callisto Hub是沒有裝Desk的,他們不支援平行運算。

889
01:18:34,000 --> 01:18:37,000
但如果你今天想要裝個人的電腦,

890
01:18:38,000 --> 01:18:40,000
裝在個人的團隊上面,那我想…

891
01:18:40,000 --> 01:18:43,000
像我們的研究室團隊就有Desk,

892
01:18:43,000 --> 01:18:46,000
我們有Desk跟另外一個叫做Desk Gateway的東西。

893
01:18:48,000 --> 01:18:51,000
他們兩個的用法就是有點…會有點不太一樣。

894
01:18:51,000 --> 01:18:52,000
Desk…

895
01:18:57,000 --> 01:19:02,000
Desk Gateway是專門用來…有點像收集,

896
01:19:02,000 --> 01:19:06,000
就是如果你今天的JubyHub是部署在雲端,

897
01:19:06,000 --> 01:19:08,000
譬如說Amazon雲端或是Google雲端的話,

898
01:19:08,000 --> 01:19:14,000
Desk Gateway是專門用來收集那些在雲端上面可用的節點,

899
01:19:15,000 --> 01:19:18,000
然後把它們聚在一起,讓你使用。

900
01:19:18,000 --> 01:19:23,000
Desk則是把你自己的工作流程給傳到這些節點,

901
01:19:23,000 --> 01:19:26,000
讓它們開始跑,有點像是這樣子。

902
01:19:31,000 --> 01:19:37,000
那…對,但是Jupyter就是透過Desk的支援,

903
01:19:37,000 --> 01:19:42,000
來實現我們想要的平行運算的方法。

904
01:19:43,000 --> 01:19:47,000
那我想要請問…再延伸一下剛才的問題,

905
01:19:47,000 --> 01:19:52,000
就是像這些Quantum Computation的Company啊,

906
01:19:52,000 --> 01:19:55,000
那你會建議他們使用JupyterHub嗎?

907
01:19:55,000 --> 01:19:57,000
就是他們既然都已經要開源了,

908
01:19:57,000 --> 01:20:00,000
那他們何不做個JupyterHub呢?

909
01:20:01,000 --> 01:20:02,000
當然會啊,當然會啊。

910
01:20:02,000 --> 01:20:07,000
事實上現在已經有非常多的不同的努力在多方進行。

911
01:20:08,000 --> 01:20:11,000
我不確定你心裡想的是哪一家啦?

912
01:20:13,000 --> 01:20:17,000
但我想現在就是慢慢地有這個趨勢,

913
01:20:17,000 --> 01:20:22,000
就是大家都知道什麼樣子的實踐方法呢,

914
01:20:22,000 --> 01:20:24,000
是對開放科學有助益的。

915
01:20:24,000 --> 01:20:30,000
那大家就會傾向去了解以及使用這些方法。

916
01:20:32,000 --> 01:20:37,000
就是說他們可能已經有一些人已經有這個想法之類的。

917
01:20:37,000 --> 01:20:41,000
那當然對於某些商業的公司,

918
01:20:41,000 --> 01:20:43,000
他們可能有他們自己的考量。

919
01:20:43,000 --> 01:20:45,000
最大的問題就是,

920
01:20:45,000 --> 01:20:50,000
他們可能會覺得他們自己的東西具有智慧財產。

921
01:20:51,000 --> 01:20:52,000
這樣子的話,

922
01:20:52,000 --> 01:20:56,000
他們可能就會不願意把他們所有的東西都開放出來。

923
01:21:02,000 --> 01:21:07,000
對小公司而言,這可能是一個主要的阻礙。

924
01:21:07,000 --> 01:21:08,000
了解。

925
01:21:08,000 --> 01:21:10,000
那我看目前為止,

926
01:21:10,000 --> 01:21:14,000
大家做的努力好像比較偏向於說,

927
01:21:14,000 --> 01:21:20,000
讓大眾可以認識一下這個跑跑簡單的Quantum Circling,

928
01:21:20,000 --> 01:21:24,000
然後看看就是教大家怎麼做這件事情而已。

929
01:21:25,000 --> 01:21:26,000
當然當然當然,

930
01:21:26,000 --> 01:21:28,000
就是現在是在起步階段嘛。

931
01:21:28,000 --> 01:21:33,000
譬如說我現在在這邊放的教學資源,

932
01:21:33,000 --> 01:21:38,000
大部分也都是就是教大家怎麼使用Python,

933
01:21:38,000 --> 01:21:42,000
怎麼使用Git這種很簡單很簡單的基礎。

934
01:21:42,000 --> 01:21:44,000
那但是當使用者會之後,

935
01:21:44,000 --> 01:21:47,000
他們就可以開始發揮他們的創意去做一些困難的事情。

936
01:21:48,000 --> 01:21:49,000
比較進階的事情。

937
01:21:51,000 --> 01:21:54,000
那這邊大家還沒有問題呢?

938
01:21:59,000 --> 01:22:00,000
好像沒有。

939
01:22:00,000 --> 01:22:03,000
那我就把那個錄影關掉。

