start	end	text
0	22000	今天是2022年10月8號的Tyra Talk,我們今天邀請到的講者是鄭懷傑,他要講的題目是Jupiter Hub,迷你工作房,開放科學的雲端基地。
22000	40000	讓我稍微介紹一下懷傑的背景。懷傑是在2010和2013年的時候在台大分別取得學士和碩士學位,
40000	50000	接下來在2015年前往康奈爾大學就攻讀地球與大氣科學的博士。
51000	68000	在去年2021年加入了加州伯克萊大學統計系的研究團隊,現在是博士後研究員的身份在執行Jupiter meets the Earth的計畫。
70000	86000	今天他會教我們認識Jupiter Hub,他也有提到參加這個演講不需要任何背景知識和程式設計的技巧,
86000	100000	不過如果要在演講時同步存取Jupiter的資源,必須要準備Google或者是Microsoft的帳號,然後以進行第三方登錄,所以大家可以先準備一下。
101000	105000	我的介紹就到這邊,時間就交給懷傑了,可以嗎?
106000	117000	懷傑議員 沒問題,謝謝施安的介紹。歡迎大家,也非常榮幸能夠再次邀請到Tara進行演講。
117000	127000	我上次的演講是在今年1月,稍微跟各位分享一下我現在在UC Berkeley做的事情。
128000	132000	這一次,與其說是教,不如說是分享。
133000	137000	這一次,我想把重點放在Jupiter Hub這個工具上面。
138000	158000	我是想用迷你工作坊的方式來跟各位分享一下Jupiter Hub到底是什麼,以及為什麼我們叫他開放科學的雲端基地,然後他又可以怎麼樣的轉換我們對於開放科學的一些實踐的方法。
161000	164000	OK,開始囉。
165000	176000	那麼,剛才施安有稍微介紹一下我在哪,目前是在哪邊,那我就稍微再補充一下。
177000	187000	那我本身的專業領域是地球科學,或是更精確地說是地球物理、遙測、冰雪圈科學跟行星科學。
188000	199000	目前我現在大部分在做的研究是使用豐富的衛星遙測資料,再加上模型分析,監測並了解冰雪圈的變化。
200000	214000	舉個例子,你可以看到這邊有一個衛星,它在繞著地球上面,然後會發射出綠色的雷射光,然後打到地表之後,這個衛星會再接收反射的雷射光。
215000	225000	然後根據這個時間再乘上光速,就可以算出來衛星跟地表的距離,再換算成地表的高度。
226000	239000	如果我們可以對一個冰河重複地做這件事情,我們就可以獲得一個冰河隨著時間經過表面的高度,或是你也可以說冰的厚度的變化。
240000	249000	然後我們再利用一些物理的模型去探討分析說,到底是有什麼因素影響了這個冰河的厚度變化。
250000	253000	聽起來蠻酷的,我自己也很喜歡。
254000	261000	不過其實大部分的學術活動,我現在在從事大部分的學術活動,我想跟各位的應該都是差不多。
261000	276000	就是必須要進行研究,然後在適當的時候解釋你自己的研究,給其他人聽,包括同行的科學家,以及不同領域的人士。
278000	288000	除了研究之外,我們會有教學活動,就是我們會寫一些軟體給其他人用,這些我都有稍微做。
289000	298000	這邊放的幾張圖,就是我在過去幾年做過的一些事情,包括開發了一個叫做CARS的軟體在這邊。
299000	309000	我也寫了一個叫做GMT教學手冊的網站,簡單來講就是教別人怎麼用GMT的軟體畫圖。
310000	337000	右下角這張圖則是在我2019年發表的一篇論文裡面,我那個時候跟論文的出版商合作了一下,討論說要怎麼樣做一些材料,可以讓我們能夠更快速、更有效率地去傳達論文的一些新的知識,
338000	340000	然後做成一個新聞稿。
343000	352000	回到我們今天的主題,我們今天要講的是JupyterHub。JupyterHub要如何改變這些我們每日進行的學術活動呢?
354000	359000	在講JupyterHub之前,先稍微提一下Jupyter是什麼樣子的概念。
360000	375000	如果要用一句話去解釋Jupyter是什麼,我會說Jupyter是由開放的資料科學工具組成的生態系統,以及使用它的人組成的社群。
376000	380000	這邊可能有一些專業的術語,所以我再稍微解釋多一點。
380000	388000	這邊所謂的工具是指,如果你今天要完成一件事情,你使用的東西。
390000	396000	舉例來說,Photoshop就是一個影像編輯的工具。
398000	405000	Matplotlib則是在Python底下的一個用來進行科學繪圖的工具,有點像是這樣子。
406000	417000	至於開放這個詞,倒是稍微比較模糊一點,因為老實說,有很多不同的面向都會被我們考慮成是開放的。
418000	426000	舉例來說,它可以指說,你使用的工具,它的原始碼可能是公開的,任何人都可以修改。
427000	439000	另外一方面的開放,有可能指的是,你使用的合作方式可以讓盡可能多的人參與,然後貢獻跟討論。
440000	453000	不管怎麼說,開放這個詞的中心概念就是不要排外,就是能夠讓盡可能多的人參與到你現在在做的這件事情上面。
454000	470000	所以我們會有很多的工具,有些工具是軟體,有些工具可能是硬體,甚至於有些工具是專門描述軟硬體之間怎麼樣結合交互作用的結構。
470000	487000	這些工具跟一般工具不太一樣,你想想,如果放在一個工具下面的工具,可能螺絲起子是用來鎖螺絲,然後老虎鉗可能就是用來扭鐵絲,它們各自都是各自獨立的。
488000	494000	在資料科學裡面,我們所謂的工具,它們時常會互相的依賴。
495000	500000	舉例來說,如果你今天要使用Mathplotlib,你就必須要先安裝Python。
501000	505000	安裝完Python之後,你才可以安裝Mathplotlib,它才會作用。
506000	516000	如果你去把不同的工具之間的相互依賴性畫出來,你就會看到一張很像網路的圖,然後會有點像是那種實物鏈的感覺。
518000	524000	所以我們就會傾向於把這整個工具以及它們之間的相互依賴關係稱作一個生態系統。
525000	530000	像Jupyter這樣子的生態系統,其實它的年紀也沒有很長。
531000	549000	整個開放科學的概念其實到目前為止也才不過出現了我會說二十年,可能各位的體感更短,因為剛開始的前十年都是在草創階段,並不是很多人真的都完全被暴露在這種概念裡面。
550000	566000	其中一個很有可能你接受到這個暴露的時間點,我猜是2015年,因為那個時候LIGO發表了人類史上第一次的重力波觀測事件,震驚了全球。
567000	571000	可能他們得到了2017還是2018諾貝爾獎。
576000	584000	LIGO這個重力波觀測天文台他們做的當然不止於此,當然他們寫文章,然後蓋天文台非常厲害。
584000	597000	不過他們還有一個開放科學的部門,這個部門把他們所有的重力波觀測的事件的資料都整理好,然後發佈到網上。
598000	608000	每個人只要去他們的這個網站,點進去他們的連結,就可以重新執行這個程式碼,然後畫出跟他們的論文裡面一模一樣的圖。
609000	616000	我等一下稍後會再分享一下我的投影片,所以你們也可以點進去這個連結看一下到底是什麼東西。
617000	634000	那在2015年之後或許如果你們有在用推特,你們或許會看到在推特上面越來越多人開始在歌頌,歌頌開放科學多棒,可以讓我做到很多以前做不到的事情。
635000	659000	比如說像這一位,他就在火車上面用他的手機分析SIMIP6的資料。如果你們不知道SIMIP6是什麼的話,它是一個全球性的氣候模擬資料庫,它每天都會產生數以TBG的資料,資料量非常的龐大。
660000	666000	所以能夠在火車上面用智慧型手機去分析這些資料是非常不容易的一件事情。
667000	683000	更有甚者,NASA已經宣布了明年,也就是2023年,是他們的開放科學元年。他們有一個非常大的企劃叫做TOPS,Transform to Open Science。
684000	699000	我們的目標就是從明年開始,花大概四到五年的時間,把他們現在管理跟發布資料的方式全部大翻新。
700000	714000	明年之後,他們就會採用全新一套的模式,就是更開放科學的模式去管理、出版、發表他們的資料工作流程跟研究結果。
715000	731000	所以這已經是一個趨勢,我們可以看到這個趨勢大家都在討論。當然也是拜科技的發展所賜,我們現在採用各種不同的方法去實踐開放科學的方式。
732000	745000	這邊就提供一個例子。我們知道開放科學其實是一個非常籠統的詞,它有很多不同的方式去實踐它,所以這邊我只提供一個例子。
746000	757000	各位可以看這些圖,我們就假設有一個研究人員叫做Jim,他剛寫了一篇很酷的論文,然後剛發表。
758000	782000	他想要更多,他想要說,我想要讓這個論文能夠被所有人,同行也好,其他人士也好,他想要讓所有的人都能夠看到他的論文,然後檢查裡面有沒有錯誤,甚至是重新再現他的實驗。
783000	791000	甚至是改進他在論文裡面做出的一些計算。他可以怎麼做呢?
791000	820000	這裡有一個方法,就是他可以使用一個叫做Jupyter Notebook的東西,在這個檔案裡面他可以放上所有研究的細節,包括敘述性的文字,包括程式碼,包括許多的互動性或是非互動性的圖表,以及更多更多的背景資源,像是原始資料,多媒體,還有軟體等等。
822000	836000	他弄好了這個Jupyter Notebook之後,他把它放到一個網路上的儲存庫,讓大家都可以去讀取。比較流行的儲存庫就像是GitHub,他就可以把它放到GitHub上面,讓大家都可以看得到。
837000	849000	放上去之後,他再多做一些事情,讓這個儲存庫,這裡有個術語叫做Finder Ready。
850000	872000	簡單來講就是提供一些額外的資訊,比如說包括,如果要執行這個儲存庫裡面的Notebook或是程式碼,你需要什麼樣子的軟體套件,你是需要Python,還是需要R,還是需要Julia或是MATLAB,提供這些背景資訊,然後做成一份主態設定的檔案。
873000	879000	然後再妥善地安排裡面的資料以及Notebook擺放的位置,以及他們的結構。
880000	901000	當這些東西都準備好之後,我們就可以使用一個叫做Docker的工具,把這整個儲存庫做成一個獨立的術語叫做影像。
901000	915000	不過他其實就是有點像是一個迷你的執行環境,在這個環境裡面你可以運用相同的環境去執行這些程式碼。
916000	932000	那現在你只要把這個Docker的影像分送給全球其他人,那其他人就可以完美地重現你的研究,然後也不用額外安裝什麼一堆有的沒的軟體。
932000	945000	那麼以上就是其中一個做開放科學的例子,就是讓大家可以更快速地去存取你自己的研究材料。
945000	955000	那麼JupyterHub是怎麼貢獻到資料科學的流程裡面呢?
956000	969000	如果要用一句話去解釋JupyterHub是什麼,我會說JupyterHub就是在共享的計算裝置上面提供便利的資料科學環境的一個工具。
970000	989000	什麼是共享的計算裝置呢?簡單來講,假設你們的實驗室有一台電腦,然後大家都可以登入,然後在上面做一些事情,像是打字、寫文章、處理資料、寫論文等等。
989000	1002000	那這一台你可以登入的伺服器,並且可以存取裡面的CPU或是GPU的資源的機器,就叫做共享的計算裝置。
1004000	1013000	那傳統上來講,我猜你們之中部分有些人可能已經用過了,譬如說SSH登入到一個遠端的伺服器,然後在上面做某些事情。
1014000	1021000	那當然你必須要安裝很多東西,你才可以真正去做到你想要做的,在伺服器上面想要做的事情。
1022000	1024000	那JupyterHub就是幫你免除這些步驟。
1025000	1038000	它提供了一些預先設定好的配置,讓你可以直接的在不需要多做什麼事情,就可以直接的前往那個伺服器,然後在那邊開始進行你的資料科學分析。
1039000	1047000	那這邊一張圖呢,簡單介紹了一下JupyterHub它的概念。
1048000	1055000	你可以想像這邊有很多人,他們現在都要存取這樣子的一台機器,在機器上面有JupyterHub在運行。
1055000	1058000	那每個人呢,首先要先通過一個驗證。
1059000	1068000	那他們成功登入這台機器的時候,JupyterHub會提供幾種標準的介面給他們選擇。
1069000	1077000	譬如說像是Jupyter Notebook的介面,那他們就可以開始藉由這個介面來存取這台機器裡面的計算資源。
1078000	1082000	值得注意的是計算資源本身呢,跟Jupyter是分開的。
1083000	1100000	JupyterHub同時可以準備好幾個不同的計算的環境,譬如說它可以準備一個Python的環境,然後如果我需要的話,我就登入JupyterHub,然後叫出這個Python的環境,說我這次要用Python,就把它抓過來。
1101000	1111000	那同時呢,JupyterHub也可以準備另外一個環境,是完全建立在不同的工具上面,那別人如果要用,也可以隨時再把它叫出來。
1113000	1122000	那所以JupyterHub就是把這樣子的一個工作結構一層一層拆分,讓整個開放科學以及合作變得容易。
1125000	1137000	那這邊再次提供另外一個例子,來跟各位解釋一下JupyterHub到底是怎麼達到我們想要的目標,就是環境共享的目標。
1138000	1145000	假設呢,有一個教授叫做John,他現在在領導一個大型的研究計劃。
1147000	1158000	那這個大型的研究計劃呢,他已經預先配置好他想要用的軟體了,譬如說他可能想要用Python,然後想要用裡面很多不同的套件,他都先裝好了。
1159000	1167000	他就說,哇,這個就是我要的環境。那他要怎麼樣把這個環境妥善地告訴其他人說,你們也一起來用這個環境呢?
1168000	1175000	那我們提供的方法就是,他可以跟學校的IT人員合作。
1176000	1188000	他送一份有點像是申請單這樣子,然後給學校的IT人員說,這是我想要設計的環境,我想要提供出去的環境。
1190000	1198000	那這些環境就會有一個主態設定檔,也就是Configuration File的方式給那個IT的資訊人員。
1199000	1209000	那他收到這份檔案之後呢,他就會參照裡面的設定,然後開啟一個叫做Workspace Manager的東西。
1211000	1218000	在我們這個例子裡面,Workspace Manager就是JupyterHub,所以我就把它叫做JupyterHub。
1219000	1227000	所以呢,這個IT資訊人員就會幫他開啟一個JupyterHub,在學校的電腦裡面。
1229000	1242000	那麼JupyterHub會讀取提供的主態檔案,然後來自動地配置你需要的工作環境,包括Python,包括Python筆下各個套件。
1243000	1246000	你可能還需要其他的一兵幫你配置好。
1247000	1254000	然後呢,最後這個JupyterHub就會在學校的雲端機器伺服器上面運行。
1256000	1262000	那他配置好之後會產生一個有點像是Docker的檔案。
1263000	1273000	有點像是一個,如果我講太多術語聽不懂的話,歡迎最後再隨時問我。
1275000	1282000	會產生一個Docker的檔案,以及一個URL網址。
1283000	1293000	那這樣就可以拿到這個網址之後,就可以把它傳給任何想要跟他合作的人,包括他的學生,包括他的合作者。
1294000	1298000	那麼點開這個網址就可以連到JupyterHub的登入頁面。
1299000	1310000	然後只要能夠驗證他們的身份登入以後,他們就可以存取運行在學校雲端的JupyterHub。
1311000	1318000	然後裡面所有的環境配置都已經準備就緒,不需要再安裝任何額外的東西。
1321000	1323000	這大概就是一個環境共享的概念。
1324000	1334000	好,那麼講解就稍微到這邊,因為這是Mini工作坊,所以接下來我們就要實際的嘗試一下JupyterHub到底是個什麼東西。
1335000	1341000	我們今天要的JupyterHub是一個叫做Calisto的組織設置的。
1346000	1356000	Calisto是由兩個在加拿大的非營利組織共同發行的企劃。
1357000	1376000	他們的企劃的主要目標是提供在加拿大的國中小的老師足夠的資源,可以讓他們在課堂上面直接教學生怎麼樣開始進行資料科學,以及各種不同的教學的模組。
1377000	1387000	他們自己的JupyterHub叫做CalistoHub,這邊我說明一下JupyterHub是工具的名字。
1388000	1394000	利用這個工具搭出來的那個東西,在雲端上運行的那個東西,我們通常會叫做Hub。
1395000	1404000	所以CalistoHub,就是Calisto這個組織,他們用JupyterHub搭起來的一個你可以存取的線上雲端的資源。
1407000	1412000	所以歡迎各位前往,我先把這個連結給你們。
1412000	1437000	OK,首先呢,這是我的投影片連結。
1437000	1447000	然後,這個是Calisto他們的網址,歡迎各位前往這個網址。
1448000	1453000	那我就持續的分享我的螢幕。
1454000	1462000	好,各位可以看到我現在正在Calisto的頁面上面了嗎?
1462000	1467000	有人可以給我一個聲音嗎?
1468000	1470000	哦,可以可以。
1471000	1473000	好,感謝感謝感謝。
1474000	1479000	好,那右上角這個部分會有一個CalistoHub的標誌,就點進去。
1481000	1486000	點進去之後呢,你會看到說,你可以登入。
1486000	1491000	然後,他會問你說要Google還是Microsoft,那就看各位有什麼就選什麼。
1492000	1498000	那我是有Google,那這是用我自己的Berkeley的帳戶,為大家示範一下。
1500000	1503000	登入的時候,大家會看到這個畫面,就是在準備中。
1504000	1506000	哦,我要登入的不是Berkeley。
1506000	1508000	重新來。
1510000	1512000	用我自己的Gmail來登入。
1516000	1518000	登入完成。
1520000	1522000	登入完成。
1524000	1526000	登入完成。
1528000	1530000	登入完成。
1531000	1533000	登入完成。
1533000	1535000	登入完成。
1537000	1545000	好,那麼,登入之後呢,你會看到有點像是這樣子的一個頁面。
1547000	1553000	這個頁面呢,就是JupyterHub提供使用者的標準介面的其中之一。
1554000	1556000	我們通常叫做Notebook的介面。
1557000	1561000	大家到這裡還OK嗎?需要等一下嗎?
1563000	1565000	我這邊OK。
1566000	1570000	那,話說BlueJeans可以舉手或是什麼之類的嗎?
1571000	1576000	能夠有辦法讓我從這邊看到說,大家需要多一點時間或怎樣的。
1577000	1582000	它是可以舉手,不過我不確定會發生什麼事情。
1582000	1584000	我先把看聊天視窗拉出來好了。
1585000	1589000	這樣可以用聊天的方式讓我知道我們現在走到哪裡。
1591000	1594000	可是我不知道怎麼拉出來,我對BlueJeans好不熟。
1595000	1598000	好,不管怎麼樣,那我們就先繼續好了。
1599000	1601000	好,那我們就先繼續好了。
1602000	1604000	好,不管怎麼樣,我們就先繼續好了。
1605000	1607000	好,不管怎麼樣,我們就先繼續好了。
1608000	1611000	好,不管怎麼樣,我們就先繼續好了。
1612000	1617000	好,當你看到這個頁面的時候,表示你已經成功的登入了JupyterHub。
1618000	1624000	你已經成功登入了他們的CalistaHub,然後你已經開始在使用他們提供的計算資源。
1626000	1633000	這邊會有一個在檔案列表上面,你會看到有一個檔案叫做Getting Started,就點進去。
1634000	1637000	然後你會看到類似像這樣子的頁面。
1640000	1646000	這個就是在Notebook介面之下呈現Jupyter Notebook的樣子。
1647000	1650000	你會看到這其實整個就是一個Notebook的文件。
1651000	1660000	它看起來非常繽紛,但實際上如果你點兩下,在每個區塊點兩下,你會發現他們的原始的資訊。
1661000	1662000	資訊啊,不是這個。
1664000	1666000	原始的資訊其實就是一些文字。
1667000	1671000	這些文字是用markdown的格式撰寫的。
1672000	1680000	所以在編輯模式的時候你可以隨意的編輯,譬如說像是在這個底下打blah blah。
1681000	1689000	然後按run的時候,它就會重新的把這個變成顯示的模式。
1690000	1692000	就看到底下出現blah blah blah。
1699000	1705000	那我剛剛說過這是一個Jupyter Notebook,所以你也可以在直接上面進行某種程度的計算。
1706000	1714000	譬如說我們可以按加號來新增幾個單元的格子,在這個Notebook的底下新增幾個單元的格子。
1714000	1722000	那我們可以隨便點一個單元的格子,在這上面打,我想想看,我們可以打Hello World。
1723000	1730000	你在右上角可以看到現在這個Notebook使用的核心是什麼。
1731000	1743000	那這邊它寫的是Python 3,也就是目前如果你在這邊上面打程式碼,按下執行的時候,Notebook就會用Python去執行這些程式碼。
1745000	1756000	舉個例子,A等於Hello World,然後print A。
1757000	1763000	打好之後呢,如果按一下執行,它就會用Python的方式去執行這段程式碼。
1763000	1781000	如果你今天想要增加更多的註解,你也可以把區塊的種類從code轉化成markdown,這樣子就可以在這邊打註解。
1781000	1796000	像是今天是Aira演講之類的,然後在run它就會變成在你的Notebook裡面敘述性的文字的部分。
1798000	1806000	那iPython Notebook我很喜歡的一個地方是,在敘述性文字的部分,the markdown是支援LaTeX的。
1806000	1816000	所以你可以在這邊打註解公式,譬如說我可以打隨便講一個為什麼,打什麼呢?
1816000	1843000	前前Q等於OK,乘上partial T,partial X,這是一個熱傳導的方程,然後就會出現一個方程式。
1843000	1853000	那如果你傳統在使用LaTeX的話,要這樣子混打其實很難,尤其是當你的文章裡面還有中文的時候。
1853000	1871000	傳統上來講,LaTeX非常難以處理中文的內容,但是在Jupyter Markdown裡面,因為它原生是支援UTF的,所以你可以把這兩件事情完美的混合在一起,非常的方便。
1871000	1879000	好,那目前為止還OK嗎?就暫停嗎?還是我們就繼續?
1880000	1884000	OK,我OK。大家有沒有什麼問題?
1885000	1896000	雖然可能有一件事情要麻煩你,因為我們沒辦法一直看聊天盒,所以如果聊天裡面有人提出問題的話,可以稍微打斷我嗎?
1896000	1898000	好,可以可以,我會。
1898000	1900000	感謝感謝,或是如果你看到有人舉手,也可以隨時打斷我。
1900000	1904000	好,我會幫你注意這些,你可以繼續。
1905000	1919000	好,那麼我們剛剛說過Jupyter Notebook跟核心這兩件事情是分開的,根據使用者的需求我們可以切換不同的核心。
1920000	1924000	所以呢,我們現在就來換個核心試試看,我們現在就不要Python了。
1924000	1935000	如果你把滑鼠移到上面的選單,然後選Kernel,然後呢,Kernel最底下有一個Change Kernel。
1935000	1941000	你會看到呢,在Calista Hub裡面提供了兩個核心,一個是Python,另外一個是R。
1941000	1942000	我們就試試看R。
1942000	1951000	哦,切換過去了,現在這個Jupyter Notebook在執行的是R而不是Python了。
1951000	1961000	如果我們再重新的執行剛剛的Hello World,run,它就,哦,這一段還是有用,因為R裡面也有這一段文字。
1961000	1968000	不過R本身的語法就像是這樣,這一段Python是行不通的。
1971000	1985000	大概是這樣,run,它就會以R的方式去執行這段程式。
1985000	1998000	那如果你在上面畫圖的話,譬如說,我們就快速的弄一個X,這是R的程式,所以如果你不懂的話,歡迎隨時再問我。
1999000	2005000	但現在呢,我要設定五個資料點,然後再把這五個資料點畫出來。
2005000	2013000	然後呢,我可以按一下Shift跟Enter,來執行這一段程式。
2013000	2017000	幾個逗號。
2019000	2024000	那它就會調用R裡面的繪圖函數庫,去把這東西畫出來。
2025000	2033000	那對於Python裡面的繪圖,套件也是差不多的。
2033000	2040000	那我們現在呢,再把這個kernel的核心,再把這個kernel換回來Python。
2040000	2048000	然後呢,我們再到底下來,來試試看,用Python畫。
2048000	2056000	Python的話呢,就要先輸入一些套件,譬如說像是,
2059000	2068000	我在這邊呢,就先調用matplotlib跟numpy出來幫我做事情。
2068000	2072000	然後呢,
2079000	2087000	大概像這樣,就可以畫一張sign的圖。
2087000	2088000	像這樣。
2088000	2091000	那你會看到這兩張圖,長相非常不一樣。
2091000	2095000	那某種程度上證明呢,它們其實是兩個不同的繪圖套件。
2095000	2101000	下面這個是R畫的,下面這個是Python畫的。
2101000	2104000	那麼,當然如果你想要的話,你也可以把這張圖存起來。
2104000	2108000	我們可以再多加一堂指令,plt.savefig。
2108000	2117000	那我們就叫它測試.png好了。
2117000	2122000	畫出來之後呢,重新執行之後,那,
2122000	2125000	測試.png就會出現在檔案列表裡面。
2125000	2130000	如果我們回去檔案列表,File,File,然後Open,
2130000	2133000	你就會回去剛才的那個檔案列表的畫面。
2133000	2136000	那你就會看到有一個新的檔案,叫做測試,它出現了。
2136000	2139000	你在這邊打開,就可以看到這張png檔。
2139000	2143000	那你也可以選取它,選取這個檔案列表,
2143000	2146000	然後選取這個檔案列表。
2146000	2149000	你在這邊打開,就可以看到這張png檔。
2149000	2154000	那你也可以選取它,然後再把它下載下來。
2154000	2157000	下載的按鈕呢,就是在,應該是在這裡,
2157000	2160000	哦,在這裡,在上面這一排的這個部分。
2160000	2164000	你就可以把它下載到你自己的電腦裡面。
2164000	2171000	那,以上的就是簡單的,就是Notebook的介面的操作方式。
2171000	2175000	你可以發現,我們真的已經在利用JupyterHub,
2175000	2177000	就是Calisto提供的運算資源,
2177000	2180000	去幫助你做一些科學分析的概念。
2180000	2185000	那當然它也有一些,它有配有傳統的伺服器的操作模式。
2185000	2193000	如果呢,你滑鼠移到這個,選單列上面的New,這裡有個New,按下去。
2193000	2196000	那裡面呢,你會看到有幾個選項。
2196000	2198000	那你可以開啟一個新的Notebook。
2198000	2200000	你也可以開啟其他種類的檔案。
2200000	2204000	這邊有一個檔案叫做,有一個類型叫做Terminal。
2204000	2209000	按下去之後呢,你就可以開啟一個傳統的終端機,
2209000	2217000	然後去操作你想要操作的事情,譬如說LOS啊,或是PWD啊,等等等等等等,
2217000	2219000	任何你想到的事情。
2219000	2223000	那這邊呢,我想要給各位看的是,列出所安裝的套件。
2225000	2227000	那這個指令需要等一下。
2227000	2232000	因為它是使用Conda這個套件版的軟體去安裝套件的,
2232000	2234000	那是軟體,有的時候會慢。
2238000	2243000	不過,看來還有一段時間。
2245000	2248000	不過,噢,出來了。
2249000	2254000	那你可以看到它真的已經是先預先裝好非常非常多的套件。
2254000	2258000	包括,以Python為例,因為Python比較熟。
2258000	2269000	以Python為例的話,你可以看到,這邊有Dask,平行預算的套件。
2269000	2276000	然後,譬如說這邊有Geopandas,是地理空間資料的套件。
2276000	2284000	然後,譬如說這邊還有HDF5,專門處理HDF檔的套件。
2284000	2290000	以及各種其他種類的套件。
2290000	2294000	當然還有MattePlotLib在這邊。
2295000	2300000	還有其他不同的視覺化套件,譬如說像是,我想它應該要裝Seaborn。
2301000	2305000	Seaborn在,大概在這邊。
2305000	2311000	那,科學分析比較常用的SciPy啦,或是NonPy的檔案也都有裝。
2311000	2316000	所以你可以看到,如果有一個人可以幫你預先裝好這些套件,
2316000	2322000	那你自己在剛起步的時候,你就不需要去花那麼多心力去裝套件,
2322000	2325000	然後還要處理那些互相依賴的問題。
2325000	2329000	有時候這些問題會大大的阻礙一個研究的進展。
2330000	2335000	好,那麼到這邊還OK嗎?
2335000	2339000	還OK的話,我們就要進入下一個階段。
2342000	2344000	我OK。
2344000	2346000	OK,OK。
2347000	2352000	好,那讓我們回到剛才的檔案列表。
2354000	2356000	這次檔案列表裡面呢,
2357000	2361000	我們剛說過這個檔案列表叫做Notebook Entry,
2361000	2366000	它是一個傳統的ChipTab介面。
2366000	2372000	那我想要跟各位介紹的是比較新的另外一個介面,叫做Lab。
2372000	2377000	存取的方法就是把這個Tree,把這個網址列的這個Tree砍掉,
2377000	2380000	換成Lab。
2381000	2386000	然後再輸入。
2386000	2390000	當你這麼做的時候呢,
2390000	2400000	你就會進入到ChipTab提供的另外一個介面,叫做Lab的介面。
2400000	2405000	如果你需要一點資訊的話,你可以回去看我們的投影片。
2405000	2409000	投影片後面幾章應該有步驟。
2409000	2418000	好,那在Lab的介面上面看起來跟剛才Notebook的介面的確有點不同。
2418000	2423000	最大的不同呢,是Lab的介面是由很多不同的小面板構成的。
2423000	2425000	譬如說像是左邊這個面板,
2425000	2428000	左邊現在我們看到是檔案瀏覽的面板。
2428000	2431000	有測試.png可以點兩下,
2431000	2436000	然後右邊這個部分就會顯示出測試.png的分頁這樣。
2437000	2440000	那當然,Getting Started,Notebook已經打開了。
2440000	2443000	你可以看裡面的資訊,都還在。
2443000	2445000	看我們的資訊都還在。
2445000	2451000	所以他們其實存取的是同樣一個伺服器,只不過是用不同的介面而已。
2451000	2456000	那在Lab的介面裡面,我們可以幹嘛呢?
2456000	2460000	你可以看到左上角有一個藍色的加號。
2460000	2464000	這個點下去會開啟啟動的分頁。
2464000	2469000	那這個啟動的分頁中,你可以選擇你想要啟動什麼樣子的內容。
2469000	2471000	你可以啟動一個Notebook,
2471000	2477000	以Python為內核的Notebook,或是以R為核心的Notebook。
2477000	2479000	或是你可以直接在這邊啟動中段機,
2479000	2483000	然後做跟剛才一樣的事情,LS之類的。
2488000	2490000	那我剛剛說過,Lab最大的賣點,
2490000	2495000	就是它是由不同的面板構成的視窗介面。
2495000	2499000	那這麼做的好處呢,就是有時候你可以讓圖表互相比較。
2499000	2503000	譬如說如果你剛剛回去剛才我們看到的iPython Notebook,
2503000	2506000	然後你移到最下面這張圖。
2506000	2510000	按右鍵的時候,按右鍵叫出選單的話,
2510000	2512000	你可以看到這裡面有很多選單。
2512000	2515000	其中有一個叫做Create New View for Output。
2515000	2517000	在這邊點一下。
2517000	2521000	那這張圖就會移動到一個新的面板,
2521000	2523000	然後就可以把它移來移去,
2523000	2527000	就像是很多現在很厲害的軟體一樣。
2527000	2530000	然後你就可以把它跟不同的圖片比較。
2530000	2533000	譬如說我可以重畫一個,把它改成Cosine。
2535000	2536000	重畫。
2536000	2537000	這個也比較。
2537000	2539000	因為這個跟這個是連在一起的。
2539000	2541000	但我可以把它換一個。
2541000	2545000	複製,然後再做一樣的事情。
2545000	2547000	但是這裡我要把它做Sine。
2547000	2549000	再畫一次。
2549000	2552000	然後就可以把這張圖片跟這張圖片比較。
2552000	2554000	之類之類。
2556000	2561000	那Jibbit Lab也支援了很多其他的,
2561000	2564000	不只是Notebook,還有很多其他檔案的顯示模式。
2564000	2567000	譬如說如果你按PNG檔,它就可以直接跳出PNG檔。
2567000	2570000	那如果你按CSV的話,
2570000	2575000	它也可以直接以圖表顯示的方式呈現CSV,等等等等。
2577000	2580000	而且呢,它還有一些更華麗的設定。
2580000	2582000	譬如說像是你看上面的,
2582000	2587000	如果你移動到上面的這些選單列表的話,
2587000	2589000	有一個選單叫做Settings。
2589000	2590000	進去。
2590000	2592000	第一個是Zing。
2592000	2598000	那這裡你可以選擇Jibbit Lab要是亮色系的配置還是暗色系的配置。
2598000	2600000	預設都是亮色系的配置。
2600000	2602000	那我本人比較喜歡暗色系,
2602000	2605000	所以我先把它切換到暗色系看看會發生什麼事情。
2605000	2607000	現在是暗色系了。
2611000	2615000	除此之外呢,你還可以進行更多的客製化。
2615000	2617000	譬如說呢,我們可以讓,
2617000	2620000	你可以看到如果打開Settings,
2620000	2622000	這邊還有一個Language。
2622000	2625000	不過目前呢,語言套件只有英文。
2625000	2628000	但是我們可以自己安裝中文的套件。
2628000	2631000	譬如說我們只要過去Terminal,
2631000	2634000	然後使用Pip,
2634000	2639000	來安裝這個套件叫什麼名字呢?
2640000	2653000	叫做Jibbit Lab Language Pack中文台灣之類的。
2653000	2656000	安裝。
2656000	2658000	然後它就開始安裝。
2658000	2665000	沒錯,你現在在一個叫做Calisto Hub的伺服器上面安裝你自己想要的套件。
2665000	2669000	安裝好之後呢,要重新整理這個Lab,
2669000	2674000	就移動到網址點再重新整理就可以了。
2674000	2677000	那整個Lab就會重新整理。
2677000	2682000	那麼,如果你這個時候再去Settings,
2682000	2684000	然後Language,
2684000	2688000	這邊應該就可以看到Chinese,中文台灣可以選擇。
2688000	2690000	進去呢?
2690000	2698000	然後再Reload。
2698000	2702000	就會出現中文繁體的Jibbit Lab。
2702000	2703000	可能沒有那麼完美,
2703000	2706000	你可以看到有一些並沒有翻譯的過來。
2706000	2710000	因為目前Jibbit Lab的翻譯專案呢,
2710000	2712000	是還在熱烈的進行中。
2712000	2714000	那也都是公開的專案,
2714000	2717000	所以如果各位有興趣貢獻的話,
2717000	2720000	再問我,我可以再把那個連結寄給你。
2720000	2727000	但是你也可以自己Google找到翻譯專案的連結。
2727000	2739000	好,那目前為止不知道各位有沒有什麼問題。
2739000	2743000	OK。
2743000	2745000	好像沒看到什麼問題。
2745000	2746000	太好了。
2746000	2750000	看來大家都非常的進入狀況。
2750000	2751000	我也不知道。
2751000	2753000	大家有跟著做嗎?
2753000	2756000	我這邊是有跟著做。
2756000	2759000	那也沒關係啦。
2759000	2762000	因為如果你們之後想要再重複的話,
2762000	2764000	你們可以參考我的投影片。
2764000	2767000	投影片裡面應該有一些細節,
2767000	2771000	說明一下要怎麼做這些事情。
2771000	2774000	那最後的一個部分呢,
2774000	2777000	我想要跟各位分享一下,
2777000	2781000	就是Hub它本身具備的一些功能。
2781000	2787000	所以如果我們前往這個選單,File,
2787000	2789000	然後倒數第二個,
2789000	2791000	你應該會看到Hub控制面板,
2791000	2793000	或是Hub Control Panel。
2793000	2794000	如果你沒有裝中文的話,
2794000	2796000	就是Hub Control Panel。
2796000	2799000	點進去,就會跳出一個Control Panel。
2799000	2801000	哇,好亮。
2801000	2803000	如果各位不介意的話,
2803000	2804000	我先關掉這個燈,
2804000	2806000	因為我們這裡要變晚上了。
2806000	2822000	馬上回來。
2822000	2824000	在這個Control Panel上面,
2824000	2825000	你可以看到,
2825000	2827000	你應該只能看到兩個選項。
2827000	2829000	一個選項是,
2829000	2834000	停止剛才的伺服器。
2834000	2843000	那我現在來看看。
2843000	2847000	我們就試著點點看這個點。
2847000	2849000	然後現在伺服器已經被停止了。
2849000	2850000	如果我們回去剛才的頁面,
2850000	2851000	你會看到,
2851000	2854000	Server Available Unreachable。
2854000	2857000	因為這個伺服器已經被停止了。
2857000	2860000	不過我們可以重新啟動。
2860000	2863000	所以我們可以直接在這邊按重新啟動,
2863000	2866000	或是回去剛才的分頁按Start My Server,
2866000	2868000	都可以,看你想要怎麼做。
2868000	2870000	就在這邊重新啟動好了。
2870000	2877000	啟動。
2877000	2879000	好,啟動完畢。
2879000	2881000	啟動完畢的預設介面,
2881000	2883000	會是Notebook介面。
2883000	2884000	但是你可以看到,
2884000	2887000	剛剛你產生出來的檔案都還在,
2887000	2891000	測試點PMG還在。
2891000	2896000	不過如果你切換到Lab的介面,
2896000	2900000	你應該會發現事情變得有點不太一樣。
2900000	2902000	來看看。
2902000	2907000	好,OK。
2907000	2909000	如果你點到選單,
2909000	2912000	你會發現剛剛安裝的中文不見了。
2912000	2915000	這是為什麼呢?
2915000	2916000	為什麼檔案還在,
2916000	2920000	但是中文套件不見了?
2920000	2924000	這邊我想利用觀察來解釋一下
2924000	2927000	JupyterHub本身的權限的設定。
2927000	2931000	如果你今天是身為JupyterHub的管理者,
2931000	2934000	你可以設定JupyterHub裡面的檔案或是結構,
2934000	2937000	哪些部分是不能被使用者更改的,
2937000	2940000	然後哪些部分是使用者可以更改,
2940000	2942000	但是當你結束這伺服器以後,
2942000	2944000	就會回溯。
2944000	2946000	剛才我們安裝的那個套件,
2946000	2947000	就是被回溯掉了。
2947000	2949000	如果你要再重新使用中文,
2949000	2952000	你必須要再重新安裝一次。
2952000	2956000	但是管理者也可以決定哪些部分
2956000	2959000	是使用者可以永遠地保存他們的檔案。
2959000	2960000	也就是說,
2960000	2964000	如果你只要把檔案產生在那些地方,
2964000	2966000	你就可以保存這些檔案,
2966000	2968000	然後每次重新啟動Hub的時候,
2968000	2969000	這些檔案就不會不見。
2969000	2971000	像是這個測試.png,
2971000	2973000	目前就是出現在這個位置。
2973000	2976000	所以你在這個位置進行的更動,
2976000	2979000	會一直保存在這個伺服器上面。
2979000	2980000	就我所知,
2980000	2982000	Calisto有一個時限,
2982000	2984000	就是如果你超過多久,
2984000	2986000	好像是幾十天還是怎樣子,
2986000	2988000	都沒有登入還是怎樣的話,
2988000	2990000	你的檔案就會被砍掉。
2990000	2994000	每一個Hub都有他們自己的規定。
2994000	2995000	詳細的話,
2995000	2998000	你可以去參考他們自己的設定是怎麼樣子。
3000000	3002000	好,
3002000	3006000	如果我們再回到Control Panel,
3006000	3009000	你會看到這邊有一個Token,
3009000	3013000	在左上角的這個選單這邊有一個Token。
3013000	3014000	點進去的話,
3014000	3018000	你應該可以看到一些看起來很複雜的東西。
3019000	3022000	那我這邊因為,
3022000	3025000	這邊大部分的東西是管理者需要用的,
3025000	3031000	但是我想要講的是底下的這個OAuth的Application。
3032000	3037000	TubeHub有跟OAuth相容的,
3037000	3039000	意味著說,
3039000	3042000	根據管理者他們自己的想法,
3042000	3047000	他們可以使用第三方的帳號資訊,
3047000	3050000	來作為進入TubeHub的驗證。
3051000	3052000	舉例來說,
3052000	3055000	List of Hub就是利用你的Google帳戶,
3055000	3057000	或是Microsoft的帳戶來驗證。
3058000	3061000	但是像我們的研究,
3061000	3064000	像我們自己團隊的TubeHub,
3064000	3068000	就是使用GitHub的帳號來進行第三方驗證。
3068000	3070000	那這麼做的好處就是,
3070000	3073000	管理者可以少掉非常非常多的時間,
3073000	3076000	在管理使用者以及他們的帳名。
3076000	3079000	因為你是把這個責任分散出去,
3079000	3082000	分散到第三方的團體。
3082000	3084000	那這麼做我個人覺得是不錯,
3084000	3088000	因為可以想像我們現在幾乎每一個研究人員,
3088000	3090000	都會有Google,
3090000	3092000	然後可能都會有GitHub。
3092000	3094000	如果你能夠使用這些帳戶,
3094000	3095000	直接登入GitHub,
3095000	3097000	那當然就是非常的方便。
3101000	3104000	好,大概就是這樣。
3105000	3110000	那我在投影片上面還會放上幾個螢幕截圖。
3110000	3112000	各位看一下。
3116000	3120000	如果今天這個GitHub是在一個大型的,
3120000	3123000	譬如說那種Google雲端,
3123000	3125000	或是Amazon雲端上面運行的話,
3125000	3128000	在啟動伺服器的時候,
3128000	3130000	有可能它會提供一個選項。
3130000	3132000	就是可能它會說,
3132000	3134000	這個伺服器需要幾個CPU啊,
3134000	3135000	你可以自己選擇,
3135000	3140000	你要開比較大的伺服器,
3140000	3142000	還是開比較小的伺服器。
3142000	3146000	那Kalisto因為它是一個免費的Hub,
3146000	3151000	所以它在這方面提供所有的使用者一個CPU,
3151000	3156000	也就是每一次只使用一個CPU去做事情。
3156000	3161000	那這個螢幕截圖就是從我自己研究室的Hub截圖下來,
3161000	3163000	你可以看到我們最多可以開到64個CPU。
3163000	3165000	事實上下面還有,
3165000	3168000	有64個CPU加上GPU的選項,
3168000	3171000	就是更豪華一點。
3171000	3173000	那另外一張截圖在這裡呢,
3173000	3177000	是只有Hub的管理員可以看得到的。
3177000	3185000	你可以看到說上面會有一些,
3185000	3186000	如果你今天是管理員的話,
3186000	3188000	你可以看到現在多少人在使用這個Hub,
3188000	3190000	哪些人是正在用的,
3190000	3192000	哪些人是很久沒用的。
3192000	3198000	你可以直接去停,
3198000	3200000	如果你發現有異常的使用,
3200000	3202000	你就可以直接把他們的Hub關掉,
3202000	3204000	這樣他們就沒辦法繼續用了。
3204000	3206000	之類之類的。
3206000	3210000	只是稍微給你們看一下管理員的介面。
3210000	3216000	好,因為一個小時好像快不到。
3216000	3218000	我自己有個問題。
3218000	3220000	一個小時快要到了,
3220000	3222000	所以我想先停一下,
3222000	3224000	看大家有沒有問題。
3224000	3226000	我自己有個問題,
3226000	3230000	就是這個Kalisto它原本,
3230000	3232000	如果身為一個User,
3232000	3234000	你應該要怎麼用它?
3234000	3236000	啊,問得好。
3236000	3240000	後面這裡應該有。
3240000	3242000	如果我們回去剛才的Hub,
3242000	3244000	你會看到在Getting Started,
3244000	3247000	這個Notebook裡面有幾個連結,
3247000	3249000	那麼這些連結都可以點。
3249000	3253000	譬如說我們可以點Preparation,
3253000	3256000	裡面的Kalisto Jupyter and Python Basics Notebook,
3256000	3258000	點進去,
3258000	3262000	然後這個Hub就會開始擷取,
3262000	3264000	他們存在GitHub上面的資源,
3264000	3268000	然後複製一份到Hub上面。
3269000	3272000	然後他們弄好之後呢,
3272000	3277000	你的Hub的空間就會多出一些東西。
3277000	3281000	然後這些東西就是你可以用來學習的資源。
3281000	3282000	好,出來了。
3282000	3285000	這個是剛剛擷取下來的新的Notebook,
3285000	3288000	然後這個Notebook就是在教你Python,
3288000	3289000	簡單來講。
3289000	3292000	然後有一個YouTube的Video先在這邊,
3292000	3296000	你可以看看,
3296000	3299000	像這樣就可以看。
3299000	3303000	然後底下有一些其他的東西,
3303000	3305000	你可以搭配的文字敘述,
3305000	3307000	然後執行這些程式碼,
3307000	3311000	然後來看一下會發生什麼事情。
3311000	3312000	還有一個影片,
3312000	3316000	不像很好看,不過改天再看。
3316000	3319000	所以它像是一個教學的…
3319000	3320000	它是一個教學Hub。
3320000	3323000	各種東西,有各種教學的網站這樣。
3323000	3325000	是的,它是一個教學的Hub。
3325000	3328000	那如果我們回去剛才的Lab介面,
3328000	3331000	你會看到按重新整理,
3331000	3333000	這裡有一個圓圈按重新整理的話,
3333000	3336000	你會看到出現了一個新的檔案,
3336000	3338000	出現一個新的資料夾。
3338000	3339000	點進去的話呢,
3339000	3341000	你可以看到裡面好多東西,
3341000	3345000	這就是你剛才下載下來的東西。
3345000	3347000	那裡面除了剛才那個Notebook,
3347000	3349000	還有很多其他的Notebook,
3349000	3352000	你可以參考。
3352000	3356000	總之就是一個規模還蠻龐大的資源,
3356000	3358000	就是提供給國中小老師,
3358000	3361000	讓他們進行資料科學的用法。
3361000	3365000	那你可以去看看他們到底做了哪些模組出來。
3365000	3368000	那除了以這種方法去瀏覽Calista提供的資源,
3368000	3369000	這裡應該還有一個,
3369000	3371000	Calista Learning Module。
3371000	3373000	點進去的話呢,
3373000	3374000	會連到他們的另外一個頁面,
3374000	3376000	就是這個。
3376000	3378000	接下來有很多Learning Modules,
3378000	3380000	所以如果你今天是老師,
3380000	3381000	你就可以說,
3381000	3383000	我今天想讓我的學生學哪一個Module,
3383000	3384000	你就點進去,click。
3384000	3386000	然後這個Module的內容,
3386000	3389000	就會直接被擷取到Jubed Hub,
3389000	3390000	然後再把這個Jubed Hub,
3390000	3392000	分享給你的學生們就可以了。
3392000	3394000	或是叫學生自己點,
3394000	3397000	這樣學生們就可以用他們的帳號,
3397000	3404000	然後直接執行放在下面的東西。
3404000	3406000	那這邊還有很多其他的Resources,
3406000	3408000	像我自己很喜歡的一個是,
3408000	3414000	他們有那個跟北美原住民合作的內容。
3414000	3416000	譬如說,點進去的話,
3416000	3421000	這邊有一個捕魚陷阱。
3421000	3424000	就是用資料分析,
3424000	3428000	來看放在哪邊的捕魚陷阱,
3428000	3430000	抓魚的效率是最好的。
3431000	3433000	他是一個Learning Module,
3433000	3434000	所以點進去之後,
3434000	3436000	他就會被擷取到你的Jubed Hub,
3436000	3441000	然後就開始做這些有趣的資料分析。
3441000	3446000	讀完了,出現了。
3446000	3453000	這邊有東西,我們來試試看,跑跑看。
3453000	3455000	就會出現一張地圖。
3455000	3456000	這是一個互動性的地圖,
3456000	3460000	就可以在這邊拖曳,然後放大縮小。
3460000	3465000	這是在Vancouver附近的捕魚場,之類之類。
3465000	3469000	所以Calisto本身提供非常多的教學資源,
3469000	3472000	來幫助你熟悉資料科學。
3472000	3473000	那當然對各位而言,
3473000	3478000	可能還有Jubed Hub是怎麼進行資料科學的。
3478000	3480000	看起來很酷。
3480000	3489000	那這些資料都是要經過Calisto這個組織嗎?
3489000	3490000	他們要認證嗎?
3490000	3494000	不然這些東西是怎麼決定要不要被放上去的?
3494000	3499000	Calisto是兩個組織合作的企劃。
3499000	3505000	兩個非營利組織NPO合作的企劃。
3506000	3511000	這兩個組織都有出團隊去維護Calisto。
3511000	3514000	所有的模組,就是這些Notebook,
3514000	3516000	都是他們寫的。
3516000	3519000	他們使用的資料,我想應該是從其他地方來的。
3519000	3521000	包括譬如說像是這個捕魚的資料,
3521000	3524000	我想是他們跟當地的部落合作,
3524000	3529000	然後輸入進來的。
3529000	3531000	除此之外,也有很多科學上的公開資料。
3531000	3538000	他們應該就是用那些公開資料去展示資料科學怎麼做。
3538000	3544000	了解,謝謝。
3544000	3547000	我其實還有最後一部分,
3547000	3549000	不過如果各位覺得很滿意,
3549000	3557000	我們可以到這邊就打住。
3557000	3559000	沒關係,我們可以繼續進行。
3559000	3561000	是嗎?
3561000	3565000	好,那麼如果各位覺得OK,
3565000	3568000	我就把剩下的影片也講一講好了。
3568000	3569000	那最後一個部分呢,
3569000	3577000	就是提供大家更多的一些資源。
3577000	3584000	那除了Calisto Hub之外呢,
3584000	3586000	還有很多其他的Hub都是存在的。
3586000	3590000	譬如說一個很常用的Hub的服務叫做Binder。
3590000	3592000	那這個Binder這個服務呢,
3592000	3598000	專門用在讓一個GitHub的儲存庫,
3598000	3603000	變成一個可以馬上被執行的Hub。
3603000	3605000	譬如說像是這一篇,
3605000	3609000	是我在去年發的一篇文章。
3609000	3621000	那它的補充資料就是一個GitHub Pages。
3621000	3627000	那你在這個GitHub Pages上面可以找到一個連結。
3627000	3631000	看看能不能切換到那個頁面。
3631000	3637000	這個GitHub頁面就是我剛發的那篇論文的補充資料。
3637000	3640000	那底下會有Binder的連結。
3640000	3644000	點進去就可以啟動一個東西叫做Binder。
3644000	3649000	那它會帶你到一個跟剛才我們看到的GitHub很像的一個地方。
3649000	3657000	那就可以再現我在這篇論文裡面分析的資料,
3657000	3663000	然後重做我在這篇論文裡面呈現的每張圖。
3663000	3669000	都有非常多的細節解釋這樣。
3669000	3675000	那這是Binder,就是另外一個用GitHub提供的服務。
3675000	3676000	長這樣。
3676000	3680000	那另外一個,這個是跟地球科學比較有關的,
3680000	3682000	叫做Pangeo Cloud。
3682000	3684000	是一個也算是半公開吧,
3684000	3686000	因為你只要是在做地球科學,
3686000	3689000	你就可以用他們的這個服務。
3689000	3692000	那就是註冊,然後他們審核通過之後,
3692000	3699000	就可以開始使用他們部署在Google Cloud跟Amazon上面的GitHub。
3699000	3705000	那就可以直接存取這兩家供應商的雲端計算的資源,很酷。
3708000	3711000	那當然還有Callisto,那這個我們剛剛講過,我們就不講了。
3711000	3716000	那如果你一直想,如果你覺得Callisto Learning Module有點雜的話,
3716000	3720000	或是你想要一個快速的我們推薦的學習資源,
3720000	3722000	這邊有兩個,你可以參考一下。
3722000	3730000	那你可以直接在剛才的Hub裡面進去終端機,
3730000	3734000	然後輸入這兩行之中的任何一行,你想要輸入哪一行都可以。
3734000	3740000	因為這兩行其實就是擷取某個GitHub上面的儲存庫,
3740000	3743000	然後把他們上面的內容全部都放到那個Hub上面。
3743000	3751000	譬如說呢,我們先用League來做參考,就複製,然後回到剛才的Hub,
3751000	3759000	然後開啟終端機,貼上,Ctrl-V貼上,
3759000	3766000	然後抓過來以後,你就可以看到在主資料夾,
3766000	3769000	就可以看到有出現一個Demo Jupyter Git,
3769000	3773000	然後點開裡面就有非常多的,看一下,應該是在,
3773000	3778000	那這裡有一個IP1V,這個就是可以執行的iPython Notebook,
3778000	3783000	然後其他的Notebook應該放在資料夾裡面,像是Intro Jupyter,
3783000	3789000	那就可以在裡面看到各種不同針對Jupyter工具的簡單介紹。
3789000	3792000	總之有非常非常多的學習資源在這邊,
3793000	3799000	那歡迎各位在隨時自己嘗試遊玩。
3802000	3806000	那最後兩三張投影片呢,我想要簡單解釋一下就是,
3806000	3808000	如果你真的對JupyterHub心動了,
3808000	3812000	然後你想要安裝,想要為自己的研究團隊,
3812000	3815000	為自己的小組,研究小組,安裝JupyterHub,
3815000	3818000	然後大家都可以用的話,你要怎麼做?
3819000	3823000	先說明一下JupyterHub提供了兩種標準的發行板,
3824000	3827000	一種叫做The Littlest JupyterHub,
3827000	3831000	這種發行板是專門供小團隊運作,
3831000	3835000	那種零到一百人之類的,之間的小團隊。
3836000	3840000	那它就是精簡化,簡單來講,
3840000	3843000	然後不用花太多時間心力,
3843000	3846000	就可以自己裝在你可能研究室的伺服器上面,
3846000	3850000	然後給你的同事或學生使用。
3851000	3855000	那另外一種JupyterHub發行板叫做JupyterHub on Kubernetes,
3855000	3858000	那這種發行板就是專門針對,
3858000	3862000	譬如說在那種大型雲端上面的安裝,
3862000	3869000	譬如說在Amazon啦,或是Microsoft Azure上面的JupyterHub安裝,
3869000	3872000	然後一次要給幾百幾千個人使用的,
3872000	3875000	或是裝在那種超級電腦上面的JupyterHub,
3875000	3877000	大家都要用的。
3878000	3881000	那麼你如果要安裝的話,
3881000	3886000	那就是選擇一種你覺得適合你的方式去安裝。
3887000	3889000	那即使是這樣子,你或許還是會覺得,
3889000	3892000	這其中的技術性能看似的太高了,
3892000	3895000	畢竟大部分的人都不是資訊專業,
3895000	3898000	裡面有很多細節,你可能不知道怎麼調整。
3898000	3901000	那我們當然也是看到這個困難,
3901000	3904000	所以大概在2019年的時候,
3904000	3907000	我們在Berkeley的Jupyter團隊,
3907000	3909000	其中的一部分的人,
3909000	3913000	就成立了一個非營利組織叫做2I2C,
3913000	3917000	或是The International Interactive Computing Collaboration,
3917000	3919000	那這個組織的宗旨呢,
3919000	3921000	這個非營利組織的宗旨,
3921000	3927000	就是提供各種不同的開放科學的基礎設施的服務,
3927000	3932000	那麼其中之一,目前發展最旺盛的服務呢,
3932000	3938000	就是提供研究團隊或是組織安裝他們的JupyterHub,
3938000	3940000	安裝並管理他們的JupyterHub。
3941000	3947000	他們目前大部分的資金來源是John Zuckerberg Initiative,
3947000	3949000	就是臉書的那個。
3950000	3959000	那不過他們也有接收到很多來自於其他的開放科學組織的資金。
3963000	3967000	我們剛才看到的Callisto跟PangeoHub,
3967000	3971000	這兩個Hub就是由2I2C來幫忙設置的。
3973000	3977000	但是Binder跟我們自己研究室的Hub,這不是。
3977000	3981000	我們自己研究室的Hub更華麗一點,
3981000	3983000	因為我們要測試很多東西。
3983000	3985000	我們的研究室的Hub大概長這樣,
3985000	3987000	可以稍微給你們看一下。
3999000	4001000	好像沒辦法直接開始。
4001000	4003000	看來需要等一下。
4005000	4007000	等一下有機會再來看好了。
4009000	4013000	那我們藉由2I2C呢,
4013000	4019000	想要達到的願景就是在未來的某一天,
4019000	4021000	作為一個研究人員,
4021000	4024000	你的所有的研究活動,所有的學術活動,
4024000	4026000	可以發生在雲端。
4026000	4029000	你自己的研究團隊是在雲端上面合作,
4029000	4034000	那你要存取HPC運算的資源,
4034000	4036000	就是用JupyterHub去登錄。
4036000	4040000	那學校機構本身可能也會有一個JupyterHub,
4040000	4044000	那當你今天要上課或是給演講的時候,
4044000	4046000	你可以直接使用他們Hub的資源,
4046000	4052000	來給別人,你想讓他們學習的資源。
4053000	4057000	來給別人,你想讓他們學習的東西。
4058000	4062000	那甚至呢,你今天如果去參加一個國際會議,
4062000	4066000	那這個國際會議本身可能也會有一個Hub,
4066000	4071000	然後讓會議的與會者可以同時登錄這個Hub,
4071000	4073000	在上面直接進行研究的交流,
4073000	4075000	以及學習新技能。
4075000	4083000	大概就是這樣,我今天大概就是這樣。
4083000	4086000	那最後最後我想說,
4086000	4090000	所有的開放科學的進展都絕對不是靠一己之力,
4090000	4094000	這之中有非常非常多的社群的參與。
4094000	4098000	那舉例來說,我今天能夠跟你們分享這個事情,
4098000	4103000	是必須要歸功於我們整個在Berkeley的研究團隊,
4103000	4105000	也就是Jupiter Meteors,
4105000	4108000	所以我把他們的人全部都放在這邊,
4108000	4110000	然後也稍微放了一下,
4110000	4116000	讓你們了解一下Jupiter Meteors這個計畫目前在做什麼。
4116000	4118000	非常感謝他們。
4118000	4121000	那最後呢,如果大家有什麼問題,
4121000	4123000	這裡是我的聯絡方式,
4123000	4126000	你可以現在就問,或是這裡是我的聯絡方式,
4126000	4129000	隨時都可以找我。
4129000	4133000	那麼,對,這就是我最後一張圖片,感謝大家。
4133000	4135000	謝謝懷傑。
4135000	4138000	那我們可以先,如果大家有興趣的話,
4138000	4143000	可以把麥克風打開,然後給懷傑一個鼓掌。
4147000	4158000	然後,我先把那個PoAP的code寫上來,
4158000	4160000	讓我找一下。
4160000	4164000	大家如果有什麼問題的話,也可以現在發問。
4164000	4191000	那我先給大家鼓掌,我看到有人鼓掌。
4192000	4198000	好,我這邊把那個PoAP的那個code寫下來。
4201000	4203000	謝謝各位的參與。
4203000	4205000	好,謝謝。
4205000	4208000	那,那個,我這邊有個問題。
4208000	4211000	就是,你的那個投影片啊,
4211000	4217000	你之後想要分享在,譬如說Tyra的網站上嗎?
4217000	4223000	不然,就是,你那個開分享應該只是暫時的吧?
4223000	4227000	嗯,我想想好了。
4227000	4231000	我可以分享給目前我們有參加的與會者,絕對沒問題。
4231000	4235000	而且,短時間之內,這個投影片應該會是公開的。
4235000	4239000	不過,要不要分享到網站上,我之後再跟你聯繫。
4239000	4241000	好好,沒有問題。
4241000	4242000	謝謝。
4242000	4256000	然後,另外,我自己有個問題。
4256000	4262000	就是像,現在很多那個Quantum Computing的那些公司啊,
4262000	4265000	他們做的事情是不是也是類似的?
4265000	4270000	就是,他們把他們的計算的那個資源,
4270000	4273000	在雲端上面分享給大家使用。
4273000	4277000	然後,你也是用Python寫code,
4277000	4281000	然後,就是把它upload到他們的伺服器上面,
4281000	4282000	他們就會幫你跑。
4282000	4284000	就是,他們的哈位也不一樣,
4284000	4286000	但是他們就會幫你跑這個code。
4286000	4289000	嗯,其實這還是算是比較傳統的模式。
4289000	4292000	比較傳統使用超級電腦的模式,
4292000	4295000	就是在超級電腦上面會有一個,
4295000	4297000	有點像是工作排程器的東西。
4297000	4302000	那,你必須要把你自己寫的程式碼腳本啊,
4302000	4304000	上傳到這個工作流程器裡面。
4304000	4308000	然後,由這個工作流程器去部署。
4308000	4311000	就是他會決定說,他要撥多少計算資源,
4311000	4314000	在什麼時候,然後要撥多少計算資源,
4314000	4316000	來執行你的程式碼。
4316000	4319000	然後,最後呢,再把那個執行的結果,
4319000	4322000	以某種方式打包,然後送給你。
4322000	4323000	對。
4323000	4325000	對,這其實是比較傳統的模式。
4325000	4327000	那我們現在推廣的模式,
4327000	4332000	就是省去這個工作排程器的這個部分。
4332000	4335000	Jupyter本身就可以當作工作排程器。
4335000	4339000	你只要使用正確的,譬如說Kubernetes的這種結構。
4339000	4342000	呃,實際的技術細節有點複雜,
4342000	4344000	我這邊簡單的講就好。
4344000	4349000	呃,你只要使用Kubernetes這種結構,
4349000	4354000	你就可以做到用JupyterHub來當作Scheduler,
4354000	4356000	來當作工作排程器。
4356000	4359000	你可以在你的腳本一剛開始就決定,
4359000	4363000	你要用多少資源。
4363000	4367000	你可以用幾個節點啊,幾個Cluster。
4367000	4370000	然後呢,你再開始跑。
4370000	4374000	然後JupyterHub有跟Desk,
4374000	4377000	Desk是一個我剛講過的平行運算的套件,
4377000	4380000	Python裡面平行運算的套件。
4380000	4386000	那有Desk的外掛元件。
4386000	4388000	你只要使用了Desk,
4388000	4393000	就可以在JupyterHub裡面開啟幾個,
4393000	4395000	有點像是控制面板,
4395000	4400000	然後來監測你在執行這些程式碼的時候,
4400000	4404000	即時的監測你在執行這些程式碼的時候,
4404000	4406000	使用多少CPU。
4419000	4421000	喂喂喂,是我卡了嗎?
4426000	4429000	好像,大家聽得到懷杰講話嗎?
4433000	4436000	好像是,殭屍好像消失了。
4441000	4443000	沒關係,我們等他一下好了。
4455000	4479000	大家如果還有什麼,有問題可以發問,
4479000	4482000	可以把它寫下來發問一下喔。
4485000	4487000	好,謝謝大家。
4515000	4538000	剛才聽講者說Desk好像是Python的一個套件吧,
4538000	4544000	所以應該是只要他有在他的伺服器上面裝Desk,
4544000	4546000	他應該就可以使用Desk的功能。
4546000	4548000	只是我不知道Desk的功能是什麼。
4558000	4559000	我猜應該是。
4568000	4570000	哈囉,懷杰,聽得到嗎?
4571000	4573000	哈囉,剛剛好像出現了一點問題。
4574000	4578000	抱歉抱歉,我剛剛是不是講到一半的時候就被卡掉了?
4578000	4583000	對,你剛剛講到…講到哪裡啊?
4585000	4587000	我剛剛是不是講到那個…
4591000	4596000	他可以用…他有一個自己的Scheduler嗎?
4597000	4602000	他有點像是利用…應該這麼說,
4602000	4608000	就是JupyterHub是透過另外一個開源的套件叫做Desk,
4608000	4616000	來管理平行運算的部分,來管理存取CPU資源的部分,
4616000	4618000	還有平行運算的部分。
4618000	4624000	Desk有提供一個有點像是外掛元件的東西,
4624000	4632000	他可以讓你送到Cluster裡面的工作排程,
4633000	4637000	他可以監測你送到Cluster裡面的工作排程,
4637000	4641000	然後用可視化的圖…就用視覺化的圖表,
4642000	4646000	來讓你知道現在這個排程進行到哪裡了,
4646000	4649000	然後可能還要多久,然後跑的結果怎麼樣。
4649000	4653000	了解,剛才有一個聽眾問那個…
4654000	4656000	我不會唸這個名字,Yi…
4656000	4657000	Desk
4657000	4661000	對,Desk,然後他是想要問這個是內建功能嗎?
4661000	4662000	還是有另外的連結?
4662000	4665000	然後是用那個…那個叫什麼?
4665000	4668000	Pip Install來做這件事情嗎?
4672000	4674000	Desk的話…
4675000	4679000	Desk應該是有在Pip上面,
4679000	4684000	不過你可以試試看,我想應該是有。
4684000	4686000	然後Desk網站是這個。
4698000	4702000	在Callisto Hub上面,我印象中Callisto Hub是沒有裝Desk,
4702000	4708000	因為他們本來就不希望使用者用平行運算來真的計算,
4708000	4710000	來消耗大量的計算資源。
4710000	4714000	所以Callisto Hub是沒有裝Desk的,他們不支援平行運算。
4714000	4717000	但如果你今天想要裝個人的電腦,
4718000	4720000	裝在個人的團隊上面,那我想…
4720000	4723000	像我們的研究室團隊就有Desk,
4723000	4726000	我們有Desk跟另外一個叫做Desk Gateway的東西。
4728000	4731000	他們兩個的用法就是有點…會有點不太一樣。
4731000	4732000	Desk…
4737000	4742000	Desk Gateway是專門用來…有點像收集,
4742000	4746000	就是如果你今天的JubyHub是部署在雲端,
4746000	4748000	譬如說Amazon雲端或是Google雲端的話,
4748000	4754000	Desk Gateway是專門用來收集那些在雲端上面可用的節點,
4755000	4758000	然後把它們聚在一起,讓你使用。
4758000	4763000	Desk則是把你自己的工作流程給傳到這些節點,
4763000	4766000	讓它們開始跑,有點像是這樣子。
4771000	4777000	那…對,但是Jupyter就是透過Desk的支援,
4777000	4782000	來實現我們想要的平行運算的方法。
4783000	4787000	那我想要請問…再延伸一下剛才的問題,
4787000	4792000	就是像這些Quantum Computation的Company啊,
4792000	4795000	那你會建議他們使用JupyterHub嗎?
4795000	4797000	就是他們既然都已經要開源了,
4797000	4800000	那他們何不做個JupyterHub呢?
4801000	4802000	當然會啊,當然會啊。
4802000	4807000	事實上現在已經有非常多的不同的努力在多方進行。
4808000	4811000	我不確定你心裡想的是哪一家啦?
4813000	4817000	但我想現在就是慢慢地有這個趨勢,
4817000	4822000	就是大家都知道什麼樣子的實踐方法呢,
4822000	4824000	是對開放科學有助益的。
4824000	4830000	那大家就會傾向去了解以及使用這些方法。
4832000	4837000	就是說他們可能已經有一些人已經有這個想法之類的。
4837000	4841000	那當然對於某些商業的公司,
4841000	4843000	他們可能有他們自己的考量。
4843000	4845000	最大的問題就是,
4845000	4850000	他們可能會覺得他們自己的東西具有智慧財產。
4851000	4852000	這樣子的話,
4852000	4856000	他們可能就會不願意把他們所有的東西都開放出來。
4862000	4867000	對小公司而言,這可能是一個主要的阻礙。
4867000	4868000	了解。
4868000	4870000	那我看目前為止,
4870000	4874000	大家做的努力好像比較偏向於說,
4874000	4880000	讓大眾可以認識一下這個跑跑簡單的Quantum Circling,
4880000	4884000	然後看看就是教大家怎麼做這件事情而已。
4885000	4886000	當然當然當然,
4886000	4888000	就是現在是在起步階段嘛。
4888000	4893000	譬如說我現在在這邊放的教學資源,
4893000	4898000	大部分也都是就是教大家怎麼使用Python,
4898000	4902000	怎麼使用Git這種很簡單很簡單的基礎。
4902000	4904000	那但是當使用者會之後,
4904000	4907000	他們就可以開始發揮他們的創意去做一些困難的事情。
4908000	4909000	比較進階的事情。
4911000	4914000	那這邊大家還沒有問題呢?
4919000	4920000	好像沒有。
4920000	4923000	那我就把那個錄影關掉。
