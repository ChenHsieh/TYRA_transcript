start	end	text
0	3020	整理&字幕):三马兄
30000	32000	整理&字幕):三马兄
60000	62000	整理&字幕):三马兄
90000	92000	整理&字幕):三马兄
120000	137000	我之後的身份在UC Berkeley做了一個叫做Jupiter Meteors的計劃,我剛剛已經在聊天室貼上那個圖影片的連結,所以你們有興趣的話你們可以先自己閱讀一下,不過你們看到的東西應該是會一樣的。
138000	157000	那這個計劃的主要目標其實就是量身打造立科研究的軟體生態系,那如果等一下你有聽到什麼聽不懂的地方,歡迎隨時打斷我,因為可能會有一些比較行話的部分,我不確定大家是否能夠理解,所以歡迎隨時打斷。
157000	180000	那今天呢,在接下來的一個小時左右的時間呢,我會把內容分成五個部分,首先我會稍微再多補充一些東西,包括我現在做什麼,我以前在做什麼,然後還有這些東西是如何引領我到現在這個計劃的。
181000	195000	那在講Jupiter Meteors的時候,之前我會先講一下Jupiter是什麼,然後地球科學目前遇到什麼樣的挑戰,那最後我們再討論Jupiter Meteors的目標是什麼,以及我們現在已經完成了什麼事情。
196000	207000	那最後的一部分呢,就是我們未來的一些展望以及規劃,以及我們看到在這個立科社群之間做出的一些努力。
208000	217000	那我自己的專業呢,我自己的研究領域是遙測、冰河學、地球物理跟地表變形。
218000	238000	那這邊剛好有一個示意圖,就是告訴你們我其中一個研究計劃是在做什麼。可以想像就是在你面前有一個冰河,冰河上面會有一些冰河裂隙,那隨著冰河流動的時候,這些裂隙也會改變它的位置。
239000	259000	那如果你今天有一個衛星,可以每隔一段時間就幫這個冰河拍個照,那這樣子的話你就可以去看這些照片,然後去計算說,這個冰河上面的每條裂隙它的移動速度是多少,進而解算出整個冰河它的移動速率。
260000	277000	那麼這個例子呢,就是我眾多的研究計劃其中一個啦。那我大部分的研究計劃,雖然不是全部,不過我大部分的研究計劃就是有點像是這樣,就是使用非常豐富的衛星遙測資料,監測冰雪圈的變化。
277000	297000	這一直的冰雪圈呢,包括了地球上的冰河,包括海冰,甚至包括其他行星上面有冰的部分。那這些變化大部分都是物理變化,譬如說,我剛剛說的速度、水時間的變化,或是冰河的高度、水時間的變化,或是其他的物理參數。
298000	308000	這些參數都會對整個地球科學,尤其是全球變遷的領域造成非常深刻的關聯。
309000	324000	那我在進入 Cornell 的時候,大概是 2015 年吧,就開始把我的研究重心放在冰河學上面,然後這樣做做做下來,到目前為止大概是已經六、七年了。
325000	342000	那麼在使用這些衛星資料的時候,我發現我們使用的這些資料的尺度以及資料的量是這麼的龐大,用傳統的分析方法有時候會顯得比較沒有效率。
343000	354000	有一個問題我一直在想,就是要怎麼樣才能夠在你使用很多資料的同時也能夠保持你進行分析以及跟別人進行學術交流的各種效率呢?
354000	359000	對我而言,這個答案就是開放科學,這是大數據時代的解方。
361000	374000	開放科學意味著你的研究裡面的所有細節都要盡可能地開放給大眾知道,譬如說開放你的資料讓其他人可以容易地存取,
375000	388000	上傳你的原始碼或是程式碼,讓每個人只要有需要都可以Google你的工具,甚至是當你有一些研究結果之後,你可以上傳你的研究結果,
389000	397000	不管是以圖片或是影片的方式上傳,甚至是跟媒體合作,宣傳你的研究,這些東西都屬於開放科學的範疇。
398000	412000	不過呢,雖然聽起來是很簡單沒錯,但做起來其實還蠻困難的,因為你會發現當你真的去想說要把你所有的東西,資料、程式碼、筆記以及結果全部都開放出去的時候,就會有一些挑戰。
413000	420000	那這些挑戰呢,就是為什麼我現在會加入Jupyter Mixed Years這個團隊,以及為什麼我現在會做這個計畫的原因。
421000	434000	所以,我們先來講一下Jupyter。請問你對Jupyter有多深的了解?這是一個民意調查,所以如果大家有看到聊天室的話,我已經有貼了一個連結,就是這個。
435000	448000	你可以匿名或是打成你的名字,沒關係,我不會確認。不過你可以稍微的選一下你對Jupyter有多深的了解,讓我了解一下大家的背景。
448000	474000	看起來目前是所有人其實都聽過Jupyter,那有一些人已經有在用過,大概三分之二吧,三分之二的人用過了Notebook或是JupyterLab,然後剩下三分之一的人是天天都在用,太好了。
475000	480000	看起來大家對Jupyter這個東西都有一定程度的了解。
482000	494000	我提高了,變成七比三了,不錯不錯,感謝大家的投票。那大家都投了,那我們就進展到下一個,等一下還會有其他的問題,所以我們就進展到下一個。
494000	509000	如果要我來定義Jupyter是什麼的話,我會說Jupyter其實是為要科學量身打造的作業系統。
510000	527000	作業系統意味著它可以幫助你完成一件你想要完成的任務,當然你的任務可能會有非常多不同的工作細項,Jupyter就提供了不同的工具來幫助你完成你的任務裡面不同的需求。
527000	553000	這邊用一個圖書來舉個例子,假設你現在腦中有一個研究的點子,然後它開始成形,然後你要開始去探索,這個研究點子有沒有搞頭,你可能會想要用你的電腦,然後去下載一些資料,然後寫一些程式碼,去初步的分析看看事情是不是像你所想的這個樣子。
553000	578000	當你確定這個計劃有發展性的時候,你可能就會想要使用更進一步的,譬如說使用更多的資源,譬如說計算的資源,或是你可能就會想要找其他的共同合作者來一起去執行這個計劃,來一起去分析可能很龐大的數據資料。
583000	602000	Jupyter它提供的工具就是把這所有的事情全部都綁在一起,讓你在找資料的時候,或是在進行海量運算的時候,或是你在跟別人進行協作的時候,都能有共同的平台來彼此交流。
603000	611000	你會注意到這邊我把iPython也放在它的中心圈圈裡面,這是因為iPython其實是Jupyter的前身。
613000	625000	iPython是由Fernando Perez他在十幾二十年前設計的,當初的目的就是希望說在寫程式碼,在分析資料的時候能夠即時的呈現出資料長什麼樣子。
626000	636000	這個概念就隨著iPython被發明出來,逐漸的流行起來,現在把這個計劃放到了下一個世代的Jupyter裡面。
637000	662000	我們在設計Jupyter的時候,除了我們要讓Jupyter的工具能夠讓你分析資料科學裡面各種不同面向的工作之外,我們還有一個非常大的目標就是,我們希望能夠在使用者使用這些工具的時候,
663000	678000	任何一個階段都能跟其他人有非常良好且有效率的交流。舉個例子,Jupyter Notebook是一個檔案,你可以輕易的把它複製給別人,別人就可以直接拿到那個檔案。
679000	687000	如果你用過JupyterHub,它其實就像是一個伺服器,每個人都可以用不同的使用者身份去登入這個伺服器。
688000	705000	他們會存取同一個圖形介面,這個介面是以JupyterLab為基礎設計的。在這個平台上面,他們就可以自由地使用相同的資料,你可以開發不同的程式。
705000	724000	在你團隊中的其他人也可以很輕鬆地看到你的程式,然後直接地進行交流。所以對某些人來講,Jupyter提供的這些工具,其實是可以促進一個非常良好的社群討論。
724000	741000	有人覺得Jupyter其實就代表了在使用Jupyter這些人所形成的一個社群。這麼多工具裡面,Jupyter有一個核心的工具,叫做Jupyter Notebook,以前叫做iPython Notebook,不過現在叫Jupyter Notebook。
742000	759000	既然大家都有用過,我們這邊就快速地跳過。它的概念其實就是一個檔案,這個檔案你可以用瀏覽器存取。存取了之後,你就可以看到這其實是可以以專業的格式顯示文字與數學公式的地方。
759000	774000	在同一個檔案裡面,你可以構築你的程式碼,可以寫程式碼,然後執行它們,給互動式的顯示研究成果,像是這邊的各種參數的調整,你就可以把它調整,然後看看最後出現的圖片是長什麼樣子。
775000	784000	最後一個步驟就是你可以很簡單地把這整個Notebook傳給別人,讓他們百分之百重現你的研究。
785000	791000	這邊再用一張圖稍微簡介一下Jupyter Notebook到底是怎麼達到這件事情的。
791000	814000	首先,當你開啟一個Notebook的時候,其實是Notebook的這個服務在把你的電腦變成一個伺服器。使用者要透過瀏覽器以及相對應的HTTP等等的協議,去存取這個伺服器上面的內容。
815000	831000	使用者對於這個伺服器所做的任何操作,都會被記錄在Notebook檔案裡面。當使用者有運算的需求的時候,這個伺服器就會呼叫一個計算的核心,也就是kernel。
831000	845000	這個核心可能會回就是Python,但實際上如果你設置有設置好,他也可以使用別的核心進行運算,譬如說像是R,或是C++,或甚至是Julia。
846000	855000	那在一般的使用情形下,你的Notebook伺服器是安裝在你自己的電腦上面,你的Notebook檔案也是在你的電腦上面。
855000	865000	但是我們也可以用相同的邏輯把這個伺服器給裝在,譬如說雲端的運算資源,或甚至是HPC,也就是超級電腦上面。
866000	873000	這樣子,這些雲端運算資源或是超級電腦就可以搖身一變,變成你的資料處理中心。
873000	887000	你可以直接登入這些雲端的運算資源,在上面開放你的程式,取得或是讀取資料,最後直接在上面以同一個介面來進行分析。
888000	898000	這麼一來,你的個人電腦就相當於是一個可以讓你純打字,純看結果的地方。
898000	907000	大部分的運算都是在雲端完成,這就是我們希望透過Jupyter Notebook最終達到的目標。
907000	913000	Jupyter稍微講到這邊,非常簡單。
913000	917000	接下來想要問一下大家對於地球科學有多深的了解。
917000	926000	這裡有五個敘述,分別是有淺至深,請大家就選一個你覺得自己的知識層級大概到哪邊。
926000	952000	看來大家對地球科學的涉獵程度蠻分散的,都是平均的落在A到D之間。
953000	965000	有些人看起來對地球科學已經有一定程度的熟悉了,不過有些人可能對我們現在做什麼並沒有那麼的了解。
965000	980000	不過沒關係,接下來呢,我並不會講說地球科學到底是什麼,不過我想要講的是,在做地球科學的人我們目前面對到什麼樣的挑戰,以及這些挑戰我們可以如何透過Jupyter去解決。
982000	986000	好,那大家都投完了嗎?
986000	992000	OK,那我們就進入到下一張投影片。
992000	1007000	那對一般人來講,講到地球科學你可能會想到,就是一群科學家們動不動就出野外,然後採樣,然後再帶回實驗室分析,然後研究,然後再寫paper,就是這樣。
1007000	1011000	沒錯,傳統上來講地球科學基本上就是這樣。
1011000	1027000	比如說像是這一張圖,這張圖是我在七、八年前跟一個日本的火山學家Shogo Kimura,這是我們在大油坑進行野外調查的時候拍的。
1027000	1040000	在傳統上來講,地球科學的資料量其實不多,因為你的資料必須要出野外才能夠獲得,那這些資料大部分可能就是寫在你的筆記本上面,就是幾筆,然後你回到研究室的時候你再處理。
1040000	1061000	不過隨著新科技跟新方法的出現,比如說像是這張圖,雖然這張圖已經很老,已經七、八年前了,不過我們那個時候在野外的時候,我們其實是借助儀器輔助的,我們想要測量整個大油坑的地表的溫度,所以我們就帶了一台紅外線攝影機。
1062000	1088000	紅外線攝影機搜集到的資料,完全就是不像是你會寫在野外筆記本上面的資料,你會發現這些資料在一剛開始的時候就數位化,而且它可以提供某種程度在時間上跟空間上連續的資料,也就是說你的資料本身的尺寸會變得非常大。
1088000	1096000	以前可能就是一兩筆,但現在就是有不同維度,然後好幾MB或是好幾GB的資料等著你去分析。
1097000	1115000	這還只是野外調查的部分,現在我們還有一些科技可以讓我們不用出野外就能夠收集資料,譬如說遙測,可以使用無人機或是更遠一點的使用衛星的資料來幫助你分析地球上面發生的事情。
1116000	1138000	以衛星為例,現在一顆地球觀測衛星每天可以產生好幾TB的資料,你想想看我們有好幾十顆地球觀測衛星在太空上飛,然後我們也觀測的時間尺度也很長,不是只有一天,而是好幾十天甚至好幾年。
1139000	1148000	所以這樣加起來的資料量其實龐大到沒有人知道怎麼去處理。這是做觀測的人會面臨到的問題。
1148000	1169000	另外一方面,做模擬的人其實也有相同的問題,因為他們會說,哇,我現在有這麼多資料了,這樣我就可以提高我地球科學模型的解析度,我就可以解析到譬如說幾天幾分鐘幾秒鐘之內發生的事情,或是在空間上幾公分之內發生的事情。
1170000	1178000	他們可以提高他們模型的精細度,然後這些海量的觀測資料就可以用來驗證他們的模型是不是準確。
1179000	1188000	但不管是哪一個,不管是做觀測還是做模擬,你要處理分析這些這麼大尺度的資料,你就必須要有相對應的運算資源。
1189000	1209000	更別說在地球科學上面資料的種類可能非常繁多,譬如說如果你今天是一個地球觀測衛星,如果你上面裝了照相機,那麼你收集到的資料基本上就是相片、影片,就有點像是天文觀測,像是左邊白的這張圖,就是一張相片。
1210000	1228000	但是也有其他種類的資料,譬如說你可能會收集到一些地理空間的資料,他們可能是一點一點散落在各地,有可能他們可以形成某種幾何的圖形,像是線或是多邊形等等。
1229000	1240000	不同的資料結構要怎麼整合在一起分析,目前地球科學家也是非常努力在解決的問題。
1241000	1249000	而且,大部分的這些不同種類的資料都含有所謂的後攝資料,也就是英文叫做metadata。
1250000	1273000	它的概念就是,譬如說我們今天造了一個衛星影像,這個衛星影像其實還有其他敘述,譬如說是哪個衛星拍的,什麼時候拍的,那個時候的軌道的傾角是怎麼樣,還有其他軌道參數,影像是在哪一個波段拍的,是可見光的波段還是紅外線的波段等等等等。
1274000	1279000	有關於這個影像的任何敘述都算是後攝資料。
1279000	1297000	這些後攝資料在你資料處理的時候,可能他們不會造成多大的影響,但是如果你今天要告訴別人怎麼樣重新的研究,或是你做出來的結果有什麼需要考慮的地方,有什麼需要值得注意的事情,那麼你就可能要去翻這後攝資料。
1298000	1313000	在大部分的情況下,這些後攝資料其實是要隨著你的資料一起傳遞的。我們在進行學術交流的時候,要如何做到這件事情呢?說實在地球科學界目前也還沒有什麼很一致性的做法,就是你想怎麼做就怎麼做。
1314000	1326000	這種狀況就會造成,我有聽過一個說法,不知道是不是真的,有人就說地球科學家大概有80%的時間都花在找資料上面。
1327000	1342000	這邊我想要貼一個例子,這個是某個螢幕截圖。我想要借這個螢幕截圖來分享給各位,找資料其實真的是很困難的一件事,雖然它聽起來很簡單,但是它其實超困難。
1342000	1359000	在這裡我想要找的是地表的反射率的資料,我想找台灣在某個時間點的地表反射率是什麼樣子。我知道有一個叫做MODIS的儀器,有在觀測這個數據。
1359000	1383000	MODIS是一個裝在NASA營運的Aqua跟Terra這兩個衛星上面的儀器。MODIS的資料主要是放在一個叫做NASA EarthData的網站,它是完全公開的,所以任何人如果你知道怎麼搜尋、怎麼存取的話,就可以下載這些資料。
1384000	1399000	問題就是這個介面做得實在是有夠複雜。首先你要上去這個EarthData,然後你要透過關鍵字型搜尋,我們就搜尋MODIS,然後就會發現,哇,有731筆不同的資料集都有MODIS的名字。
1399000	1428000	為什麼會這麼多呢?是因為MODIS本身,雖然它就只不過是一個在天空的照相機,但是在後來資料處理的時候有分成非常多不同的等級,每個不同等級都有不同的科學價值,所以他們就是把它分別類成不同的科學等級,然後不同的目的,然後去發佈這些資料。所以地表的反照率只是其中一個資料集而已。
1429000	1434000	所以首先你必須要非常清楚、確定地知道這個資料集的名字。
1434000	1455000	再來呢,當然就是731筆資料集的其中一筆。再來呢,就可以畫出你想要在地球上哪邊搜尋,比如說我把範圍寫定在臺灣,然後就會看到,哇,總共有1923筆影像,那每一筆影像都是MODIS在某個時間點拍的。
1455000	1478000	所以你必須還要知道,如果你今天要下載資料,你必須要知道,我想要擷取哪個時間到哪個時間點的影像,然後再一一地按下那個下載連結,把它下載到你的電腦裡面。那最後呢,再一一地把這些檔案放到同一個資料夾,然後可能已經做好這件事情,然後再把它整合到你的資料處理流程裡面。
1479000	1494000	這件事情呢,對我來說不難,一天之內應該就可以做得好,但是對一個可能新入門的地球科學家而言,他可能需要兩到三天的時間,甚至更久。而且呢,這還是一個比較輕鬆的狀況。
1494000	1517000	那如果你今天要找的是那種比較沒有那麼開放的,譬如說德國或是法國的太空種族他們發射的衛星資料,那你可能連找那個下載連結就要花上兩三天了,更不用說你還要去操作他們的網站的搜尋的內容。
1518000	1536000	所以呢,我們有了這些困難,導致了說,我個人覺得資料科學,包括如何獲取資料以及如何處理分析這些資料,資料科學本身可能是目前地科研究者最想涉獵的領域之外的技能。
1537000	1555000	為什麼會這麼想呢?是因為在地球科學界有一個一年一度的大會叫做AGU,它每年會舉辦一次在美國舉辦,那都會有數千或數萬個研究者參加這個大會,然後發佈他們的研究,發表他們的研究。
1556000	1568000	在這個大會的時候,同時也會有好多的工作坊,這些工作坊就是提供給不同的地球科學研究者,讓他們學習一些新的東西。
1568000	1583000	在以前,你最常看到的工作坊的內容就是譬如說科學寫作,或是假設NASA有一個新的資料集出現了,然後就有NASA的人過來告訴你,你要怎麼用。
1584000	1601000	不過以去年為例好了,去年的AGU大會就有兩個工作坊是跟資料科學有關的,一個是教人怎麼用Python,另外一個是教人怎麼用Machine Learning,就是機器學習,來處理地球科學的資料。
1602000	1611000	我個人覺得這個現象其實是很最近才發生的事情,大概也不過一兩年吧,可能2020、2021才發生的。
1611000	1630000	但是我想這是目前現在開始出現的趨勢,那以後這個趨勢只會多而不會少。除了AGU之外,也有很多的比較小的工作坊,在美國至少是這樣,在美國有很多比較小的工作坊,就是把工作坊的內容放在資料處理以及資料分析上面。
1630000	1653000	譬如說像是我在這邊貼的一個連結叫做ISAP-2 Hack Week,這是今年的三月會在University of Washington舉行的一個工作坊,他們內容就是教你如何分析,以一些實作的題目,教你如何分析ISAP-2這個測高衛星的數據。
1653000	1670000	以上就是我們在資料量、獲取資料以及分析資料上面遇到的一些有趣的課題。除此之外,還有一些衍生性的課題,譬如說像是這個,像是我在這一篇投影片沒有講的。
1670000	1695000	如果你今天使用的資料值跟量都發生了改變,那麼你要怎麼把你的研究結果分享給別人,那別人又要怎麼重複驗證?有很多問題其實我們現在都沒有很好的解決,譬如說假設你今天用了大數據,那你的研究又產生了另外一筆大數據,那這個大數據你要存在哪?
1695000	1720000	然後你在分析這些大數據時所寫的程式碼及註解又要放在哪?那如果你使用了某些軟體,譬如說你使用Python某個套件,或是你使用商業軟體,你要怎麼告訴別人去裝這些軟體,然後讓他們能夠在相同的環境裡面測試你的程式碼跟分析你的資料?
1725000	1746000	所以講到這邊,會想要問一下大家,你覺得執行研究計畫的時候最困難的是什麼?是尋找取得資料呢?還是分析資料?還是宣傳或分享研究成果?或是你根本沒有在進行研究,我也不知道,我們這邊有人其實不是研究工作者嗎?好奇。
1746000	1763000	我看到大概有一半的人覺得寫文章、宣傳或是分享研究成果其實是最困難的。
1763000	1790000	我已經超過一半了,然後尋找取得資料大概是三成,然後剩下的就是分析資料。看起來就是大家都有不同的想法,那這三個研究的面向都有人覺得是很困難的。
1791000	1804000	不過有半數以上是覺得宣傳跟分享研究成果最困難的,沒錯。我個人如果要我選的話,我大概也會選C或是A,不確定,要看我在做什麼而定。
1805000	1815000	以上的問題就是Jupyter Meteor想要解決的。
1816000	1832000	我現在再回過頭來看一下Jupyter。Jupyter本身其實是一個生態系,簡單來講就是除了Jupyter本身提供的工具之外,還有很多的其他的工具他們可能不是Jupyter團隊開發的。
1832000	1846000	但是你在執行的研究計畫的時候,實際上會使用他們,因為他們能夠協助,他們在你的研究流程裡面有不同的趣味。
1847000	1864000	怎麼說呢?譬如說像是你可能會用Python這個程式語言去寫你的程式碼,那你在用的時候,你可能會使用Python的一些核心套件,譬如說你可能會用Scipy或是Numpy來做數值運算,可能會用Metaflowlib來做畫圖。
1865000	1876000	那麼你可能也會使用一些比較專業領域上的套件,譬如說像是如果你要做平行運算的話,那你可能就會聽過Desk或是曾經用過Desk。
1876000	1882000	那如果你今天要做影像處理,那麼我想你應該就是用過Scikit-Image。
1883000	1900000	那除了這些比較專業的面向的套件之外,還有一些套件是跟某種專業領域比較有相關,譬如說像是AstroPy就是專門處理給有在處理天文觀測資料的人才會用的,
1900000	1913000	那Syntax在這邊就是給有在做地球物理繁衍的人用的,那種計算地表電阻值或是之類的東西的人用的。
1915000	1926000	那這些不同的套件,他們在一個研究工作裡面都有不同的趣味,所以整體來說我們就說它是一個生態系。
1927000	1935000	那以地科研究來講,我們就會發現地科研究其實也是有不同的趣味,就跟其他研究一樣。
1936000	1942000	譬如說我在這邊把它叫做生命週期,因為發現這其實是有時間關係的。
1942000	1950000	剛開始你要進行一個研究的時候,你會想說原因有一個點子,然後就會開始探索這個點子到底可不可行,做不做得起來。
1951000	1960000	那接下來你可能就會想要蒐集更多的資料,不管你是要出野外蒐集資料,或是你直接去網路上蒐集看看有沒有比前人發佈的資料也好,
1960000	1964000	在這個階段你可能需要跟其他人合作來蒐集到這些資料。
1965000	1975000	接下來你可能要分析這些資料,那就要使用你可能會需要雲端或是超級電腦的計算資源,我也不知道,是有可能的。
1976000	1989000	當你這些蒐集資料蒐集好,分析資料分析好之後,那就是時候把你的研究成果出版給其他人知道,然後發表你的研究成果跟其他人進行學術的交流。
1989000	2000000	最後最後,當你的研究成果被多次驗證之後,它就有可能會被寫成教材,或是你就可以把這些新的知識給交給其他人。
2001000	2010000	那以 Jupyter 生態系的觀念來看,這五個不同的步驟都有相對應的工具可以幫助你執行。
2010000	2019000	譬如說你在探索的時候,你可能就會想要用 JupyterLab 去寫一些程式碼,開發一些程式碼,然後看看分析出來會是什麼樣子。
2020000	2033000	當你要跟別人合作的時候,你可能就會想要用 JupyterHub,讓大家都在同一個工作區,然後共享資料,但是設計不同的分析流程。
2034000	2051000	當你要開始執行大尺度的分析的時候,可能就用 Desk,那最後你要出版你的研究內容的時候,可能就會想要使用 Finder 或是 JupyterNB Viewer 去讓別人可以看到你的 Notebook。
2052000	2064000	最後需要教學的時候,假設你今天是老師,你可能就會想要再弄一個 JupyterHub 給學生們登錄到同一個地方,這樣你就不用每次都提供資料給他們。
2065000	2073000	你自己的講義教材等等,就可以用 JupyterBook 把你的 Notebook 直接轉變成可以用在你上課的教材。
2074000	2101000	所以我們看到的地科研究,其實是一個很有趣的領域,所以我們就想說,那我們可不可以推廣我們的 Jupyter 生態系給地球科學研究者使用,然後改變他們現在做研究的方法,然後讓 Jupyter 成為下一個世代做地科研究的工具的標準。
2102000	2120000	另外一方面,我們也可以即時地從地科研究者那邊獲取回饋,譬如說他們如果覺得這個工具好用或難用,他們可以馬上讓開發團隊知道,讓我們就可以藉由這些需求繼續開發這個 Jupyter,完善這個 Jupyter 的各種不同工具。
2121000	2134000	所以基於這個想法,Fernando Pérez就在幾年前開啟了 Jupyter Meteors 的計劃,我是在去年加入這個計劃的。
2135000	2159000	你可以看到底下是所有計劃中的人。我們這整個團隊裡面其實包含了統計學家、地球科學家、軟體設計師,以及光是地球科學家就有像我是做遙測跟冰核的,我們也有做大氣科學的人在裡面,也有做地球物理的人在裡面。
2160000	2167000	那就是有非常多種不同的面向,還有人是比較偏向科學教育方面的專業。
2167000	2190000	具體來說,我們想要提供一些實用的例子,以地球科學研究出發的實用例子,以這些例子告訴大家說,Jupyter 要怎麼用,才能夠讓地球科學的研究達到最有效率的方式。
2191000	2201000	我們也想要藉由這些實用的例子,去探討說,如果我們未來要繼續開發 Jupyter,那有什麼事情是我們可以做的。
2202000	2208000	我們在 Jupyter Earth.org 這個網站上面,已經有放上至少兩三個實用例了。
2208000	2218000	不過今天因為時間的關係,我只講一個,那就是我在去年 AGU 大會上面發表的一個海報。
2219000	2231000	那這個海報是我,然後 Shashank Bhushan,Maximum Wick-DeVry,Will Koticky,還有 David Hsien,我們五個人的一個研究計畫。
2232000	2246000	我就不細講這個研究的內容,這個研究主要就是,假設你今天要用衛星的影像去計算冰河的速度的話,那個參數要怎麼調整,你才能得到最好的結果。
2247000	2263000	不過細節這邊不是重點,重點是首先這個海報是公開發佈在一個叫做 ESSOAR 的儲存庫上面,所以在任何時間你都可以透過這個 DOI 連結去看。
2264000	2280000	不過你可以看到左下角這邊有一個 QR 碼,那在 AGU 大會海報的時段的時候,觀眾們就可以掃這個 QR 碼,這個 QR 碼會帶他們到下一個網站。
2281000	2286000	那這個網站就是我今天要給你們看的一個網站,就是這個。
2287000	2301000	那這個東西是,你可以看到這其實是一個建立在 GitHub 上面的網站,那它整個格式有點像是文檔,它是用一個叫做 JupyterBook 的工具去編寫的。
2302000	2323000	那它其實就是把很多不同的 Notebook 給編轉起來,也就是說你在這邊按的每一個分頁其實原本都是一個 Notebook,那你可以看到它裡面有很多的內容,告訴大家你要如何才能獲取資料,然後畫出我剛剛在海報上面呈現的圖。
2324000	2330000	那譬如說以這個為例,滑到最下面就可以看到在海報最後一張圖其實就呈現在這邊。
2331000	2346000	那 JupyterBook 呢,它在右上角有一個叫做 Binder 的按鈕,那點進去呢,就可以把這個 GitHub 的頁面變成一個你可以直接執行程式碼的頁面。
2347000	2351000	那如果再跑需要一點時間,所以我們給它一點時間。
2351000	2364000	應該是很快,因為我不久之前才弄過,所以我猜應該是很快。我們來看一下。
2364000	2384000	那你可以想像,我在 AG 大會的海報時段,在報告這個海報的時候,對大部分的觀眾我就是可以講進台海報給他們聽。
2385000	2404000	那如果對那些更有興趣的觀眾,那我就可以藉由這個 QR 碼,那當然我也有帶我的筆電在旁邊,那我就可以直接的把這些程式碼,還有一些分析上的細節,然後展示給他們聽,然後在有限的時間之內進行非常深度的交流。
2405000	2413000	那現在出來了,你就可以看到剛才的那個 GitHub 的頁面已經變成一個動態的,你可以執行的 Notebook,就可以執行執行執行。
2414000	2426000	那最後呢,你就可以重新的跑一次這個最後的圖,那當然你可以改變一些什麼內容,譬如說像是 Blah Blah Blah 之類的。
2427000	2440000	那就可以直接的改變這個圖畫出來的內容。好,大概是這樣。我們再回到投影片。
2441000	2451000	那運用這個 JupyterBook 的工具,我們就可以達到更有深度以及更有效率的學術交流。
2452000	2465000	這邊還有另外的例子,不過我不打算秀這個例子,太多。這個例子呢,是我在去年投稿的一篇文章,它現在還在申告中。
2466000	2478000	那麼現在你們看到這個螢幕截圖呢,其實也是 GitHub 的頁面,只不過它其實是這篇文章的補充資料,Supplemental Material。
2478000	2487000	所有的這篇文章補充資料其實都放在 GitHub 上面,然後呢,而且以 JupyterBook 的格式編了起來。
2487000	2498000	所以你會看到像這個分頁就是說,如果你要重現這篇文章裡面的 Figure 3 跟 Figure 4 的話,你要怎麼做?
2498000	2505000	然後所有的程式碼都附上,甚至在這個程式碼內容,連你要怎麼取得資料都已經幫你弄好了。
2505000	2516000	你就只要執行,然後它就可以從別的文章補充資料裡面直接拿你要畫這個圖需要用到的資料。
2517000	2532000	也就是說我們運用這些工具,在未來發表文章的時候,你的流程,然後你的程式碼,以及我們剛剛講的那些東西,都可以被更好的分享給其他人。
2532000	2551000	那他們是,因為他們本身跟你的文章有連結,所以他們也會有一個 DOI,也就是說你發表出去的這些程式碼,這些資料,不會隨著時間的推移而消失在網路的茫茫大海裡面。
2551000	2580000	最後一個問題是,DOI 代表的是數位識別嗎?你可以把它想像成是,有點像類似所書號的概念。
2581000	2599000	不過呢,在網路的世界裡面,網址是時常變動的,比如說你今天可能會因為資金啊,或是等等的因素,你必須要換網址。就算是出版商,他們也有可能會動不動就換掉他們的網址。
2599000	2626000	所以你如果是用網址去存取某一個文章的話,那你可能今年可以,明年可以,但是十年後它可能就會失效。那 DOI 的目的呢,就是它提供一個永續的,至少從現在的時間尺度來看是永續的識別碼,讓這個識別碼不會隨著那些出版商的網址變動而變動。
2627000	2652000	也就是說呢,如果你今天出版商有註冊一組 DOI,那這個識別碼,也就是這個 DOI.org,然後 10.5194,這個東西不會隨著出版商換網址而更換。你隨時都可以透過這個網址連到那篇文章或是網路上的某個資源的實際的地點,而且是最新的版本。
2652000	2662000	主持人:"那下一個問題是說,為什麼你可以把你的 code 放在 DOI 上面?就是這個是有一定的條件,要什麼樣的條件才能變成一個 DOI?"
2683000	2699000	主持人:"那對於程式碼或是資料而言,我現在用的一個服務叫做 Zenodo。那 Zenodo 呢,是那個 CERN,也就是歐洲的那個粒子對撞機。
2700000	2726000	主持人:"因為他們有很多錢,所以他們就用了一些錢來做了一個這樣子的服務,讓大家都可以上傳他們的資料跟程式碼到他們的伺服器。然後呢,當你上傳好所有的東西,然後把後設施都全部弄好之後,他們就會註冊一個 DOI 給你,當作你在那個當下上傳這個資料的版本的代碼。
2727000	2728000	主持人:"OK,了解,謝謝。
2728000	2753000	主持人:"那現在在地球科學呢,比較流行的為資料或是程式碼補上 DOI 的地方有兩個。一個就是我在這邊用的 Zenodo,那是我剛剛說過的 CERN 提供的。那另外一個也是歐洲人在做的,叫做 Pangea。不過它的內容跟這個大同小異,不過是由不同的機構提供的服務。
2757000	2768000	主持人:"好,那我們就繼續。還有什麼問題嗎?好奇。OK,那我們就把最後的幾張投影片稍微的說明一下。
2769000	2785000	主持人:"那前面我們所講的就是 Jupyter Meteor 是他們的主要宗旨,以及我們目前到現在做了些什麼。那接下來呢,我想要講一點關於我們未來要做什麼,以及這個社群裡面發生了什麼事情的一些展望。
2785000	2810000	主持人:"首先呢,就是我想要跟大家介紹一個叫做 Pangea 的社群。那這個社群其實是一個很鬆散的社群,就是由一些地科愛好者組合起來,就是他們有在用 Jupyter,然後他們有在用 Dask 來做平行運算,然後他們有在用 X-Array,就是一些比較非常酷炫的資料結構去處理他們的資料。
2811000	2830000	主持人:"那我們跟這個 Pangea 的社群的互動也是非常密切,因為你們看到他們雖然大部分的人都不是我們的核心成員,但他們也積極地在推廣使用這三個套件來進行地球科學研究。
2830000	2855000	主持人:"那他們也發佈了很多使用例,譬如說像這邊有一個 Scott Henderson,他是 University of Washington 的研究人員。那他就曾經發了一篇文,就是教大家怎麼樣在 Jupyter Lab 的介面裡面分析 Landsat 的衛星影像,然後做一些平行運算的處理。
2856000	2877000	主持人:"那麼藉由這些回饋,不管是我們內部 Jupyter Meteors 團隊內部的回饋,以及 Pangea 或是甚至是其他地科社群的回饋,那我們現在也是有一些對於 Jupyter 要怎麼改善,我們其實是有一些想法,大部分目前在進行中。
2877000	2902000	主持人:"那其中有一個我個人覺得非常值得期待的,就是 Jupyter 的實時協作功能,就是 Real-Time Collaboration。那這個功能就是可以讓你在像是使用 Google Doc 的方式使用 Jupyter,你跟你的協作者之間可以共享一個連結,那你們可以在相同的時間編輯這個 Notebook 的內容。
2903000	2923000	主持人:"那現在這個實時協作功能已經實裝在 Jupyter 3.1 以後的版本,不過我記得預設是沒有開啟,因為還在測試中。你們有興趣的話,你們可以試試看這個功能,如果有什麼意見的話,歡迎隨時讓我們知道。
2924000	2949000	主持人:"那麼你會發現,有很多我們未來想要做的這些功能,他們本身需要的時間以及需要的人力成本,其實就已經很大了。我們發現有時候它甚至已經超出一個科學研究的講座,或是兩個科學研究的講座,可以涵蓋的內容。
2949000	2967000	主持人:"所以其實在幾年前,在 UC Berkeley 這邊,有一群 Jupyter 的開發者就成立了一個組織叫做 The International Interactive Computing Collaboration,或是簡稱 2I2C,它是一個非營利組織。
2967000	2993000	主持人:"他們其實就是現在他們的目的,就是專門來設計 JupyterHub 以及 JupyterBook 的下一代的版本。他們也進行了很多教學以及推廣上面的活動,期望著嘗試讓這個系統,這個 Jupyter 的研究系統,給更多人使用。
2997000	3017000	主持人:"有一件事讓我們非常開心,就是在這兩年之內,整個地科社群開始有其他人注意到這個 Jupyter 生態系,開始使用這些 Jupyter 生態系裡面的工具,在他們的研究活動跟他們的教學活動上面。那這邊我想舉個例子,這個例子我非常喜歡。
3017000	3036000	主持人:"這個網站叫做 OGGMEDU,Open Global Glacier Model,它是一個,OGGMEDU 是一個有點像是冰河學的教學網站。你可以看到他們這個網站也是以 JupyterBook 的格式寫的。
3036000	3064000	主持人:"他們有一些非常酷的內容,譬如說像是這裡有一個 App,點進去呢,你就可以去探索在這個世界上冰河分布的位置跟一些冰河的基本參數。我不確定這是不是需要花點時間,不過如果各位有興趣的話可以試試看。那我就不在這邊操作了。
3066000	3073000	好勒,那就可以在這邊隨便的移動,然後來看一下有什麼有趣的事情發生。
3073000	3098000	主持人:"另外一方面,除了這些研究開源的社群,我們也非常興奮,最近也越來越多有商業社群的參與。像是 Microsoft 在 2020 年的時候開了一個叫做 Planetary Computer 的計劃。
3099000	3111000	他們其實想要做的就是為地球科學社群提供微軟的運算資源。他們所採用的股價也就是 JupyterHub,也就是我們現在正在發展的股價。
3112000	3128000	我個人是認為有這些商業社群的投入,才能夠讓這個 Jupyter 生態系更為完善,然後真正的成為下一個時代的地科研究的資料分析標準。
3128000	3141000	那我今天就大概分享到這邊,謝謝大家。如果大家有什麼問題,請在隨時提出。
3159000	3178000	王傑:"我先講。你好,我是王傑。我其實有一個初階的問題,就是要怎麼從一個 JupyterHub 或是 Jupyter 的使用者,怎麼跨進去一個開發者的。
3179000	3190000	我對這一點很好奇,因為我是一個重度 JupyterHub 的使用者,但是我一直覺得要跨進開發者對我來說有一個很大的鴻溝。
3190000	3198000	我就很好奇要怎麼樣才能真的去跨過這條鴻溝,然後實質的去參與我的社群的開發。
3198000	3208000	我完全可以理解。對我來說,其實我覺得 Jupyter 還蠻草根的,就是他們有非常活躍的社群互動。
3208000	3218000	有一些軟體不是這樣,他們的開發者跟使用者之間的連結就沒那麼強,不過 Jupyter 並沒有這種鴻溝存在。
3218000	3224000	不過,對一個使用者而言,的確還是有點困難要如何進去開發者的角度。
3230000	3236000	如果你對開發 Jupyter 有興趣的話,我覺得可以先從參加他們的討論區先開始。
3236000	3250000	Jupyter 本身有一個 GitHub,除了 GitHub Issues 上面你可以發佈你的問題或是參與討論之外,他們也有一個 Discourse,我不確定,我在這邊找給你看一下。
3250000	3264000	Jupyter Discourse,我覺得他們是這樣,對,他們應該是這樣,Discourse,這裡有一個連結。
3264000	3278000	除了 Discourse,我看一下,我找一個東西,對,沒錯。
3279000	3287000	除了 Discourse,他們在 Gitter 上面也有一些,也有為數不少的討論串。
3287000	3301000	在這兩個地方,Discourse 跟 Gitter 上面,很多使用者都會去上面 post 問題,然後回答問題,你也會看到很多開發者其實他們就是會游來游去。
3302000	3321000	我覺得如果你想要從使用者跨出到開發者的話,第一步就是先建立起你們之間的交流,先參與一些討論,然後接下來大概就可以感覺到,哪些問題是他們真的現在想要解決的。
3321000	3330000	這些問題可能很細節,但是這些細節問題剛好對於一個開發者而言是比較容易上手的。
3330000	3339000	透過這些很細節的問題,你就可以慢慢地去了解 Jupyter 的開發的環境以及等等的狀況。
3339000	3349000	以上就是本期的講解,感謝大家的收看。
3369000	3371000	主持人:「我們哪天再聊聊?」
3371000	3375000	主持人:「我之後會再寄 email 給你,我對這題目很有興趣。」
3375000	3379000	主持人:「隨時就可以聯絡我,需要我的 email 嗎?」
3379000	3388000	主持人:「我應該找得到,反正我都有在看你篩什麼一大堆文章,所以我應該找得到你的聯絡管道,還有你的 P2 什麼的。」
3388000	3391000	主持人:「好,感謝。」
3391000	3393000	主持人:「對,謝謝。」
3393000	3400000	主持人:「你好,我有問題,我可以提問嗎?」
3400000	3420000	主持人:「你好你好,我想要請問一下,剛剛在最後一個統計,就是大家對於說怎麼分享研究,怎麼把自己的研究從程式碼變成一個可讀的頁面,或者是一個 JupyterBook。
3421000	3448000	主持人:「以你的例子,就是我剛剛很快的看了一下你很多的 GitHub 或者是 JupyterBook,我想要問一下,以你的例子你會怎麼建議,或者說你這方面的 workflow 是怎麼運作,你是怎麼去結合你的工作,然後結合你的 GitHub 然後發布?」
3448000	3454000	主持人:「大概有哪些工具會是需要的,然後你怎麼去運用這些工具?謝謝。」
3454000	3470000	主持人:「感謝,感謝你的問題。你的問題其實是 JupyterMeteors 我們一直在問自己的一個問題,我個人覺得目前我們還沒有最標準的答案。
3470000	3498000	我們現在覺得有一種方式可行,就是對於一個研究團隊的層面來說,他們可以有一個共享的工作環境,這個共享工作環境可能就是 JupyterHub,你可以把 JupyterHub 安裝在可能你們研究室電腦的伺服器上面,或是某個雲端資源上面。
3499000	3512000	這樣子的話,你所有的研究材料、程式碼、資料等等,基本上就是在雲端,你不需要你的電腦,你只要可以存取某一台電腦,就可以存取到你的資料。
3513000	3523000	接下來,假設你在用 GitHub,那就是把 GitHub 跟 JupyterHub 連起來。
3524000	3551000	以我們現在的做法,我們是靠 GitHub 的身份認證登入 JupyterHub,我們的 JupyterHub 有一個管理者,他就是會管理在 JupyterHub 的環境,包括假設你在用 Python 跟 Conda 的話,那就是會有一個預設的環境。
3552000	3555000	當然,每個使用者都可以自己安裝自己的環境。
3556000	3581000	那麼你在這上面執行,你在這邊寫的程式碼,執行的分析,你可以選擇把它保留在自己的 JupyterHub 的雲端,或是你可以把它選擇隨時的上傳到 GitHub,不管是以公開的方式,或是假設你是 GitHub 會員,你可以使用非公開的方式上傳到 GitHub。
3582000	3597000	那這樣子做的好處就是,不管其他的協作者有沒有在同一個 JupyterHub 上面跟你一起協作,他們都可以存取到你們現在研究的最新版本。
3598000	3618000	所以簡單來說,我覺得關鍵就是,一就是盡可能地把你的研究流程、程式碼、資料等等上傳到 GitHub,二就是共享工作環境,這可能就是 JupyterHub 要做的事情。
3619000	3628000	不過雖然聽起來很簡單,但實際上會有一些問題存在,這些問題也是我們目前正在努力的。
3628000	3650000	譬如說其中一個問題就是,假設你的研究流程裡面需要用到非常大尺寸的 gg 或是 gt 的資料怎麼辦,因為我們知道 GitHub 本身沒有辦法儲存這麼大尺度的資料,你一定要去找其他的資料儲存庫才可以。
3651000	3662000	假設你每一次的研究流程都要調動這些大資料,那麼要如何做到多方向的存取,這是我們目前還在思考的一個問題,但還有很多其他的小問題。
3662000	3673000	所以如果你對這個問題有任何的想法,就歡迎隨時跟我講,非常樂意聽聽看不同的點子。
3681000	3683000	這邊還沒有什麼問題嗎?
3683000	3685000	我可以問一個問題嗎?
3685000	3686000	好。
3686000	3689000	這是剛剛提問者問的問題。
3689000	3707000	作為一個研究者或資料分析者,當你處理很多版本的程式碼的時候,包括你跟其他合作對象一起寫的程式碼,你可能會有很多不同的階段。
3708000	3721000	例如,當你跟其他人一起共同創作的時候,你可能會擔心你今天給了一個實習生共同創作的時候,他會不會把版本改掉。
3722000	3737000	這有點類似剛剛的問題,就是在整個流程中,你會如何去處理幾個不同的空間,比方說你的local端的電腦的資料,跟你放在GitHub的資料,跟你放在Jupyter上面的資料。
3738000	3739000	嗯哼。
3740000	3743000	我覺得Git不就是用來處理這件事情嗎?
3743000	3750000	如果你有這樣版本控制系統的話,那Git它可以有很多不同的分支,對不對?
3750000	3756000	那假設你們今天有很多人都在做同一個專題,那每一個人他們其實都可以。
3756000	3767000	這個問題其實很好,因為我看過很多不同的,每個人都有不同的使用Git的哲學,不過我個人認為我最喜歡的那種哲學是這樣。
3767000	3783000	假設你今天一個計劃有很多人一起在做,如果你們是個小團體,那麼你們選擇一就是大家都提交到同一個branch,可能是master branch。
3783000	3790000	那每一個人提交的時候,都只改他們自己的檔案,他們不會去改動到其他人的檔案。
3790000	3810000	那這種方式適用於小團體,譬如說可能你的團體只有三個人、四個人,那每一個人他做的目標有點不太一樣,可能這個人他的目標是處理那個資料,A資料,然後另外一個人處理的是B資料,這樣子的話你們就可以提交到同一個branch上面。
3811000	3828000	另外一種選項是比較適用於比較多人協作的狀況。如果是這種狀況,我會建議每個人會有一個master branch,那每一個人他們在處理資料的時候,他們其實都是另開分支的。
3829000	3847000	他們譬如說A可能就會開A分支,然後B可能就會開B分支。當他們要與其他人進行討論的時候,他們是用他們自己分支裡面的資料進行討論。那如果你想確認他們做了什麼,就切換到他們的分支,然後跑他們的資料。
3847000	3871000	當大家都驗證過這些分支裡面的資料是他們想要的時候,他就可以提交一個pull request到主分支上面,然後再由這個計畫的帶頭者去確認這個提交。
3878000	3888000	我覺得這其實只是一種協作風格而已,不過每個人都有他不同喜歡的協作風格,所以你的答案或許會跟我不一樣。
3889000	3901000	我只是想要說,Git本身其實就是為了解決這個問題而出現的,解決不同版本的管理問題所出現的,所以我想我們可以多多利用。
3901000	3925000	在這上面,JupyterHub跟GitHub他們主要提供的是兩件不同的事情。JupyterHub提供的是一個協作的環境,它不負責版本處理的事情,那麼GitHub就是專門負責版本處理跟存訊的資料。
3931000	3934000	感謝前來。
3962000	3976000	主持人問:「那個時代的實驗,我們根本不知道它是怎麼做的,有很多後設的資料全部都是隱藏的,都不知道要如何去repeat以前的實驗。
3977000	3993000	我有一個問題,如果我們要從現在開始,可能十年前我們不知道這個primitive是重要的,但是我們現在知道了,以前十年都沒有記錄這個primitive,那該怎麼辦?」
3993000	4019000	主持人問:「那當然就是從現在開始記錄了,但是如果要記錄一大堆的後設資料,我們當然是可以把它記錄下來,但是我們又不能把它全部展示出來,因為如果把它全部展示出來的話,我們的展示又會變得非常複雜,可能別人都看不懂。
4019000	4024000	要怎麼在這中間取得一個評分?您有什麼建議嗎?」
4050000	4062000	它其實有點像是一個壓縮的資料夾,每個壓縮的資料夾裡面還會有各種不同的資料結構,你可以放陣列,也可以放資料表等等。
4063000	4086000	以Python為例,Python有一個專門用來讀取HDF5的套件,我在使用這個套件的時候,你就可以專門讀取你想要的部分,其他的部分就留在那邊,有需要再存取就可以了。
4087000	4099000	所以在傳遞資料的時候,你還是整個HDF檔一起複製或上傳給別人,別人在存取的時候可以只看他們想要看的部分。
4099000	4109000	謝謝,感謝提供,看到有人在聊天室投了。
4129000	4131000	主持人:「你會怎麼做?」
4132000	4134000	主持人:「多多跟其他人聊天?」
4135000	4150000	主持人:「我覺得還是人際關係才是真正的重點,你要跟大家溝通協調好一個方法。」
4151000	4168000	主持人:「在地球科學領域裡面,我們這幾年的確有發現地科人之間的溝通不足,很多人其實都不太會分享他們研究本身到底是怎麼做的,可能不同的實驗室完全有不同的做法。」
4169000	4185000	主持人:「我猜這是其中一個為什麼我剛剛提到的Pangeo社群是逐漸興起的關係,就是有一些人發現這樣下去不行,這樣下去我們會浪費太多時間在相同的事情上面。」
4185000	4200000	主持人:「所以他們就起來,創立了一個這樣的社群,一個網站,還有討論區,讓大家可以問問題,學習新東西,推廣大家覺得好用的工具以及資料格式。」
4205000	4211000	主持人:「如果你願意的話,說不定也可以在你的領域裡面弄一個這樣的社群。」
4212000	4218000	主持人:「所以可能是要找一個聲量比較大的大頭來做這件事情?」
4219000	4244000	主持人:「我覺得很多活躍在工具、科研的步驟等等這方面的人,都是比較年輕的科學家。你可以想想看,比較老的科學家都已經用了那一套東西用了那麼久了,大部分的人都會覺得這樣就夠了,不用去學新的東西。」
4245000	4253000	主持人:「所以我的感覺反而其實是,在這個議題上面你會遇到更多年輕的人。」
4253000	4275000	主持人:「我想要問一個比較敏感一點的問題,就是寫這樣的東西,你可以把它放在publication上嗎?或者是之後對於這個年輕科學家的好處是什麼?比如說要升等或什麼的,你可以把它拿來用嗎?」
4275000	4302000	主持人:「我覺得要看你在哪個國家。在美國,我覺得這件事情蠻被人注重的。就我所知,如果你真的要放,當然不是放在publication那一欄,但是你可以放在service,然後你也可以放在community outreach,如果你的CB有這一欄的話。
4305500	4327740	它其實不算是你的publication,沒有錯,但是它仍然是你的學術生涯裏面很重要的貢獻。不過就如同我剛剛講的,我覺得這跟不同的國家的學術傳統有關係,所以我對這個問題的答案應該是我不知道,不過我相信是會有真相的影響。
4328520	4344300	主持人:「而且撇開個人的學術成就不談,我個人是相信,有越多人做這件事情,在未來做科學的速度就會越快。」
4345020	4353720	主持人:「對,沒錯,這個我同意。做這些事情,我覺得其實比寫一篇paper要重要很多。」
4353720	4360720	主持人:「寫一篇paper是很重要的,因為有不同的面向。同意,對,沒錯。」
4360720	4373620	主持人:「但是現在我覺得好像沒有一個實質的feedback,沒有一個實質的reward,我覺得會讓很多人覺得做這些事情很麻煩。」
4373640	4393740	主持人:「我覺得這又是另外一個非常有趣的課題。在美國,我覺得類似的聲音從這幾年開始,可能大家更左派了吧,我也不確定,但是大家就會開始想說,這些在研究上面很基礎的事情,我們要怎麼增進?
4393740	4416900	主持人:「而且我們必須要想個辦法,讓真的在這些事情上面有貢獻的人,得到他們相對應的credit,就是要得到他們相對應的回饋。但是在臺灣,我就不知道有沒有這樣子的狀況了。」
4417580	4421580	主持人:「現在在討論的是工具的分享嗎?」
4422580	4451220	主持人:「譬如說,舉個例子來講,假設你今天是地球科學研究者,你的主要研究領域是設計的工具。那你可不可以從設計這個工具裡面得到相對應的……別人會不會認為你是一個非常厲害的地球科學研究者呢?跟那些一直在寫科學論文的人,有著高引用數,跟很多的期刊論文的人,你覺得哪一個人會比較厲害呢?」
4451260	4463220	傳統上的人可能會覺得,當然是寫科學論文的人會比較厲害。不過現在我看到,越來越多不同的聲音出現了。越來越多人會覺得,這其實就是把時間投資在不同的事情上面。
4464220	4478800	在以這個角度去考慮,那些專門在做工具開發的人,他們的貢獻其實不亞於那些有很多的publication的人。但問題就是,我們要怎麼從制度面去反映這件事情。
4478800	4501280	因爲以往的傳統上來講,譬如說在審一個科研計劃的時候,他們就會去看提案者那個PI,他有多少的論文,他每篇論文的學術名稱是怎樣。他們就不會去特地考慮到,這個人他可能是什麽什麽東西的開發者之類的。
4502000	4517100	最近越來越多的討論就是,我們是不是要去重新審視,只用文章的影響力去評斷學術成就的方法。
4518100	4537100	現在是不是有越來越多的,尤其是比較高影響力的期刊,會跟工具的開放綁在一起。他們會鼓勵說,你要把研究過程使用到的程式碼跟資料要完全公開,讓別人可以去複製跟審視你的研究結果。
4537100	4558220	是的。我的感覺是,在地球科學上面,現在每一家出版商的速度不太一樣。像是我剛剛說的AGU,其實我覺得它就走在時代尖端了。他們現在基本上就是已經要求,你所有的研究資料、程式碼都必須公開。
4558340	4575720	但是有一些比較老的期刊,譬如說像是很大的那一間Elsevier,他們就隨便。所以,哎呀,有人說話了,AGU就是一群很做的人。沒錯,AGU可能就是一群很做的人。
4576720	4603720	總之我覺得,不同的期刊,他們現在對開放科學這個議題有不同的反應速度。Elsevier很慢,AGU可能稍微快一點。我的感覺是,EGU其實也蠻快的。EGU是歐洲地球科學聯盟的簡稱,他們有一些期刊。他們其實也是花很多心力在這上面。
4604720	4632720	有一些期刊,他們的宗旨就是專門促進地球科學上面的各種communication,就是各種不同的交流。這上面找到一些很有趣的,譬如說,不久之前才從那個期刊裡面看到,現在Twitter可以怎麼樣地促進地球科學跟社群的連結,然後可以怎麼樣幫助你進行跨國的研究,然後發表出來。
4633220	4638720	像這些東西,我個人覺得都很有趣,跟工具沒有什麼關係就是了。
4644720	4658720	主持人:"那像你們的實驗室是怎麼拿funding的?你們funding的proposal是說我們要做這個工具嗎?還是你們實際上有說我們要做地科裡面的哪些事情?"
4659720	4662720	劉仲敬:"這是一個非常好的問題。我貼一個連結給您。
4662720	4691720	在美國的地科領域有一個社群叫做EarthCube,或是你可以把它想像成是美國國科會NSF底下的一個組織。
4693720	4711720	你可以去看一下他們在幹嘛。他們簡單來講就是,作為一個組織,然後跟NSF申請部分的經費,然後他們再把這些經費,他們再邀請其他人投計劃到他們的組織底下。
4712720	4733720	這些計劃會比較跟資料、工具和研究這三個領域的整合,有相關的研究計劃,然後他們再審這些計劃,再撥錢給下去。所以有點像是以間接的方式,透過EarthCube向NSF申請經費。
4734720	4740720	主持人:"OK,但是你的意思是說這個EarthCube它的經費不完全來自於NSF?"
4741720	4763720	主持人:"它的經費,我想現在的經費應該完全來自於NSF。應該是,我看一下,他們在下面,他們在網站最下面有一個連結。這個EarthCube的組織其實是透過NSF的其中一個計劃,你可以看到那個計劃數字,去成立的。
4763720	4792720	所以他們現在是用這種方式去運作,不過其實還是有很多問題。有一個問題是我個人覺得很有趣,剛好前幾天EarthCube有一個會員meeting,他們在討論說,假設今天有一個資料儲存庫,它需要錢來維護,那麼傳統申請這種研究補助的方法,要怎麼樣才能夠一直地撥錢去維護這個資料儲存庫?"
4794720	4807720	那如果我們真的一直遵循傳統方法一定不行,一定會有資金不足、計劃斷掉的時候,我個人覺得在NSF的討論裡面,他們並沒有一個非常好的答案。
4807720	4830720	因為不管是任何的答案,都需要很多人的努力,尤其是那些政府部門,他們能不能把這些概念去把它改變起來。就是有某一些東西,它就是需要很長時間去投資,你才能夠實行,而不是像以科研計劃為主的那種短期,兩到三年之間的補助。
4831720	4837720	大概是這樣。所以其實問題還很多,我們都還在摸索。
4837720	4844720	我感謝有你們的摸索,我覺得確實是需要有人去做這樣的事情。
4867720	4890720	就是一個計劃,就是在某個年份之後,所有的NASA的資料都必須要符合Open Science的標準,包括以前的資料跟現在在蒐集的資料都必須要符合。這是需要非常大量的人心力去做的,不過他們非常有決心。
4897720	4900720	這邊的聽眾還有沒有問題?
4928720	4933720	在Python使用者的聚會裡面,會定期使用這種東西來做demo,因為其實會蠻方便的。
4933720	4959720	可是我想要知道的是說,你覺得在這種尤其是在科學研究上面,你使用Jupyter去當作你的工具,跟你直接拿比方說Run Python Script Code,然後用Metaplot或者是相關的其他的套件來去把它做製圖這件事,就是這樣子的比較上來說,你覺得它的優勢到底是什麼?
4959720	4980720	是比較有互動性嗎?因為互動性其實也有其他工具可以再用嘛。我一直都比較沒有一個可以說服我說為什麼我們要改用Jupyter,然後不直接用Python Script,就直接用Command Line去Run,然後我們再去把圖表做PaperLinux的一個比較好的理由,這是第一個問題。
4980720	5009720	第二個問題的話是關於資料結構的問題,因為你中間有提到說,有另外一個就是在你們D科技現在有在用的資料結構叫做X-Array,然後我自己是知道HDF5這個資料格式,因為我現在在做的東西是比較偏地震科學的東西,然後我們有在收集資料的時候確實會有那種就是尺寸尺度也很大,然後時間的尺寸也很大,
5011720	5034720	尺度也很大,所以資料結構就很大的問題,那HDF5確實非常有效率這樣。那我就想請問說,呃,你們在使用X-Array這樣的資料格式的時候,它跟HDF5來說有什麼優勢嗎?不然為什麼在看起來在D科領域上面HDF5也用了好一段時間,看起來也像是你們常使用習慣的格式,那為什麼會改用X-Array這樣子?
5035720	5062720	然後,呃,算是回答剛才,呃,那個釋安的問題說,如果你想要推廣工具的話,該怎麼推廣工具?就是說服別人這東西真的很快,他就會用了,因為我就是被說服的一個,因為原本,原本是我們,我們研究,我們研究團隊裡面,原本當時我老闆要我就是幫忙找,呃,適合使用的Database,那以前我用過的Database就C-Core,所以原本我是先講了C-Core,
5062720	5090720	但後來就發現在我們研究群組裡面蠻多人都是用HDF5,那我原本想說怎麼可能就是,呃,沒有聽過C-Core,然後C-Core明明就這麼快這樣子,為什麼會用HDF5?那實際使用過後才發現HDF5確實是有稍微快一點,然後也有它的優勢,所以我就被說服了,所以我說如果要推廣的話,就是讓他知道有多快這樣,就是一個,好,那所以就是上面兩個問題就還蠻麻煩那個懷姐來回答這樣。
5090720	5103720	好,OK,呃,我統整一下,這第一個問題是想要問說Jupyter比起Python Script有哪些優勢,對吧?然後第二個問題是,呃,第二個問題是什麼?是。
5103720	5132720	這個問題是資料結構,為什麼,為什麼有一個X-Array? X-Array,OK,X-Array VS HDF5,好,OK,呃,有關於第一個問題,嗯,我有兩個不同版本的答案,第一個答案比較簡單,第一個答案是,呃,Jupyter Notebook比起Python Script,它可以涵蓋更多的文檔,呃,不是,在,在你寫Python Script的時候。
5134720	5154720	你只能把,你只能把文檔放在註解裡面,那但是,而且,而且文檔的格式只能是純文字,它不能參加一些,譬如說Latex或是圖片,但是呢,在Jupyter Notebook裡面,你的文檔的區塊,你可以。
5155720	5168720	你可以放上,你可以用不同的Markdown格式去寫,然後你可以,你可以用Latex來標你的,呃,數學式子,你甚至還可以插入圖片,插入影片,插入不同的連結。
5169720	5195720	那這些額外的東西呢,都可以以更好的方式來解釋,為什麼你要在你的程式碼裡面那麼做,或是,或是當你的程式碼出了一張圖之後,你可以直接在下面解釋說,哎,剛這個圖裡面到底發生了什麼事情?那這個好處就是,嗯,在程式碼區塊底下,Jupyter Notebook會直接顯示出結果,那這也是一般Python Script做不到的事情。
5196720	5212720	所以呢,呃,簡單來講就是,Jupyter Notebook可以讓你做到,呃,在,在寫你的程式碼的時候,可以讓你把你所有的解釋Narration給涵蓋進去。
5213720	5229720	這是簡單的答案。那複雜的答案呢,就是我們希望透過Jupyter Notebook來改變,呃,我們之後寫學術文章的標準,尤其是在,呃,本文或是在那個,呃,supplemental information那裡。
5229720	5247720	那我剛剛有一個東西,應該有看到,就是,呃,我最近上傳了一個,呃,文章,那這邊文章還在寫嘛,還沒有,還沒有真的發表出去,不過它的那個,呃,supplemental information其實就是,其實就是很多個Notebook。
5247720	5259720	在以前呢,在還沒有Notebook的時代,如果你真的要上傳程式碼給別人看,那就是會有一個程式碼,然後一個文檔,然後可能還加上很多的那個程式碼run出來的圖片。
5259720	5276720	但是現在我們可以把它全部集合在一個文檔裡面,然後慢慢安排,讓讀者們能夠更確切的了解這些,這些東西裡面到底是發生什麼事,那別人也可以更容易順著你的脈絡去,呃,去執行的,去重新的結果。
5277720	5305720	好,這是第一個問題。那第二個問題呢,是,呃,在我來看,HDF5跟X-Ray其實不算是互相衝突的兩個套件。呃,HDF5,呃,它的優勢是,呃,儲存,呃,跟讀取,就是,它本身就是以分層的結構來儲存的資料,所以讀取很快。
5305720	5333720	那麼,你要隨時的抽出其中的幾層資料也很快。那麼,X-Ray呢,它其實是在,呃,資料儲存上面進行優化,尤其是在平行處理上面。如果你是用X-Ray來讀取一個陣列的話,那麼,呃,這個陣列可以很簡單被切成好幾個不同的小陣列,那每個陣列就直接去送進去不同的那個,呃,不同的平行處理的那個worker,然後就直接開始平行處理了。
5334220	5341720	所以,我會說,它們兩個其實在資料分析裡面有不同的趣味,不算是互相衝突的套件。
5342720	5355720	主持人:「OK,呃,不好意思,因為我剛剛手機有一個那個通知,所以剛剛打斷了你一段話。那我想,為什麼我想,因為我剛剛聽到有人說,所以你覺得X-Ray最主要是因為它可以平行運算,在這方面它就優於HTML5,是這樣嗎?」
5356720	5360720	呃,我沒有說它是優於,我說它們在處理的是不同的事情。
5360720	5371720	主持人:「哦,OK,好,因為HTML5其實也還是可以利用平行運算的方式來去讀取裡面的資料,那這樣子講起來是不是就差異性就更小了一點?」
5372720	5377720	沒有,X-Ray處理的資料結構就只有Array。
5377720	5381720	主持人:「哦,OK,哦,懂了,好,了解。」
5381720	5386720	但是它對Array這個資料結構做了非常非常多的優化。
5386720	5388720	主持人:「OK。」
5388720	5395720	所以,呃,對啊,所以我還是覺得它們其實是不同的兩個面向的東西。你不會聽到說有人在X-Ray裡面放一大堆metadata吧?
5395720	5399720	主持人:「哦,懂,懂,OK,好,了解,好,感謝感謝。」
5399720	5401720	請稍等。
5430720	5440720	呃,是的,呃,它是一個自動化的流程,直接從那個,它的那個GitHub轉成適合閱讀的版本。
5440720	5445720	哦,我可以分享一下我的螢幕嗎?要解,要解釋這個問題,有可能需要螢幕。
5447720	5453720	好,那這是我的,確認一下我的GitHub在哪裡。
5454720	5462720	好,假設這個,假設這裡有一個GitHub的儲存庫。
5462720	5473720	那麼如果我要自動的把這個儲存庫轉換成GitHub的頁面的話,那麼,哦,我是透過一個GitHub Action的腳本做的。
5474720	5478720	所以呢,到這邊,Actions,你就可以看到我做了什麼事情。
5478720	5487720	那它就會有一些,哦,東西,你就會看到每次提交的時候,那會有一個GitHub Action在這邊執行。
5487720	5500720	那這個Action在做的其實就是自動的把放在JupyterBook資料夾裡面的東西呢,給編譯成你看到的那個GitHub的頁面。
5501720	5503720	那你有興趣的話,可以再問我怎麼做的。
5503720	5513720	只不過,如果你想要知道這個Action裡面到底是什麼的話,這裡有一個資料夾叫做.GitHub/.workflows。
5513720	5515720	點進去,你可以看到這邊有一個Build。
5515720	5521720	這裡面大概就是你要讓這個GitHub Action執行所需要的設定。
5523720	5525720	大概就是這樣,簡單的講起來大概就是這樣。
5525720	5533720	所以你需要有這個Workflows,然後你需要有一個資料夾,就是告訴這個Workflows要怎麼編排你的那個文檔。
5533720	5535720	那就可以了。
5537720	5543720	我覺得這個東西感覺是所有領域,很多領域都會有興趣的事情。
5543720	5546720	看起來在做的大家應該也是蠻有興趣的。
5547720	5555720	我會建議你要不要,譬如說我們邀請你來暑假開個workshop之類的,來教大家怎麼做這些事情。
5555720	5557720	呃,可以啊可以啊,當然可以。
5559720	5563720	如果大家有興趣,非常樂意,就是分享一下目前的做法。
5566720	5573720	然後可能還有其他幾件事情也可以,反正我可能之後再跟你聯絡好了。
5573720	5574720	好,沒問題沒問題。
5576720	5585720	OK,這邊還有沒有問題呢?
5588720	5591720	Jack說謝謝分享,我也是謝謝分享。
5591720	5596720	謝謝大家,謝謝大家,謝謝大家在這邊待到最後一刻,非常感謝,非常感謝。
5596720	5598720	因為實在是很有趣。
5599720	5603720	好,那今天我們的演講就到這邊結束。
5603720	5608720	非常謝謝懷傑,那我們之後再約囉。
5608720	5610720	好,沒問題,之後再約。
5610720	5618720	那大家有興趣,如果有更多問題想要聯絡我,我在這邊貼上我的email好了,快速的。
5618720	5620720	好,感謝。
5620720	5623720	這樣子你們就可以知道怎麼聯絡到我。
5623720	5625720	然後我把錄影停掉。
