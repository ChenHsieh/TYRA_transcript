今天是2022年10月8號的Tyra Talk,我們今天邀請到的講者是鄭懷傑,他要講的題目是Jupiter Hub,迷你工作房,開放科學的雲端基地。
讓我稍微介紹一下懷傑的背景。懷傑是在2010和2013年的時候在台大分別取得學士和碩士學位,
接下來在2015年前往康奈爾大學就攻讀地球與大氣科學的博士。
在去年2021年加入了加州伯克萊大學統計系的研究團隊,現在是博士後研究員的身份在執行Jupiter meets the Earth的計畫。
今天他會教我們認識Jupiter Hub,他也有提到參加這個演講不需要任何背景知識和程式設計的技巧,
不過如果要在演講時同步存取Jupiter的資源,必須要準備Google或者是Microsoft的帳號,然後以進行第三方登錄,所以大家可以先準備一下。
我的介紹就到這邊,時間就交給懷傑了,可以嗎?
懷傑議員 沒問題,謝謝施安的介紹。歡迎大家,也非常榮幸能夠再次邀請到Tara進行演講。
我上次的演講是在今年1月,稍微跟各位分享一下我現在在UC Berkeley做的事情。
這一次,與其說是教,不如說是分享。
這一次,我想把重點放在Jupiter Hub這個工具上面。
我是想用迷你工作坊的方式來跟各位分享一下Jupiter Hub到底是什麼,以及為什麼我們叫他開放科學的雲端基地,然後他又可以怎麼樣的轉換我們對於開放科學的一些實踐的方法。
OK,開始囉。
那麼,剛才施安有稍微介紹一下我在哪,目前是在哪邊,那我就稍微再補充一下。
那我本身的專業領域是地球科學,或是更精確地說是地球物理、遙測、冰雪圈科學跟行星科學。
目前我現在大部分在做的研究是使用豐富的衛星遙測資料,再加上模型分析,監測並了解冰雪圈的變化。
舉個例子,你可以看到這邊有一個衛星,它在繞著地球上面,然後會發射出綠色的雷射光,然後打到地表之後,這個衛星會再接收反射的雷射光。
然後根據這個時間再乘上光速,就可以算出來衛星跟地表的距離,再換算成地表的高度。
如果我們可以對一個冰河重複地做這件事情,我們就可以獲得一個冰河隨著時間經過表面的高度,或是你也可以說冰的厚度的變化。
然後我們再利用一些物理的模型去探討分析說,到底是有什麼因素影響了這個冰河的厚度變化。
聽起來蠻酷的,我自己也很喜歡。
不過其實大部分的學術活動,我現在在從事大部分的學術活動,我想跟各位的應該都是差不多。
就是必須要進行研究,然後在適當的時候解釋你自己的研究,給其他人聽,包括同行的科學家,以及不同領域的人士。
除了研究之外,我們會有教學活動,就是我們會寫一些軟體給其他人用,這些我都有稍微做。
這邊放的幾張圖,就是我在過去幾年做過的一些事情,包括開發了一個叫做CARS的軟體在這邊。
我也寫了一個叫做GMT教學手冊的網站,簡單來講就是教別人怎麼用GMT的軟體畫圖。
右下角這張圖則是在我2019年發表的一篇論文裡面,我那個時候跟論文的出版商合作了一下,討論說要怎麼樣做一些材料,可以讓我們能夠更快速、更有效率地去傳達論文的一些新的知識,
然後做成一個新聞稿。
回到我們今天的主題,我們今天要講的是JupyterHub。JupyterHub要如何改變這些我們每日進行的學術活動呢?
在講JupyterHub之前,先稍微提一下Jupyter是什麼樣子的概念。
如果要用一句話去解釋Jupyter是什麼,我會說Jupyter是由開放的資料科學工具組成的生態系統,以及使用它的人組成的社群。
這邊可能有一些專業的術語,所以我再稍微解釋多一點。
這邊所謂的工具是指,如果你今天要完成一件事情,你使用的東西。
舉例來說,Photoshop就是一個影像編輯的工具。
Matplotlib則是在Python底下的一個用來進行科學繪圖的工具,有點像是這樣子。
至於開放這個詞,倒是稍微比較模糊一點,因為老實說,有很多不同的面向都會被我們考慮成是開放的。
舉例來說,它可以指說,你使用的工具,它的原始碼可能是公開的,任何人都可以修改。
另外一方面的開放,有可能指的是,你使用的合作方式可以讓盡可能多的人參與,然後貢獻跟討論。
不管怎麼說,開放這個詞的中心概念就是不要排外,就是能夠讓盡可能多的人參與到你現在在做的這件事情上面。
所以我們會有很多的工具,有些工具是軟體,有些工具可能是硬體,甚至於有些工具是專門描述軟硬體之間怎麼樣結合交互作用的結構。
這些工具跟一般工具不太一樣,你想想,如果放在一個工具下面的工具,可能螺絲起子是用來鎖螺絲,然後老虎鉗可能就是用來扭鐵絲,它們各自都是各自獨立的。
在資料科學裡面,我們所謂的工具,它們時常會互相的依賴。
舉例來說,如果你今天要使用Mathplotlib,你就必須要先安裝Python。
安裝完Python之後,你才可以安裝Mathplotlib,它才會作用。
如果你去把不同的工具之間的相互依賴性畫出來,你就會看到一張很像網路的圖,然後會有點像是那種實物鏈的感覺。
所以我們就會傾向於把這整個工具以及它們之間的相互依賴關係稱作一個生態系統。
像Jupyter這樣子的生態系統,其實它的年紀也沒有很長。
整個開放科學的概念其實到目前為止也才不過出現了我會說二十年,可能各位的體感更短,因為剛開始的前十年都是在草創階段,並不是很多人真的都完全被暴露在這種概念裡面。
其中一個很有可能你接受到這個暴露的時間點,我猜是2015年,因為那個時候LIGO發表了人類史上第一次的重力波觀測事件,震驚了全球。
可能他們得到了2017還是2018諾貝爾獎。
LIGO這個重力波觀測天文台他們做的當然不止於此,當然他們寫文章,然後蓋天文台非常厲害。
不過他們還有一個開放科學的部門,這個部門把他們所有的重力波觀測的事件的資料都整理好,然後發佈到網上。
每個人只要去他們的這個網站,點進去他們的連結,就可以重新執行這個程式碼,然後畫出跟他們的論文裡面一模一樣的圖。
我等一下稍後會再分享一下我的投影片,所以你們也可以點進去這個連結看一下到底是什麼東西。
那在2015年之後或許如果你們有在用推特,你們或許會看到在推特上面越來越多人開始在歌頌,歌頌開放科學多棒,可以讓我做到很多以前做不到的事情。
比如說像這一位,他就在火車上面用他的手機分析SIMIP6的資料。如果你們不知道SIMIP6是什麼的話,它是一個全球性的氣候模擬資料庫,它每天都會產生數以TBG的資料,資料量非常的龐大。
所以能夠在火車上面用智慧型手機去分析這些資料是非常不容易的一件事情。
更有甚者,NASA已經宣布了明年,也就是2023年,是他們的開放科學元年。他們有一個非常大的企劃叫做TOPS,Transform to Open Science。
我們的目標就是從明年開始,花大概四到五年的時間,把他們現在管理跟發布資料的方式全部大翻新。
明年之後,他們就會採用全新一套的模式,就是更開放科學的模式去管理、出版、發表他們的資料工作流程跟研究結果。
所以這已經是一個趨勢,我們可以看到這個趨勢大家都在討論。當然也是拜科技的發展所賜,我們現在採用各種不同的方法去實踐開放科學的方式。
這邊就提供一個例子。我們知道開放科學其實是一個非常籠統的詞,它有很多不同的方式去實踐它,所以這邊我只提供一個例子。
各位可以看這些圖,我們就假設有一個研究人員叫做Jim,他剛寫了一篇很酷的論文,然後剛發表。
他想要更多,他想要說,我想要讓這個論文能夠被所有人,同行也好,其他人士也好,他想要讓所有的人都能夠看到他的論文,然後檢查裡面有沒有錯誤,甚至是重新再現他的實驗。
甚至是改進他在論文裡面做出的一些計算。他可以怎麼做呢?
這裡有一個方法,就是他可以使用一個叫做Jupyter Notebook的東西,在這個檔案裡面他可以放上所有研究的細節,包括敘述性的文字,包括程式碼,包括許多的互動性或是非互動性的圖表,以及更多更多的背景資源,像是原始資料,多媒體,還有軟體等等。
他弄好了這個Jupyter Notebook之後,他把它放到一個網路上的儲存庫,讓大家都可以去讀取。比較流行的儲存庫就像是GitHub,他就可以把它放到GitHub上面,讓大家都可以看得到。
放上去之後,他再多做一些事情,讓這個儲存庫,這裡有個術語叫做Finder Ready。
簡單來講就是提供一些額外的資訊,比如說包括,如果要執行這個儲存庫裡面的Notebook或是程式碼,你需要什麼樣子的軟體套件,你是需要Python,還是需要R,還是需要Julia或是MATLAB,提供這些背景資訊,然後做成一份主態設定的檔案。
然後再妥善地安排裡面的資料以及Notebook擺放的位置,以及他們的結構。
當這些東西都準備好之後,我們就可以使用一個叫做Docker的工具,把這整個儲存庫做成一個獨立的術語叫做影像。
不過他其實就是有點像是一個迷你的執行環境,在這個環境裡面你可以運用相同的環境去執行這些程式碼。
那現在你只要把這個Docker的影像分送給全球其他人,那其他人就可以完美地重現你的研究,然後也不用額外安裝什麼一堆有的沒的軟體。
那麼以上就是其中一個做開放科學的例子,就是讓大家可以更快速地去存取你自己的研究材料。
那麼JupyterHub是怎麼貢獻到資料科學的流程裡面呢?
如果要用一句話去解釋JupyterHub是什麼,我會說JupyterHub就是在共享的計算裝置上面提供便利的資料科學環境的一個工具。
什麼是共享的計算裝置呢?簡單來講,假設你們的實驗室有一台電腦,然後大家都可以登入,然後在上面做一些事情,像是打字、寫文章、處理資料、寫論文等等。
那這一台你可以登入的伺服器,並且可以存取裡面的CPU或是GPU的資源的機器,就叫做共享的計算裝置。
那傳統上來講,我猜你們之中部分有些人可能已經用過了,譬如說SSH登入到一個遠端的伺服器,然後在上面做某些事情。
那當然你必須要安裝很多東西,你才可以真正去做到你想要做的,在伺服器上面想要做的事情。
那JupyterHub就是幫你免除這些步驟。
它提供了一些預先設定好的配置,讓你可以直接的在不需要多做什麼事情,就可以直接的前往那個伺服器,然後在那邊開始進行你的資料科學分析。
那這邊一張圖呢,簡單介紹了一下JupyterHub它的概念。
你可以想像這邊有很多人,他們現在都要存取這樣子的一台機器,在機器上面有JupyterHub在運行。
那每個人呢,首先要先通過一個驗證。
那他們成功登入這台機器的時候,JupyterHub會提供幾種標準的介面給他們選擇。
譬如說像是Jupyter Notebook的介面,那他們就可以開始藉由這個介面來存取這台機器裡面的計算資源。
值得注意的是計算資源本身呢,跟Jupyter是分開的。
JupyterHub同時可以準備好幾個不同的計算的環境,譬如說它可以準備一個Python的環境,然後如果我需要的話,我就登入JupyterHub,然後叫出這個Python的環境,說我這次要用Python,就把它抓過來。
那同時呢,JupyterHub也可以準備另外一個環境,是完全建立在不同的工具上面,那別人如果要用,也可以隨時再把它叫出來。
那所以JupyterHub就是把這樣子的一個工作結構一層一層拆分,讓整個開放科學以及合作變得容易。
那這邊再次提供另外一個例子,來跟各位解釋一下JupyterHub到底是怎麼達到我們想要的目標,就是環境共享的目標。
假設呢,有一個教授叫做John,他現在在領導一個大型的研究計劃。
那這個大型的研究計劃呢,他已經預先配置好他想要用的軟體了,譬如說他可能想要用Python,然後想要用裡面很多不同的套件,他都先裝好了。
他就說,哇,這個就是我要的環境。那他要怎麼樣把這個環境妥善地告訴其他人說,你們也一起來用這個環境呢?
那我們提供的方法就是,他可以跟學校的IT人員合作。
他送一份有點像是申請單這樣子,然後給學校的IT人員說,這是我想要設計的環境,我想要提供出去的環境。
那這些環境就會有一個主態設定檔,也就是Configuration File的方式給那個IT的資訊人員。
那他收到這份檔案之後呢,他就會參照裡面的設定,然後開啟一個叫做Workspace Manager的東西。
在我們這個例子裡面,Workspace Manager就是JupyterHub,所以我就把它叫做JupyterHub。
所以呢,這個IT資訊人員就會幫他開啟一個JupyterHub,在學校的電腦裡面。
那麼JupyterHub會讀取提供的主態檔案,然後來自動地配置你需要的工作環境,包括Python,包括Python筆下各個套件。
你可能還需要其他的一兵幫你配置好。
然後呢,最後這個JupyterHub就會在學校的雲端機器伺服器上面運行。
那他配置好之後會產生一個有點像是Docker的檔案。
有點像是一個,如果我講太多術語聽不懂的話,歡迎最後再隨時問我。
會產生一個Docker的檔案,以及一個URL網址。
那這樣就可以拿到這個網址之後,就可以把它傳給任何想要跟他合作的人,包括他的學生,包括他的合作者。
那麼點開這個網址就可以連到JupyterHub的登入頁面。
然後只要能夠驗證他們的身份登入以後,他們就可以存取運行在學校雲端的JupyterHub。
然後裡面所有的環境配置都已經準備就緒,不需要再安裝任何額外的東西。
這大概就是一個環境共享的概念。
好,那麼講解就稍微到這邊,因為這是Mini工作坊,所以接下來我們就要實際的嘗試一下JupyterHub到底是個什麼東西。
我們今天要的JupyterHub是一個叫做Calisto的組織設置的。
Calisto是由兩個在加拿大的非營利組織共同發行的企劃。
他們的企劃的主要目標是提供在加拿大的國中小的老師足夠的資源,可以讓他們在課堂上面直接教學生怎麼樣開始進行資料科學,以及各種不同的教學的模組。
他們自己的JupyterHub叫做CalistoHub,這邊我說明一下JupyterHub是工具的名字。
利用這個工具搭出來的那個東西,在雲端上運行的那個東西,我們通常會叫做Hub。
所以CalistoHub,就是Calisto這個組織,他們用JupyterHub搭起來的一個你可以存取的線上雲端的資源。
所以歡迎各位前往,我先把這個連結給你們。
OK,首先呢,這是我的投影片連結。
然後,這個是Calisto他們的網址,歡迎各位前往這個網址。
那我就持續的分享我的螢幕。
好,各位可以看到我現在正在Calisto的頁面上面了嗎?
有人可以給我一個聲音嗎?
哦,可以可以。
好,感謝感謝感謝。
好,那右上角這個部分會有一個CalistoHub的標誌,就點進去。
點進去之後呢,你會看到說,你可以登入。
然後,他會問你說要Google還是Microsoft,那就看各位有什麼就選什麼。
那我是有Google,那這是用我自己的Berkeley的帳戶,為大家示範一下。
登入的時候,大家會看到這個畫面,就是在準備中。
哦,我要登入的不是Berkeley。
重新來。
用我自己的Gmail來登入。
登入完成。
登入完成。
登入完成。
登入完成。
登入完成。
登入完成。
好,那麼,登入之後呢,你會看到有點像是這樣子的一個頁面。
這個頁面呢,就是JupyterHub提供使用者的標準介面的其中之一。
我們通常叫做Notebook的介面。
大家到這裡還OK嗎?需要等一下嗎?
我這邊OK。
那,話說BlueJeans可以舉手或是什麼之類的嗎?
能夠有辦法讓我從這邊看到說,大家需要多一點時間或怎樣的。
它是可以舉手,不過我不確定會發生什麼事情。
我先把看聊天視窗拉出來好了。
這樣可以用聊天的方式讓我知道我們現在走到哪裡。
可是我不知道怎麼拉出來,我對BlueJeans好不熟。
好,不管怎麼樣,那我們就先繼續好了。
好,那我們就先繼續好了。
好,不管怎麼樣,我們就先繼續好了。
好,不管怎麼樣,我們就先繼續好了。
好,不管怎麼樣,我們就先繼續好了。
好,當你看到這個頁面的時候,表示你已經成功的登入了JupyterHub。
你已經成功登入了他們的CalistaHub,然後你已經開始在使用他們提供的計算資源。
這邊會有一個在檔案列表上面,你會看到有一個檔案叫做Getting Started,就點進去。
然後你會看到類似像這樣子的頁面。
這個就是在Notebook介面之下呈現Jupyter Notebook的樣子。
你會看到這其實整個就是一個Notebook的文件。
它看起來非常繽紛,但實際上如果你點兩下,在每個區塊點兩下,你會發現他們的原始的資訊。
資訊啊,不是這個。
原始的資訊其實就是一些文字。
這些文字是用markdown的格式撰寫的。
所以在編輯模式的時候你可以隨意的編輯,譬如說像是在這個底下打blah blah。
然後按run的時候,它就會重新的把這個變成顯示的模式。
就看到底下出現blah blah blah。
那我剛剛說過這是一個Jupyter Notebook,所以你也可以在直接上面進行某種程度的計算。
譬如說我們可以按加號來新增幾個單元的格子,在這個Notebook的底下新增幾個單元的格子。
那我們可以隨便點一個單元的格子,在這上面打,我想想看,我們可以打Hello World。
你在右上角可以看到現在這個Notebook使用的核心是什麼。
那這邊它寫的是Python 3,也就是目前如果你在這邊上面打程式碼,按下執行的時候,Notebook就會用Python去執行這些程式碼。
舉個例子,A等於Hello World,然後print A。
打好之後呢,如果按一下執行,它就會用Python的方式去執行這段程式碼。
如果你今天想要增加更多的註解,你也可以把區塊的種類從code轉化成markdown,這樣子就可以在這邊打註解。
像是今天是Aira演講之類的,然後在run它就會變成在你的Notebook裡面敘述性的文字的部分。
那iPython Notebook我很喜歡的一個地方是,在敘述性文字的部分,the markdown是支援LaTeX的。
所以你可以在這邊打註解公式,譬如說我可以打隨便講一個為什麼,打什麼呢?
前前Q等於OK,乘上partial T,partial X,這是一個熱傳導的方程,然後就會出現一個方程式。
那如果你傳統在使用LaTeX的話,要這樣子混打其實很難,尤其是當你的文章裡面還有中文的時候。
傳統上來講,LaTeX非常難以處理中文的內容,但是在Jupyter Markdown裡面,因為它原生是支援UTF的,所以你可以把這兩件事情完美的混合在一起,非常的方便。
好,那目前為止還OK嗎?就暫停嗎?還是我們就繼續?
OK,我OK。大家有沒有什麼問題?
雖然可能有一件事情要麻煩你,因為我們沒辦法一直看聊天盒,所以如果聊天裡面有人提出問題的話,可以稍微打斷我嗎?
好,可以可以,我會。
感謝感謝,或是如果你看到有人舉手,也可以隨時打斷我。
好,我會幫你注意這些,你可以繼續。
好,那麼我們剛剛說過Jupyter Notebook跟核心這兩件事情是分開的,根據使用者的需求我們可以切換不同的核心。
所以呢,我們現在就來換個核心試試看,我們現在就不要Python了。
如果你把滑鼠移到上面的選單,然後選Kernel,然後呢,Kernel最底下有一個Change Kernel。
你會看到呢,在Calista Hub裡面提供了兩個核心,一個是Python,另外一個是R。
我們就試試看R。
哦,切換過去了,現在這個Jupyter Notebook在執行的是R而不是Python了。
如果我們再重新的執行剛剛的Hello World,run,它就,哦,這一段還是有用,因為R裡面也有這一段文字。
不過R本身的語法就像是這樣,這一段Python是行不通的。
大概是這樣,run,它就會以R的方式去執行這段程式。
那如果你在上面畫圖的話,譬如說,我們就快速的弄一個X,這是R的程式,所以如果你不懂的話,歡迎隨時再問我。
但現在呢,我要設定五個資料點,然後再把這五個資料點畫出來。
然後呢,我可以按一下Shift跟Enter,來執行這一段程式。
幾個逗號。
那它就會調用R裡面的繪圖函數庫,去把這東西畫出來。
那對於Python裡面的繪圖,套件也是差不多的。
那我們現在呢,再把這個kernel的核心,再把這個kernel換回來Python。
然後呢,我們再到底下來,來試試看,用Python畫。
Python的話呢,就要先輸入一些套件,譬如說像是,
我在這邊呢,就先調用matplotlib跟numpy出來幫我做事情。
然後呢,
大概像這樣,就可以畫一張sign的圖。
像這樣。
那你會看到這兩張圖,長相非常不一樣。
那某種程度上證明呢,它們其實是兩個不同的繪圖套件。
下面這個是R畫的,下面這個是Python畫的。
那麼,當然如果你想要的話,你也可以把這張圖存起來。
我們可以再多加一堂指令,plt.savefig。
那我們就叫它測試.png好了。
畫出來之後呢,重新執行之後,那,
測試.png就會出現在檔案列表裡面。
如果我們回去檔案列表,File,File,然後Open,
你就會回去剛才的那個檔案列表的畫面。
那你就會看到有一個新的檔案,叫做測試,它出現了。
你在這邊打開,就可以看到這張png檔。
那你也可以選取它,選取這個檔案列表,
然後選取這個檔案列表。
你在這邊打開,就可以看到這張png檔。
那你也可以選取它,然後再把它下載下來。
下載的按鈕呢,就是在,應該是在這裡,
哦,在這裡,在上面這一排的這個部分。
你就可以把它下載到你自己的電腦裡面。
那,以上的就是簡單的,就是Notebook的介面的操作方式。
你可以發現,我們真的已經在利用JupyterHub,
就是Calisto提供的運算資源,
去幫助你做一些科學分析的概念。
那當然它也有一些,它有配有傳統的伺服器的操作模式。
如果呢,你滑鼠移到這個,選單列上面的New,這裡有個New,按下去。
那裡面呢,你會看到有幾個選項。
那你可以開啟一個新的Notebook。
你也可以開啟其他種類的檔案。
這邊有一個檔案叫做,有一個類型叫做Terminal。
按下去之後呢,你就可以開啟一個傳統的終端機,
然後去操作你想要操作的事情,譬如說LOS啊,或是PWD啊,等等等等等等,
任何你想到的事情。
那這邊呢,我想要給各位看的是,列出所安裝的套件。
那這個指令需要等一下。
因為它是使用Conda這個套件版的軟體去安裝套件的,
那是軟體,有的時候會慢。
不過,看來還有一段時間。
不過,噢,出來了。
那你可以看到它真的已經是先預先裝好非常非常多的套件。
包括,以Python為例,因為Python比較熟。
以Python為例的話,你可以看到,這邊有Dask,平行預算的套件。
然後,譬如說這邊有Geopandas,是地理空間資料的套件。
然後,譬如說這邊還有HDF5,專門處理HDF檔的套件。
以及各種其他種類的套件。
當然還有MattePlotLib在這邊。
還有其他不同的視覺化套件,譬如說像是,我想它應該要裝Seaborn。
Seaborn在,大概在這邊。
那,科學分析比較常用的SciPy啦,或是NonPy的檔案也都有裝。
所以你可以看到,如果有一個人可以幫你預先裝好這些套件,
那你自己在剛起步的時候,你就不需要去花那麼多心力去裝套件,
然後還要處理那些互相依賴的問題。
有時候這些問題會大大的阻礙一個研究的進展。
好,那麼到這邊還OK嗎?
還OK的話,我們就要進入下一個階段。
我OK。
OK,OK。
好,那讓我們回到剛才的檔案列表。
這次檔案列表裡面呢,
我們剛說過這個檔案列表叫做Notebook Entry,
它是一個傳統的ChipTab介面。
那我想要跟各位介紹的是比較新的另外一個介面,叫做Lab。
存取的方法就是把這個Tree,把這個網址列的這個Tree砍掉,
換成Lab。
然後再輸入。
當你這麼做的時候呢,
你就會進入到ChipTab提供的另外一個介面,叫做Lab的介面。
如果你需要一點資訊的話,你可以回去看我們的投影片。
投影片後面幾章應該有步驟。
好,那在Lab的介面上面看起來跟剛才Notebook的介面的確有點不同。
最大的不同呢,是Lab的介面是由很多不同的小面板構成的。
譬如說像是左邊這個面板,
左邊現在我們看到是檔案瀏覽的面板。
有測試.png可以點兩下,
然後右邊這個部分就會顯示出測試.png的分頁這樣。
那當然,Getting Started,Notebook已經打開了。
你可以看裡面的資訊,都還在。
看我們的資訊都還在。
所以他們其實存取的是同樣一個伺服器,只不過是用不同的介面而已。
那在Lab的介面裡面,我們可以幹嘛呢?
你可以看到左上角有一個藍色的加號。
這個點下去會開啟啟動的分頁。
那這個啟動的分頁中,你可以選擇你想要啟動什麼樣子的內容。
你可以啟動一個Notebook,
以Python為內核的Notebook,或是以R為核心的Notebook。
或是你可以直接在這邊啟動中段機,
然後做跟剛才一樣的事情,LS之類的。
那我剛剛說過,Lab最大的賣點,
就是它是由不同的面板構成的視窗介面。
那這麼做的好處呢,就是有時候你可以讓圖表互相比較。
譬如說如果你剛剛回去剛才我們看到的iPython Notebook,
然後你移到最下面這張圖。
按右鍵的時候,按右鍵叫出選單的話,
你可以看到這裡面有很多選單。
其中有一個叫做Create New View for Output。
在這邊點一下。
那這張圖就會移動到一個新的面板,
然後就可以把它移來移去,
就像是很多現在很厲害的軟體一樣。
然後你就可以把它跟不同的圖片比較。
譬如說我可以重畫一個,把它改成Cosine。
重畫。
這個也比較。
因為這個跟這個是連在一起的。
但我可以把它換一個。
複製,然後再做一樣的事情。
但是這裡我要把它做Sine。
再畫一次。
然後就可以把這張圖片跟這張圖片比較。
之類之類。
那Jibbit Lab也支援了很多其他的,
不只是Notebook,還有很多其他檔案的顯示模式。
譬如說如果你按PNG檔,它就可以直接跳出PNG檔。
那如果你按CSV的話,
它也可以直接以圖表顯示的方式呈現CSV,等等等等。
而且呢,它還有一些更華麗的設定。
譬如說像是你看上面的,
如果你移動到上面的這些選單列表的話,
有一個選單叫做Settings。
進去。
第一個是Zing。
那這裡你可以選擇Jibbit Lab要是亮色系的配置還是暗色系的配置。
預設都是亮色系的配置。
那我本人比較喜歡暗色系,
所以我先把它切換到暗色系看看會發生什麼事情。
現在是暗色系了。
除此之外呢,你還可以進行更多的客製化。
譬如說呢,我們可以讓,
你可以看到如果打開Settings,
這邊還有一個Language。
不過目前呢,語言套件只有英文。
但是我們可以自己安裝中文的套件。
譬如說我們只要過去Terminal,
然後使用Pip,
來安裝這個套件叫什麼名字呢?
叫做Jibbit Lab Language Pack中文台灣之類的。
安裝。
然後它就開始安裝。
沒錯,你現在在一個叫做Calisto Hub的伺服器上面安裝你自己想要的套件。
安裝好之後呢,要重新整理這個Lab,
就移動到網址點再重新整理就可以了。
那整個Lab就會重新整理。
那麼,如果你這個時候再去Settings,
然後Language,
這邊應該就可以看到Chinese,中文台灣可以選擇。
進去呢?
然後再Reload。
就會出現中文繁體的Jibbit Lab。
可能沒有那麼完美,
你可以看到有一些並沒有翻譯的過來。
因為目前Jibbit Lab的翻譯專案呢,
是還在熱烈的進行中。
那也都是公開的專案,
所以如果各位有興趣貢獻的話,
再問我,我可以再把那個連結寄給你。
但是你也可以自己Google找到翻譯專案的連結。
好,那目前為止不知道各位有沒有什麼問題。
OK。
好像沒看到什麼問題。
太好了。
看來大家都非常的進入狀況。
我也不知道。
大家有跟著做嗎?
我這邊是有跟著做。
那也沒關係啦。
因為如果你們之後想要再重複的話,
你們可以參考我的投影片。
投影片裡面應該有一些細節,
說明一下要怎麼做這些事情。
那最後的一個部分呢,
我想要跟各位分享一下,
就是Hub它本身具備的一些功能。
所以如果我們前往這個選單,File,
然後倒數第二個,
你應該會看到Hub控制面板,
或是Hub Control Panel。
如果你沒有裝中文的話,
就是Hub Control Panel。
點進去,就會跳出一個Control Panel。
哇,好亮。
如果各位不介意的話,
我先關掉這個燈,
因為我們這裡要變晚上了。
馬上回來。
在這個Control Panel上面,
你可以看到,
你應該只能看到兩個選項。
一個選項是,
停止剛才的伺服器。
那我現在來看看。
我們就試著點點看這個點。
然後現在伺服器已經被停止了。
如果我們回去剛才的頁面,
你會看到,
Server Available Unreachable。
因為這個伺服器已經被停止了。
不過我們可以重新啟動。
所以我們可以直接在這邊按重新啟動,
或是回去剛才的分頁按Start My Server,
都可以,看你想要怎麼做。
就在這邊重新啟動好了。
啟動。
好,啟動完畢。
啟動完畢的預設介面,
會是Notebook介面。
但是你可以看到,
剛剛你產生出來的檔案都還在,
測試點PMG還在。
不過如果你切換到Lab的介面,
你應該會發現事情變得有點不太一樣。
來看看。
好,OK。
如果你點到選單,
你會發現剛剛安裝的中文不見了。
這是為什麼呢?
為什麼檔案還在,
但是中文套件不見了?
這邊我想利用觀察來解釋一下
JupyterHub本身的權限的設定。
如果你今天是身為JupyterHub的管理者,
你可以設定JupyterHub裡面的檔案或是結構,
哪些部分是不能被使用者更改的,
然後哪些部分是使用者可以更改,
但是當你結束這伺服器以後,
就會回溯。
剛才我們安裝的那個套件,
就是被回溯掉了。
如果你要再重新使用中文,
你必須要再重新安裝一次。
但是管理者也可以決定哪些部分
是使用者可以永遠地保存他們的檔案。
也就是說,
如果你只要把檔案產生在那些地方,
你就可以保存這些檔案,
然後每次重新啟動Hub的時候,
這些檔案就不會不見。
像是這個測試.png,
目前就是出現在這個位置。
所以你在這個位置進行的更動,
會一直保存在這個伺服器上面。
就我所知,
Calisto有一個時限,
就是如果你超過多久,
好像是幾十天還是怎樣子,
都沒有登入還是怎樣的話,
你的檔案就會被砍掉。
每一個Hub都有他們自己的規定。
詳細的話,
你可以去參考他們自己的設定是怎麼樣子。
好,
如果我們再回到Control Panel,
你會看到這邊有一個Token,
在左上角的這個選單這邊有一個Token。
點進去的話,
你應該可以看到一些看起來很複雜的東西。
那我這邊因為,
這邊大部分的東西是管理者需要用的,
但是我想要講的是底下的這個OAuth的Application。
TubeHub有跟OAuth相容的,
意味著說,
根據管理者他們自己的想法,
他們可以使用第三方的帳號資訊,
來作為進入TubeHub的驗證。
舉例來說,
List of Hub就是利用你的Google帳戶,
或是Microsoft的帳戶來驗證。
但是像我們的研究,
像我們自己團隊的TubeHub,
就是使用GitHub的帳號來進行第三方驗證。
那這麼做的好處就是,
管理者可以少掉非常非常多的時間,
在管理使用者以及他們的帳名。
因為你是把這個責任分散出去,
分散到第三方的團體。
那這麼做我個人覺得是不錯,
因為可以想像我們現在幾乎每一個研究人員,
都會有Google,
然後可能都會有GitHub。
如果你能夠使用這些帳戶,
直接登入GitHub,
那當然就是非常的方便。
好,大概就是這樣。
那我在投影片上面還會放上幾個螢幕截圖。
各位看一下。
如果今天這個GitHub是在一個大型的,
譬如說那種Google雲端,
或是Amazon雲端上面運行的話,
在啟動伺服器的時候,
有可能它會提供一個選項。
就是可能它會說,
這個伺服器需要幾個CPU啊,
你可以自己選擇,
你要開比較大的伺服器,
還是開比較小的伺服器。
那Kalisto因為它是一個免費的Hub,
所以它在這方面提供所有的使用者一個CPU,
也就是每一次只使用一個CPU去做事情。
那這個螢幕截圖就是從我自己研究室的Hub截圖下來,
你可以看到我們最多可以開到64個CPU。
事實上下面還有,
有64個CPU加上GPU的選項,
就是更豪華一點。
那另外一張截圖在這裡呢,
是只有Hub的管理員可以看得到的。
你可以看到說上面會有一些,
如果你今天是管理員的話,
你可以看到現在多少人在使用這個Hub,
哪些人是正在用的,
哪些人是很久沒用的。
你可以直接去停,
如果你發現有異常的使用,
你就可以直接把他們的Hub關掉,
這樣他們就沒辦法繼續用了。
之類之類的。
只是稍微給你們看一下管理員的介面。
好,因為一個小時好像快不到。
我自己有個問題。
一個小時快要到了,
所以我想先停一下,
看大家有沒有問題。
我自己有個問題,
就是這個Kalisto它原本,
如果身為一個User,
你應該要怎麼用它?
啊,問得好。
後面這裡應該有。
如果我們回去剛才的Hub,
你會看到在Getting Started,
這個Notebook裡面有幾個連結,
那麼這些連結都可以點。
譬如說我們可以點Preparation,
裡面的Kalisto Jupyter and Python Basics Notebook,
點進去,
然後這個Hub就會開始擷取,
他們存在GitHub上面的資源,
然後複製一份到Hub上面。
然後他們弄好之後呢,
你的Hub的空間就會多出一些東西。
然後這些東西就是你可以用來學習的資源。
好,出來了。
這個是剛剛擷取下來的新的Notebook,
然後這個Notebook就是在教你Python,
簡單來講。
然後有一個YouTube的Video先在這邊,
你可以看看,
像這樣就可以看。
然後底下有一些其他的東西,
你可以搭配的文字敘述,
然後執行這些程式碼,
然後來看一下會發生什麼事情。
還有一個影片,
不像很好看,不過改天再看。
所以它像是一個教學的…
它是一個教學Hub。
各種東西,有各種教學的網站這樣。
是的,它是一個教學的Hub。
那如果我們回去剛才的Lab介面,
你會看到按重新整理,
這裡有一個圓圈按重新整理的話,
你會看到出現了一個新的檔案,
出現一個新的資料夾。
點進去的話呢,
你可以看到裡面好多東西,
這就是你剛才下載下來的東西。
那裡面除了剛才那個Notebook,
還有很多其他的Notebook,
你可以參考。
總之就是一個規模還蠻龐大的資源,
就是提供給國中小老師,
讓他們進行資料科學的用法。
那你可以去看看他們到底做了哪些模組出來。
那除了以這種方法去瀏覽Calista提供的資源,
這裡應該還有一個,
Calista Learning Module。
點進去的話呢,
會連到他們的另外一個頁面,
就是這個。
接下來有很多Learning Modules,
所以如果你今天是老師,
你就可以說,
我今天想讓我的學生學哪一個Module,
你就點進去,click。
然後這個Module的內容,
就會直接被擷取到Jubed Hub,
然後再把這個Jubed Hub,
分享給你的學生們就可以了。
或是叫學生自己點,
這樣學生們就可以用他們的帳號,
然後直接執行放在下面的東西。
那這邊還有很多其他的Resources,
像我自己很喜歡的一個是,
他們有那個跟北美原住民合作的內容。
譬如說,點進去的話,
這邊有一個捕魚陷阱。
就是用資料分析,
來看放在哪邊的捕魚陷阱,
抓魚的效率是最好的。
他是一個Learning Module,
所以點進去之後,
他就會被擷取到你的Jubed Hub,
然後就開始做這些有趣的資料分析。
讀完了,出現了。
這邊有東西,我們來試試看,跑跑看。
就會出現一張地圖。
這是一個互動性的地圖,
就可以在這邊拖曳,然後放大縮小。
這是在Vancouver附近的捕魚場,之類之類。
所以Calisto本身提供非常多的教學資源,
來幫助你熟悉資料科學。
那當然對各位而言,
可能還有Jubed Hub是怎麼進行資料科學的。
看起來很酷。
那這些資料都是要經過Calisto這個組織嗎?
他們要認證嗎?
不然這些東西是怎麼決定要不要被放上去的?
Calisto是兩個組織合作的企劃。
兩個非營利組織NPO合作的企劃。
這兩個組織都有出團隊去維護Calisto。
所有的模組,就是這些Notebook,
都是他們寫的。
他們使用的資料,我想應該是從其他地方來的。
包括譬如說像是這個捕魚的資料,
我想是他們跟當地的部落合作,
然後輸入進來的。
除此之外,也有很多科學上的公開資料。
他們應該就是用那些公開資料去展示資料科學怎麼做。
了解,謝謝。
我其實還有最後一部分,
不過如果各位覺得很滿意,
我們可以到這邊就打住。
沒關係,我們可以繼續進行。
是嗎?
好,那麼如果各位覺得OK,
我就把剩下的影片也講一講好了。
那最後一個部分呢,
就是提供大家更多的一些資源。
那除了Calisto Hub之外呢,
還有很多其他的Hub都是存在的。
譬如說一個很常用的Hub的服務叫做Binder。
那這個Binder這個服務呢,
專門用在讓一個GitHub的儲存庫,
變成一個可以馬上被執行的Hub。
譬如說像是這一篇,
是我在去年發的一篇文章。
那它的補充資料就是一個GitHub Pages。
那你在這個GitHub Pages上面可以找到一個連結。
看看能不能切換到那個頁面。
這個GitHub頁面就是我剛發的那篇論文的補充資料。
那底下會有Binder的連結。
點進去就可以啟動一個東西叫做Binder。
那它會帶你到一個跟剛才我們看到的GitHub很像的一個地方。
那就可以再現我在這篇論文裡面分析的資料,
然後重做我在這篇論文裡面呈現的每張圖。
都有非常多的細節解釋這樣。
那這是Binder,就是另外一個用GitHub提供的服務。
長這樣。
那另外一個,這個是跟地球科學比較有關的,
叫做Pangeo Cloud。
是一個也算是半公開吧,
因為你只要是在做地球科學,
你就可以用他們的這個服務。
那就是註冊,然後他們審核通過之後,
就可以開始使用他們部署在Google Cloud跟Amazon上面的GitHub。
那就可以直接存取這兩家供應商的雲端計算的資源,很酷。
那當然還有Callisto,那這個我們剛剛講過,我們就不講了。
那如果你一直想,如果你覺得Callisto Learning Module有點雜的話,
或是你想要一個快速的我們推薦的學習資源,
這邊有兩個,你可以參考一下。
那你可以直接在剛才的Hub裡面進去終端機,
然後輸入這兩行之中的任何一行,你想要輸入哪一行都可以。
因為這兩行其實就是擷取某個GitHub上面的儲存庫,
然後把他們上面的內容全部都放到那個Hub上面。
譬如說呢,我們先用League來做參考,就複製,然後回到剛才的Hub,
然後開啟終端機,貼上,Ctrl-V貼上,
然後抓過來以後,你就可以看到在主資料夾,
就可以看到有出現一個Demo Jupyter Git,
然後點開裡面就有非常多的,看一下,應該是在,
那這裡有一個IP1V,這個就是可以執行的iPython Notebook,
然後其他的Notebook應該放在資料夾裡面,像是Intro Jupyter,
那就可以在裡面看到各種不同針對Jupyter工具的簡單介紹。
總之有非常非常多的學習資源在這邊,
那歡迎各位在隨時自己嘗試遊玩。
那最後兩三張投影片呢,我想要簡單解釋一下就是,
如果你真的對JupyterHub心動了,
然後你想要安裝,想要為自己的研究團隊,
為自己的小組,研究小組,安裝JupyterHub,
然後大家都可以用的話,你要怎麼做?
先說明一下JupyterHub提供了兩種標準的發行板,
一種叫做The Littlest JupyterHub,
這種發行板是專門供小團隊運作,
那種零到一百人之類的,之間的小團隊。
那它就是精簡化,簡單來講,
然後不用花太多時間心力,
就可以自己裝在你可能研究室的伺服器上面,
然後給你的同事或學生使用。
那另外一種JupyterHub發行板叫做JupyterHub on Kubernetes,
那這種發行板就是專門針對,
譬如說在那種大型雲端上面的安裝,
譬如說在Amazon啦,或是Microsoft Azure上面的JupyterHub安裝,
然後一次要給幾百幾千個人使用的,
或是裝在那種超級電腦上面的JupyterHub,
大家都要用的。
那麼你如果要安裝的話,
那就是選擇一種你覺得適合你的方式去安裝。
那即使是這樣子,你或許還是會覺得,
這其中的技術性能看似的太高了,
畢竟大部分的人都不是資訊專業,
裡面有很多細節,你可能不知道怎麼調整。
那我們當然也是看到這個困難,
所以大概在2019年的時候,
我們在Berkeley的Jupyter團隊,
其中的一部分的人,
就成立了一個非營利組織叫做2I2C,
或是The International Interactive Computing Collaboration,
那這個組織的宗旨呢,
這個非營利組織的宗旨,
就是提供各種不同的開放科學的基礎設施的服務,
那麼其中之一,目前發展最旺盛的服務呢,
就是提供研究團隊或是組織安裝他們的JupyterHub,
安裝並管理他們的JupyterHub。
他們目前大部分的資金來源是John Zuckerberg Initiative,
就是臉書的那個。
那不過他們也有接收到很多來自於其他的開放科學組織的資金。
我們剛才看到的Callisto跟PangeoHub,
這兩個Hub就是由2I2C來幫忙設置的。
但是Binder跟我們自己研究室的Hub,這不是。
我們自己研究室的Hub更華麗一點,
因為我們要測試很多東西。
我們的研究室的Hub大概長這樣,
可以稍微給你們看一下。
好像沒辦法直接開始。
看來需要等一下。
等一下有機會再來看好了。
那我們藉由2I2C呢,
想要達到的願景就是在未來的某一天,
作為一個研究人員,
你的所有的研究活動,所有的學術活動,
可以發生在雲端。
你自己的研究團隊是在雲端上面合作,
那你要存取HPC運算的資源,
就是用JupyterHub去登錄。
那學校機構本身可能也會有一個JupyterHub,
那當你今天要上課或是給演講的時候,
你可以直接使用他們Hub的資源,
來給別人,你想讓他們學習的資源。
來給別人,你想讓他們學習的東西。
那甚至呢,你今天如果去參加一個國際會議,
那這個國際會議本身可能也會有一個Hub,
然後讓會議的與會者可以同時登錄這個Hub,
在上面直接進行研究的交流,
以及學習新技能。
大概就是這樣,我今天大概就是這樣。
那最後最後我想說,
所有的開放科學的進展都絕對不是靠一己之力,
這之中有非常非常多的社群的參與。
那舉例來說,我今天能夠跟你們分享這個事情,
是必須要歸功於我們整個在Berkeley的研究團隊,
也就是Jupiter Meteors,
所以我把他們的人全部都放在這邊,
然後也稍微放了一下,
讓你們了解一下Jupiter Meteors這個計畫目前在做什麼。
非常感謝他們。
那最後呢,如果大家有什麼問題,
這裡是我的聯絡方式,
你可以現在就問,或是這裡是我的聯絡方式,
隨時都可以找我。
那麼,對,這就是我最後一張圖片,感謝大家。
謝謝懷傑。
那我們可以先,如果大家有興趣的話,
可以把麥克風打開,然後給懷傑一個鼓掌。
然後,我先把那個PoAP的code寫上來,
讓我找一下。
大家如果有什麼問題的話,也可以現在發問。
那我先給大家鼓掌,我看到有人鼓掌。
好,我這邊把那個PoAP的那個code寫下來。
謝謝各位的參與。
好,謝謝。
那,那個,我這邊有個問題。
就是,你的那個投影片啊,
你之後想要分享在,譬如說Tyra的網站上嗎?
不然,就是,你那個開分享應該只是暫時的吧?
嗯,我想想好了。
我可以分享給目前我們有參加的與會者,絕對沒問題。
而且,短時間之內,這個投影片應該會是公開的。
不過,要不要分享到網站上,我之後再跟你聯繫。
好好,沒有問題。
謝謝。
然後,另外,我自己有個問題。
就是像,現在很多那個Quantum Computing的那些公司啊,
他們做的事情是不是也是類似的?
就是,他們把他們的計算的那個資源,
在雲端上面分享給大家使用。
然後,你也是用Python寫code,
然後,就是把它upload到他們的伺服器上面,
他們就會幫你跑。
就是,他們的哈位也不一樣,
但是他們就會幫你跑這個code。
嗯,其實這還是算是比較傳統的模式。
比較傳統使用超級電腦的模式,
就是在超級電腦上面會有一個,
有點像是工作排程器的東西。
那,你必須要把你自己寫的程式碼腳本啊,
上傳到這個工作流程器裡面。
然後,由這個工作流程器去部署。
就是他會決定說,他要撥多少計算資源,
在什麼時候,然後要撥多少計算資源,
來執行你的程式碼。
然後,最後呢,再把那個執行的結果,
以某種方式打包,然後送給你。
對。
對,這其實是比較傳統的模式。
那我們現在推廣的模式,
就是省去這個工作排程器的這個部分。
Jupyter本身就可以當作工作排程器。
你只要使用正確的,譬如說Kubernetes的這種結構。
呃,實際的技術細節有點複雜,
我這邊簡單的講就好。
呃,你只要使用Kubernetes這種結構,
你就可以做到用JupyterHub來當作Scheduler,
來當作工作排程器。
你可以在你的腳本一剛開始就決定,
你要用多少資源。
你可以用幾個節點啊,幾個Cluster。
然後呢,你再開始跑。
然後JupyterHub有跟Desk,
Desk是一個我剛講過的平行運算的套件,
Python裡面平行運算的套件。
那有Desk的外掛元件。
你只要使用了Desk,
就可以在JupyterHub裡面開啟幾個,
有點像是控制面板,
然後來監測你在執行這些程式碼的時候,
即時的監測你在執行這些程式碼的時候,
使用多少CPU。
喂喂喂,是我卡了嗎?
好像,大家聽得到懷杰講話嗎?
好像是,殭屍好像消失了。
沒關係,我們等他一下好了。
大家如果還有什麼,有問題可以發問,
可以把它寫下來發問一下喔。
好,謝謝大家。
剛才聽講者說Desk好像是Python的一個套件吧,
所以應該是只要他有在他的伺服器上面裝Desk,
他應該就可以使用Desk的功能。
只是我不知道Desk的功能是什麼。
我猜應該是。
哈囉,懷杰,聽得到嗎?
哈囉,剛剛好像出現了一點問題。
抱歉抱歉,我剛剛是不是講到一半的時候就被卡掉了?
對,你剛剛講到…講到哪裡啊?
我剛剛是不是講到那個…
他可以用…他有一個自己的Scheduler嗎?
他有點像是利用…應該這麼說,
就是JupyterHub是透過另外一個開源的套件叫做Desk,
來管理平行運算的部分,來管理存取CPU資源的部分,
還有平行運算的部分。
Desk有提供一個有點像是外掛元件的東西,
他可以讓你送到Cluster裡面的工作排程,
他可以監測你送到Cluster裡面的工作排程,
然後用可視化的圖…就用視覺化的圖表,
來讓你知道現在這個排程進行到哪裡了,
然後可能還要多久,然後跑的結果怎麼樣。
了解,剛才有一個聽眾問那個…
我不會唸這個名字,Yi…
Desk
對,Desk,然後他是想要問這個是內建功能嗎?
還是有另外的連結?
然後是用那個…那個叫什麼?
Pip Install來做這件事情嗎?
Desk的話…
Desk應該是有在Pip上面,
不過你可以試試看,我想應該是有。
然後Desk網站是這個。
在Callisto Hub上面,我印象中Callisto Hub是沒有裝Desk,
因為他們本來就不希望使用者用平行運算來真的計算,
來消耗大量的計算資源。
所以Callisto Hub是沒有裝Desk的,他們不支援平行運算。
但如果你今天想要裝個人的電腦,
裝在個人的團隊上面,那我想…
像我們的研究室團隊就有Desk,
我們有Desk跟另外一個叫做Desk Gateway的東西。
他們兩個的用法就是有點…會有點不太一樣。
Desk…
Desk Gateway是專門用來…有點像收集,
就是如果你今天的JubyHub是部署在雲端,
譬如說Amazon雲端或是Google雲端的話,
Desk Gateway是專門用來收集那些在雲端上面可用的節點,
然後把它們聚在一起,讓你使用。
Desk則是把你自己的工作流程給傳到這些節點,
讓它們開始跑,有點像是這樣子。
那…對,但是Jupyter就是透過Desk的支援,
來實現我們想要的平行運算的方法。
那我想要請問…再延伸一下剛才的問題,
就是像這些Quantum Computation的Company啊,
那你會建議他們使用JupyterHub嗎?
就是他們既然都已經要開源了,
那他們何不做個JupyterHub呢?
當然會啊,當然會啊。
事實上現在已經有非常多的不同的努力在多方進行。
我不確定你心裡想的是哪一家啦?
但我想現在就是慢慢地有這個趨勢,
就是大家都知道什麼樣子的實踐方法呢,
是對開放科學有助益的。
那大家就會傾向去了解以及使用這些方法。
就是說他們可能已經有一些人已經有這個想法之類的。
那當然對於某些商業的公司,
他們可能有他們自己的考量。
最大的問題就是,
他們可能會覺得他們自己的東西具有智慧財產。
這樣子的話,
他們可能就會不願意把他們所有的東西都開放出來。
對小公司而言,這可能是一個主要的阻礙。
了解。
那我看目前為止,
大家做的努力好像比較偏向於說,
讓大眾可以認識一下這個跑跑簡單的Quantum Circling,
然後看看就是教大家怎麼做這件事情而已。
當然當然當然,
就是現在是在起步階段嘛。
譬如說我現在在這邊放的教學資源,
大部分也都是就是教大家怎麼使用Python,
怎麼使用Git這種很簡單很簡單的基礎。
那但是當使用者會之後,
他們就可以開始發揮他們的創意去做一些困難的事情。
比較進階的事情。
那這邊大家還沒有問題呢?
好像沒有。
那我就把那個錄影關掉。
